{"version":3,"file":"button-radio-group.directive.js","sourceRoot":"","sources":["../../../../src/buttons/button-radio-group.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  ChangeDetectorRef,\r\n  ContentChildren,\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Provider,\r\n  QueryList\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A group of radio buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadioGroup]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\r\n\r\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\r\n  radioButtons: QueryList<ButtonRadioDirective>;\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set value(value: string | null) {\r\n    this._value = value;\r\n    this.onChange(value);\r\n  }\r\n\r\n  private _value: string | null;\r\n\r\n  private _disabled: boolean;\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): null | number {\r\n    if (this._disabled) {\r\n      return null;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  writeValue(value: string | null): void {\r\n    this._value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    if (this.radioButtons) {\r\n      this._disabled = disabled;\r\n      this.radioButtons.forEach(buttons => {\r\n        buttons.setDisabledState(disabled);\r\n      });\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n    if (activeRadio) {\r\n      activeRadio.focus();\r\n    } else {\r\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\r\n      if (firstEnabled) {\r\n        firstEnabled.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.ArrowRight', ['$event'])\r\n  @HostListener('keydown.ArrowDown', ['$event'])\r\n  selectNext(event: KeyboardEvent) {\r\n    this.selectInDirection('next');\r\n    event.preventDefault();\r\n  }\r\n\r\n  @HostListener('keydown.ArrowLeft', ['$event'])\r\n  @HostListener('keydown.ArrowUp', ['$event'])\r\n  selectPrevious(event: KeyboardEvent) {\r\n    this.selectInDirection('previous');\r\n    event.preventDefault();\r\n  }\r\n\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  private selectInDirection(direction: 'next' | 'previous') {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\r\n      const step = direction === 'next' ? 1 : -1;\r\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\r\n      if (calcIndex < 0) {\r\n        calcIndex = buttonRadioDirectives.length - 1;\r\n      }\r\n\r\n      return calcIndex;\r\n    }\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n\r\n    if (activeRadio) {\r\n      const buttonRadioDirectives = this.radioButtons.toArray();\r\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\r\n      for (\r\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\r\n        i !== currentActiveIndex;\r\n        i = nextIndex(i, buttonRadioDirectives)\r\n      ) {\r\n        if (buttonRadioDirectives[i].canToggle()) {\r\n          buttonRadioDirectives[i].toggleIfAllowed();\r\n          buttonRadioDirectives[i].focus();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\r\n    return this.radioButtons.find(button => button.isActive) || this.radioButtons.find(button => button.hasFocus);\r\n  }\r\n}\r\n"]}