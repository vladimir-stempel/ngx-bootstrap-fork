{"version":3,"sources":["../../../../src/buttons/button-checkbox.directive.ts","../../../../src/buttons/button-radio.directive.ts","../../../../src/buttons/button-radio-group.directive.ts","../../../../src/buttons/buttons.module.ts"],"names":["CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ButtonCheckboxDirective","multi","this","btnCheckboxTrue","btnCheckboxFalse","state","onChange","Function","prototype","onTouched","onClick","isDisabled","toggle","value","ngOnInit","trueValue","Object","defineProperty","falseValue","writeValue","setDisabledState","registerOnChange","fn","registerOnTouched","selectors","hostVars","hostBindings","rf","ctx","Directive","selector","providers","Input","HostBinding","HostListener","RADIO_CONTROL_VALUE_ACCESSOR","ButtonRadioDirective","el","cdr","renderer","group","role","_hasFocus","_value","_onChange","_disabled","disabled","undefined","controlOrGroupDisabled","isActive","btnRadio","toggleIfAllowed","canToggle","uncheckable","onSpacePressed","event","preventDefault","focus","nativeElement","onFocus","onBlur","markForCheck","setAttribute","removeAttribute","i0","ɵɵdirectiveInject","ElementRef","ChangeDetectorRef","Renderer2","ButtonRadioGroupDirective","$event","Optional","Inject","hasDisabledClass","tabindex","radioButtons","forEach","buttons","activeRadio","getActiveOrFocusedRadio","firstEnabled","find","r","selectNext","selectInDirection","selectPrevious","direction","buttonRadioDirectives","toArray","currentActiveIndex","indexOf","i","nextIndex","currentIndex","calcIndex","length","button","hasFocus","contentQueries","dirIndex","ContentChildren","ButtonsModule","forRoot","ngModule","declarations","exports","NgModule"],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Provider\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n// TODO: config: activeClass - Class to apply to the checked buttons\r\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Add checkbox functionality to any element\r\n */\r\n@Directive({\r\n  selector: '[btnCheckbox]',\r\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\r\n  /** Truthy value, will be set to ngModel */\r\n  @Input() btnCheckboxTrue = true;\r\n  /** Falsy value, will be set to ngModel */\r\n  @Input() btnCheckboxFalse = false;\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-pressed')\r\n  state = false;\r\n\r\n  protected value: boolean | string;\r\n  protected isDisabled: boolean;\r\n\r\n  protected onChange = Function.prototype;\r\n  protected onTouched = Function.prototype;\r\n\r\n  // view -> model\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    if (this.isDisabled) {\r\n      return;\r\n    }\r\n\r\n    this.toggle(!this.state);\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.toggle(this.trueValue === this.value);\r\n  }\r\n\r\n  protected get trueValue(): boolean {\r\n    return typeof this.btnCheckboxTrue !== 'undefined'\r\n      ? this.btnCheckboxTrue\r\n      : true;\r\n  }\r\n\r\n  protected get falseValue(): boolean {\r\n    return typeof this.btnCheckboxFalse !== 'undefined'\r\n      ? this.btnCheckboxFalse\r\n      : false;\r\n  }\r\n\r\n  toggle(state: boolean): void {\r\n    this.state = state;\r\n    this.value = this.state ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: boolean | string | null): void {\r\n    this.state = this.trueValue === value;\r\n    this.value = value ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Provider,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonRadioDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Create radio buttons or groups of buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadio]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  /** Radio button value, will be set to `ngModel` */\r\n  @Input() btnRadio: string;\r\n  /** If `true` — radio button can be unchecked */\r\n  @Input() uncheckable: boolean;\r\n  /** Current value of radio component or group */\r\n  @Input()\r\n  get value() {\r\n    return this.group ? this.group.value : this._value;\r\n  }\r\n\r\n  set value(value: null | string) {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this._value = value;\r\n    this._onChange(value);\r\n  }\r\n  /** If `true` — radio button is disabled */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(disabled: boolean) {\r\n    this.setDisabledState(disabled);\r\n  }\r\n\r\n  @HostBinding('attr.aria-disabled')\r\n  get controlOrGroupDisabled() {\r\n    return this.disabled || (this.group && this.group.disabled) ? true : undefined;\r\n  }\r\n\r\n  @HostBinding('class.disabled')\r\n  get hasDisabledClass() {\r\n    // Although the radio is disabled the active radio should still stand out.\r\n    // The disabled class will prevent this so don't add it on the active radio\r\n    return this.controlOrGroupDisabled && !this.isActive;\r\n  }\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-checked')\r\n  get isActive(): boolean {\r\n    return this.btnRadio === this.value;\r\n  }\r\n\r\n  @HostBinding('attr.role') readonly role: string = 'radio';\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): undefined | number {\r\n    if (this.controlOrGroupDisabled) {\r\n      // Disabled radio buttons should not receive focus\r\n      return undefined;\r\n    } else if (this.isActive || this.group == null) {\r\n      return 0;\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  get hasFocus(): boolean {\r\n    return this._hasFocus;\r\n  }\r\n\r\n  private _value: null | string;\r\n  private _disabled: boolean;\r\n  private _hasFocus = false;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private cdr: ChangeDetectorRef,\r\n    private renderer: Renderer2,\r\n    @Optional()\r\n    @Inject(forwardRef(() => ButtonRadioGroupDirective))\r\n    private group: ButtonRadioGroupDirective\r\n  ) {}\r\n\r\n  @HostListener('click')\r\n  toggleIfAllowed(): void {\r\n    if (!this.canToggle()) {\r\n      return;\r\n    }\r\n\r\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\r\n  }\r\n\r\n  @HostListener('keydown.space', ['$event'])\r\n  onSpacePressed(event: KeyboardEvent) {\r\n    this.toggleIfAllowed();\r\n    event.preventDefault();\r\n  }\r\n\r\n  focus() {\r\n    this.el.nativeElement.focus();\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    this._hasFocus = false;\r\n    this.onTouched();\r\n  }\r\n\r\n  canToggle(): boolean {\r\n    return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\r\n  }\r\n\r\n  _onChange(value: string): void {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this.onTouched();\r\n    this.onChange(value);\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: string): void {\r\n    this.value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    this._disabled = disabled;\r\n    if (disabled) {\r\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\r\n\r\n      return;\r\n    }\r\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  ContentChildren,\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Provider,\r\n  QueryList\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A group of radio buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadioGroup]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\r\n\r\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\r\n  radioButtons: QueryList<ButtonRadioDirective>;\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set value(value: string | null) {\r\n    this._value = value;\r\n    this.onChange(value);\r\n  }\r\n\r\n  private _value: string | null;\r\n\r\n  private _disabled: boolean;\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): null | number {\r\n    if (this._disabled) {\r\n      return null;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  writeValue(value: string | null): void {\r\n    this._value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    if (this.radioButtons) {\r\n      this._disabled = disabled;\r\n      this.radioButtons.forEach(buttons => {\r\n        buttons.setDisabledState(disabled);\r\n      });\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n    if (activeRadio) {\r\n      activeRadio.focus();\r\n    } else {\r\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\r\n      if (firstEnabled) {\r\n        firstEnabled.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.ArrowRight', ['$event'])\r\n  @HostListener('keydown.ArrowDown', ['$event'])\r\n  selectNext(event: KeyboardEvent) {\r\n    this.selectInDirection('next');\r\n    event.preventDefault();\r\n  }\r\n\r\n  @HostListener('keydown.ArrowLeft', ['$event'])\r\n  @HostListener('keydown.ArrowUp', ['$event'])\r\n  selectPrevious(event: KeyboardEvent) {\r\n    this.selectInDirection('previous');\r\n    event.preventDefault();\r\n  }\r\n\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  private selectInDirection(direction: 'next' | 'previous') {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\r\n      const step = direction === 'next' ? 1 : -1;\r\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\r\n      if (calcIndex < 0) {\r\n        calcIndex = buttonRadioDirectives.length - 1;\r\n      }\r\n\r\n      return calcIndex;\r\n    }\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n\r\n    if (activeRadio) {\r\n      const buttonRadioDirectives = this.radioButtons.toArray();\r\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\r\n      for (\r\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\r\n        i !== currentActiveIndex;\r\n        i = nextIndex(i, buttonRadioDirectives)\r\n      ) {\r\n        if (buttonRadioDirectives[i].canToggle()) {\r\n          buttonRadioDirectives[i].toggleIfAllowed();\r\n          buttonRadioDirectives[i].focus();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\r\n    return this.radioButtons.find(button => button.isActive) || this.radioButtons.find(button => button.hasFocus);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\n@NgModule({\r\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\r\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\r\n})\r\nexport class ButtonsModule {\r\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\r\n    return { ngModule: ButtonsModule, providers: [] };\r\n  }\r\n}\r\n"]}