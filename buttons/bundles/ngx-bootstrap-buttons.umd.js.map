{"version":3,"file":"ngx-bootstrap-buttons.umd.js","sources":["../../../../src/buttons/button-checkbox.directive.ts","../../../../src/buttons/button-radio.directive.ts","../../../../src/buttons/button-radio-group.directive.ts","../../../../src/buttons/buttons.module.ts","../../../../src/buttons/ngx-bootstrap-buttons.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Provider\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n// TODO: config: activeClass - Class to apply to the checked buttons\r\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Add checkbox functionality to any element\r\n */\r\n@Directive({\r\n  selector: '[btnCheckbox]',\r\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\r\n  /** Truthy value, will be set to ngModel */\r\n  @Input() btnCheckboxTrue = true;\r\n  /** Falsy value, will be set to ngModel */\r\n  @Input() btnCheckboxFalse = false;\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-pressed')\r\n  state = false;\r\n\r\n  protected value: boolean | string;\r\n  protected isDisabled: boolean;\r\n\r\n  protected onChange = Function.prototype;\r\n  protected onTouched = Function.prototype;\r\n\r\n  // view -> model\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    if (this.isDisabled) {\r\n      return;\r\n    }\r\n\r\n    this.toggle(!this.state);\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.toggle(this.trueValue === this.value);\r\n  }\r\n\r\n  protected get trueValue(): boolean {\r\n    return typeof this.btnCheckboxTrue !== 'undefined'\r\n      ? this.btnCheckboxTrue\r\n      : true;\r\n  }\r\n\r\n  protected get falseValue(): boolean {\r\n    return typeof this.btnCheckboxFalse !== 'undefined'\r\n      ? this.btnCheckboxFalse\r\n      : false;\r\n  }\r\n\r\n  toggle(state: boolean): void {\r\n    this.state = state;\r\n    this.value = this.state ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: boolean | string | null): void {\r\n    this.state = this.trueValue === value;\r\n    this.value = value ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Provider,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonRadioDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Create radio buttons or groups of buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadio]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  /** Radio button value, will be set to `ngModel` */\r\n  @Input() btnRadio: string;\r\n  /** If `true` — radio button can be unchecked */\r\n  @Input() uncheckable: boolean;\r\n  /** Current value of radio component or group */\r\n  @Input()\r\n  get value() {\r\n    return this.group ? this.group.value : this._value;\r\n  }\r\n\r\n  set value(value: null | string) {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this._value = value;\r\n    this._onChange(value);\r\n  }\r\n  /** If `true` — radio button is disabled */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(disabled: boolean) {\r\n    this.setDisabledState(disabled);\r\n  }\r\n\r\n  @HostBinding('attr.aria-disabled')\r\n  get controlOrGroupDisabled() {\r\n    return this.disabled || (this.group && this.group.disabled) ? true : undefined;\r\n  }\r\n\r\n  @HostBinding('class.disabled')\r\n  get hasDisabledClass() {\r\n    // Although the radio is disabled the active radio should still stand out.\r\n    // The disabled class will prevent this so don't add it on the active radio\r\n    return this.controlOrGroupDisabled && !this.isActive;\r\n  }\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-checked')\r\n  get isActive(): boolean {\r\n    return this.btnRadio === this.value;\r\n  }\r\n\r\n  @HostBinding('attr.role') readonly role: string = 'radio';\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): undefined | number {\r\n    if (this.controlOrGroupDisabled) {\r\n      // Disabled radio buttons should not receive focus\r\n      return undefined;\r\n    } else if (this.isActive || this.group == null) {\r\n      return 0;\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  get hasFocus(): boolean {\r\n    return this._hasFocus;\r\n  }\r\n\r\n  private _value: null | string;\r\n  private _disabled: boolean;\r\n  private _hasFocus = false;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private cdr: ChangeDetectorRef,\r\n    private renderer: Renderer2,\r\n    @Optional()\r\n    @Inject(forwardRef(() => ButtonRadioGroupDirective))\r\n    private group: ButtonRadioGroupDirective\r\n  ) {}\r\n\r\n  @HostListener('click')\r\n  toggleIfAllowed(): void {\r\n    if (!this.canToggle()) {\r\n      return;\r\n    }\r\n\r\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\r\n  }\r\n\r\n  @HostListener('keydown.space', ['$event'])\r\n  onSpacePressed(event: KeyboardEvent) {\r\n    this.toggleIfAllowed();\r\n    event.preventDefault();\r\n  }\r\n\r\n  focus() {\r\n    this.el.nativeElement.focus();\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    this._hasFocus = false;\r\n    this.onTouched();\r\n  }\r\n\r\n  canToggle(): boolean {\r\n    return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\r\n  }\r\n\r\n  _onChange(value: string): void {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this.onTouched();\r\n    this.onChange(value);\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: string): void {\r\n    this.value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    this._disabled = disabled;\r\n    if (disabled) {\r\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\r\n\r\n      return;\r\n    }\r\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  ContentChildren,\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Provider,\r\n  QueryList\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A group of radio buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadioGroup]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\r\n\r\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\r\n  radioButtons: QueryList<ButtonRadioDirective>;\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set value(value: string | null) {\r\n    this._value = value;\r\n    this.onChange(value);\r\n  }\r\n\r\n  private _value: string | null;\r\n\r\n  private _disabled: boolean;\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): null | number {\r\n    if (this._disabled) {\r\n      return null;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  writeValue(value: string | null): void {\r\n    this._value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    if (this.radioButtons) {\r\n      this._disabled = disabled;\r\n      this.radioButtons.forEach(buttons => {\r\n        buttons.setDisabledState(disabled);\r\n      });\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n    if (activeRadio) {\r\n      activeRadio.focus();\r\n    } else {\r\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\r\n      if (firstEnabled) {\r\n        firstEnabled.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.ArrowRight', ['$event'])\r\n  @HostListener('keydown.ArrowDown', ['$event'])\r\n  selectNext(event: KeyboardEvent) {\r\n    this.selectInDirection('next');\r\n    event.preventDefault();\r\n  }\r\n\r\n  @HostListener('keydown.ArrowLeft', ['$event'])\r\n  @HostListener('keydown.ArrowUp', ['$event'])\r\n  selectPrevious(event: KeyboardEvent) {\r\n    this.selectInDirection('previous');\r\n    event.preventDefault();\r\n  }\r\n\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  private selectInDirection(direction: 'next' | 'previous') {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\r\n      const step = direction === 'next' ? 1 : -1;\r\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\r\n      if (calcIndex < 0) {\r\n        calcIndex = buttonRadioDirectives.length - 1;\r\n      }\r\n\r\n      return calcIndex;\r\n    }\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n\r\n    if (activeRadio) {\r\n      const buttonRadioDirectives = this.radioButtons.toArray();\r\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\r\n      for (\r\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\r\n        i !== currentActiveIndex;\r\n        i = nextIndex(i, buttonRadioDirectives)\r\n      ) {\r\n        if (buttonRadioDirectives[i].canToggle()) {\r\n          buttonRadioDirectives[i].toggleIfAllowed();\r\n          buttonRadioDirectives[i].focus();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\r\n    return this.radioButtons.find(button => button.isActive) || this.radioButtons.find(button => button.hasFocus);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\n@NgModule({\r\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\r\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\r\n})\r\nexport class ButtonsModule {\r\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\r\n    return { ngModule: ButtonsModule, providers: [] };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["NG_VALUE_ACCESSOR","forwardRef","Directive","Input","HostBinding","HostListener","Optional","Inject","RADIO_CONTROL_VALUE_ACCESSOR","ContentChildren","NgModule"],"mappings":"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"}