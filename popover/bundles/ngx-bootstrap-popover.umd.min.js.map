{"version":3,"sources":["../../../../src/popover/popover.config.ts","../../../../src/popover/popover-container.component.html","../../../../src/popover/popover-container.component.ts","../../../../src/popover/popover.directive.ts","../../../../src/popover/popover.module.ts"],"names":["this","adaptivePosition","placement","triggers","outsideClick","delay","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","PopoverConfig","factory","ɵfac","providedIn","Injectable","PopoverContainerComponent","config","Object","assign","defineProperty","prototype","isBs3","i0","ɵɵdirectiveInject","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","i0.ɵɵelement","i0.ɵɵtemplate","i0.ɵɵprojection","i0.ɵɵproperty","Component","selector","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[class]","[class.show]","[class.bs3]","role","style","styles","templateUrl","Input","title","id","PopoverDirective","_config","_elementRef","_renderer","_viewContainerRef","cis","_positionService","popoverId","containerClass","_isInited","_popover","createLoader","provide","useValue","onShown","onHidden","window","nativeElement","addEventListener","focus","err","isShown","value","show","hide","setAriaDescribedBy","_ariaDescribedby","isOpen","instance","setAttribute","removeAttribute","_this","popover","_delayTimeoutId","setOptions","modifiers","flip","enabled","preventOverflow","showPopover","undefined","attach","to","container","position","attachment","content","context","popoverContext","popoverTitle","calcPosition","deletePositionElement","_componentRef","location","cancelDelayedTooltipShowing","_popoverCancelShowFn","_timer_1","timer","subscribe","parseTriggers","forEach","trigger","listen","close","unsubscribe","clearTimeout","toggle","ngOnInit","ngOnDestroy","dispose","ElementRef","Renderer2","ViewContainerRef","i2$1","ComponentLoaderFactory","i3","PositioningService","inputs","outputs","exportAs","Directive","Output","PopoverModule","forRoot","ngModule","providers","imports","CommonModule","declarations","exports","NgModule","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Configuration service for the Popover directive.\r\n * You can inject this service, typically in your root component, and customize\r\n * the values of its properties in order to provide default values for all the\r\n * popovers used in the application.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PopoverConfig {\r\n  /** sets disable adaptive position */\r\n  adaptivePosition = true;\r\n  /**\r\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\", \"auto\"\r\n   */\r\n  placement = 'top';\r\n  /**\r\n   * Specifies events that should trigger. Supports a space separated list of\r\n   * event names.\r\n   */\r\n  triggers = 'click';\r\n\r\n  outsideClick = false;\r\n  /**\r\n   * A selector specifying the element the popover should be appended to.\r\n   */\r\n  container: string;\r\n  /** delay before showing the tooltip */\r\n  delay = 0;\r\n}\r\n","<div class=\"popover-arrow arrow\"></div>\r\n<h3 class=\"popover-title popover-header\" *ngIf=\"title\">{{ title }}</h3>\r\n<div class=\"popover-content popover-body\">\r\n  <ng-content></ng-content>\r\n</div>\r\n","import { ChangeDetectionStrategy, Input, Component } from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\n\r\n@Component({\r\n  selector: 'popover-container',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n  host: {\r\n    '[attr.id]': 'popoverId',\r\n    '[class]':\r\n      '\"popover in popover-\" + placement + \" \" + \"bs-popover-\" + placement + \" \" + placement + \" \" + containerClass',\r\n    '[class.show]': '!isBs3',\r\n    '[class.bs3]': 'isBs3',\r\n    role: 'tooltip',\r\n    style: 'display:block;'\r\n  },\r\n  styles: [\r\n    `\r\n    :host.bs3.popover-top {\r\n      margin-bottom: 10px;\r\n    }\r\n    :host.bs3.popover.top>.arrow {\r\n      margin-left: -2px;\r\n    }\r\n    :host.bs3.popover.top {\r\n      margin-bottom: 10px;\r\n    }\r\n    :host.popover.bottom>.arrow {\r\n      margin-left: -4px;\r\n    }\r\n    :host.bs3.bs-popover-left {\r\n      margin-right: .5rem;\r\n    }\r\n    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{\r\n      margin: .3rem 0;\r\n    }\r\n    `\r\n  ],\r\n  templateUrl: './popover-container.component.html'\r\n})\r\nexport class PopoverContainerComponent {\r\n  @Input() placement: string;\r\n  @Input() title: string;\r\n  containerClass: string;\r\n  popoverId: string;\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  constructor(config: PopoverConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n}\r\n","import {\r\n  Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output,\r\n  Renderer2, TemplateRef, ViewContainerRef\r\n} from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\nimport { PopoverContainerComponent } from './popover-container.component';\r\nimport { PositioningService } from 'ngx-bootstrap/positioning';\r\nimport { timer } from 'rxjs';\r\nimport { parseTriggers, Trigger } from 'ngx-bootstrap/utils';\r\n\r\nlet id = 0;\r\n\r\n/**\r\n * A lightweight, extensible directive for fancy popover creation.\r\n */\r\n@Directive({selector: '[popover]', exportAs: 'bs-popover'})\r\nexport class PopoverDirective implements OnInit, OnDestroy {\r\n  /** unique id popover - use for aria-describedby */\r\n  popoverId = id++;\r\n  /** sets disable adaptive position */\r\n  @Input() adaptivePosition: boolean;\r\n  /**\r\n   * Content to be displayed as popover.\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  @Input() popover: string | TemplateRef<any>;\r\n  /**\r\n   * Context to be used if popover is a template.\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  @Input() popoverContext: any;\r\n  /**\r\n   * Title of a popover.\r\n   */\r\n  @Input() popoverTitle: string;\r\n  /**\r\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\r\n   */\r\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'top left' | 'top right' |\r\n    'right top' | 'right bottom' | 'bottom right' | 'bottom left' | 'left bottom' | 'left top';\r\n  /**\r\n   * Close popover on outside click\r\n   */\r\n  @Input() outsideClick = false;\r\n  /**\r\n   * Specifies events that should trigger. Supports a space separated list of\r\n   * event names.\r\n   */\r\n  @Input() triggers: string;\r\n  /**\r\n   * A selector specifying the element the popover should be appended to.\r\n   */\r\n  @Input() container: string;\r\n\r\n  /**\r\n   * Css class for popover container\r\n   */\r\n  @Input() containerClass = '';\r\n\r\n  /**\r\n   * Returns whether or not the popover is currently being shown\r\n   */\r\n  @Input()\r\n  get isOpen(): boolean {\r\n    return this._popover.isShown;\r\n  }\r\n\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this.show();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delay before showing the tooltip\r\n   */\r\n  @Input() delay: number;\r\n\r\n  /**\r\n   * Emits an event when the popover is shown\r\n   */\r\n  @Output() onShown: EventEmitter<unknown>;\r\n  /**\r\n   * Emits an event when the popover is hidden\r\n   */\r\n  @Output() onHidden: EventEmitter<unknown>;\r\n\r\n  protected _popoverCancelShowFn: () => void;\r\n\r\n  protected _delayTimeoutId?: number;\r\n\r\n  private _popover: ComponentLoader<PopoverContainerComponent>;\r\n  private _isInited = false;\r\n  private _ariaDescribedby: string;\r\n\r\n  constructor(\r\n    _config: PopoverConfig,\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer2,\r\n    _viewContainerRef: ViewContainerRef,\r\n    cis: ComponentLoaderFactory,\r\n    private _positionService: PositioningService\r\n  ) {\r\n    this._popover = cis\r\n      .createLoader<PopoverContainerComponent>(\r\n        _elementRef,\r\n        _viewContainerRef,\r\n        _renderer\r\n      )\r\n      .provide({provide: PopoverConfig, useValue: _config});\r\n\r\n    Object.assign(this, _config);\r\n\r\n    this.onShown = this._popover.onShown;\r\n    this.onHidden = this._popover.onHidden;\r\n\r\n    // fix: no focus on button on Mac OS #1795\r\n    if (typeof window !== 'undefined') {\r\n      _elementRef.nativeElement.addEventListener('click', function () {\r\n        try {\r\n          _elementRef.nativeElement.focus();\r\n        } catch (err) {\r\n          return;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set attribute aria-describedBy for element directive and\r\n   * set id for the popover\r\n   */\r\n  setAriaDescribedBy(): void {\r\n    this._ariaDescribedby = this.isOpen ? `ngx-popover-${this.popoverId}` : null;\r\n    if (this._ariaDescribedby) {\r\n      this._popover.instance.popoverId = this._ariaDescribedby;\r\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ariaDescribedby);\r\n    } else {\r\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens an element’s popover. This is considered a “manual” triggering of\r\n   * the popover.\r\n   */\r\n  show(): void {\r\n    if (this._popover.isShown || !this.popover || this._delayTimeoutId) {\r\n      return;\r\n    }\r\n\r\n    this._positionService.setOptions({\r\n      modifiers: {\r\n        flip: {\r\n          enabled: this.adaptivePosition\r\n        },\r\n        preventOverflow: {\r\n          enabled: this.adaptivePosition\r\n        }\r\n      }\r\n    });\r\n\r\n    const showPopover = () => {\r\n      if (this._delayTimeoutId) {\r\n        this._delayTimeoutId = undefined;\r\n      }\r\n\r\n      this._popover\r\n        .attach(PopoverContainerComponent)\r\n        .to(this.container)\r\n        .position({attachment: this.placement})\r\n        .show({\r\n          content: this.popover,\r\n          context: this.popoverContext,\r\n          placement: this.placement,\r\n          title: this.popoverTitle,\r\n          containerClass: this.containerClass\r\n        });\r\n\r\n      if (!this.adaptivePosition) {\r\n        this._positionService.calcPosition();\r\n        this._positionService.deletePositionElement(this._popover._componentRef.location);\r\n      }\r\n\r\n      this.isOpen = true;\r\n      this.setAriaDescribedBy();\r\n    };\r\n\r\n    const cancelDelayedTooltipShowing = () => {\r\n      if (this._popoverCancelShowFn) {\r\n        this._popoverCancelShowFn();\r\n      }\r\n    };\r\n\r\n    if (this.delay) {\r\n      const _timer = timer(this.delay).subscribe(() => {\r\n        showPopover();\r\n        cancelDelayedTooltipShowing();\r\n      });\r\n\r\n      if (this.triggers) {\r\n        parseTriggers(this.triggers)\r\n          .forEach((trigger: Trigger) => {\r\n            this._popoverCancelShowFn = this._renderer.listen(\r\n              this._elementRef.nativeElement,\r\n              trigger.close,\r\n              () => {\r\n                _timer.unsubscribe();\r\n                cancelDelayedTooltipShowing();\r\n              }\r\n            );\r\n          });\r\n      }\r\n    } else {\r\n      showPopover();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes an element’s popover. This is considered a “manual” triggering of\r\n   * the popover.\r\n   */\r\n  hide(): void {\r\n    if (this._delayTimeoutId) {\r\n      clearTimeout(this._delayTimeoutId);\r\n      this._delayTimeoutId = undefined;\r\n    }\r\n\r\n    if (this.isOpen) {\r\n      this._popover.hide();\r\n      this.setAriaDescribedBy();\r\n      this.isOpen = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles an element’s popover. This is considered a “manual” triggering of\r\n   * the popover.\r\n   */\r\n  toggle(): void {\r\n    if (this.isOpen) {\r\n      return this.hide();\r\n    }\r\n\r\n    this.show();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // fix: seems there are an issue with `routerLinkActive`\r\n    // which result in duplicated call ngOnInit without call to ngOnDestroy\r\n    // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\r\n    if (this._isInited) {\r\n      return;\r\n    }\r\n    this._isInited = true;\r\n\r\n    this._popover.listen({\r\n      triggers: this.triggers,\r\n      outsideClick: this.outsideClick,\r\n      show: () => this.show(),\r\n      hide: () => this.hide()\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._popover.dispose();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\nimport { PositioningService } from 'ngx-bootstrap/positioning';\r\nimport { PopoverDirective } from './popover.directive';\r\nimport { PopoverContainerComponent } from './popover-container.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PopoverDirective, PopoverContainerComponent],\r\n  exports: [PopoverDirective],\r\n  entryComponents: [PopoverContainerComponent]\r\n})\r\nexport class PopoverModule {\r\n  static forRoot(): ModuleWithProviders<PopoverModule> {\r\n    return {\r\n      ngModule: PopoverModule,\r\n      providers: [ComponentLoaderFactory, PositioningService]\r\n    };\r\n  }\r\n}\r\n"]}