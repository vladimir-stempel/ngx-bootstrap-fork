{"version":3,"sources":["../../../../src/accordion/accordion.config.ts","../../../../src/accordion/accordion.component.ts","../../../../src/accordion/accordion-group.component.html","../../../../src/accordion/accordion-group.component.ts","../../../../src/accordion/accordion.module.ts"],"names":["this","closeOthers","isAnimated","AccordionConfig","factory","ɵfac","providedIn","Injectable","AccordionComponent","config","groups","Object","assign","prototype","closeOtherPanels","openGroup","forEach","group","isOpen","addGroup","push","removeGroup","index","indexOf","splice","i0","ɵɵdirectiveInject","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","i0.ɵɵprojection","Component","selector","template","host","[attr.aria-multiselectable]","role","class","style","Input","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","AccordionPanelComponent","accordion","isOpenChange","EventEmitter","_isOpen","defineProperty","value","_this","Promise","resolve","then","emit","catch","error","console","log","isBs3","ngOnInit","panelClass","ngOnDestroy","toggleOpen","isDisabled","i0.ɵɵlistener","i0.ɵɵtemplate","i0.ɵɵattribute","templateUrl","styleUrls","Inject","heading","Output","HostBinding","AccordionModule","forRoot","ngModule","providers","imports","CommonModule","CollapseModule","declarations","exports","NgModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Configuration service, provides default values for the AccordionComponent.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccordionConfig {\r\n  /** Whether the other panels should be closed when a panel is opened */\r\n  closeOthers = false;\r\n  /** turn on/off animation */\r\n  isAnimated = false;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { AccordionPanelComponent } from './accordion-group.component';\r\nimport { AccordionConfig } from './accordion.config';\r\n\r\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\r\n@Component({\r\n  selector: 'accordion',\r\n  template: `<ng-content></ng-content>`,\r\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n  host: {\r\n    '[attr.aria-multiselectable]': 'closeOthers',\r\n    role: 'tablist',\r\n    class: 'panel-group',\r\n    style: 'display: block'\r\n  }\r\n})\r\nexport class AccordionComponent {\r\n  /** turn on/off animation */\r\n  @Input() isAnimated = false;\r\n  /** if `true` expanding one item will close all others */\r\n  @Input() closeOthers: boolean;\r\n\r\n  protected groups: AccordionPanelComponent[] = [];\r\n\r\n  constructor(config: AccordionConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\r\n    if (!this.closeOthers) {\r\n      return;\r\n    }\r\n\r\n    this.groups.forEach((group: AccordionPanelComponent) => {\r\n      if (group !== openGroup) {\r\n        group.isOpen = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  addGroup(group: AccordionPanelComponent): void {\r\n    group.isAnimated = this.isAnimated;\r\n    this.groups.push(group);\r\n  }\r\n\r\n  removeGroup(group: AccordionPanelComponent): void {\r\n    const index = this.groups.indexOf(group);\r\n    if (index !== -1) {\r\n      this.groups.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n","<div class=\"panel card\" [ngClass]=\"panelClass\">\r\n  <div\r\n    class=\"panel-heading card-header\"\r\n    role=\"tab\"\r\n    (click)=\"toggleOpen()\"\r\n    [ngClass]=\"isDisabled ? 'panel-disabled' : 'panel-enabled'\"\r\n  >\r\n    <div class=\"panel-title\">\r\n      <div role=\"button\" class=\"accordion-toggle\" [attr.aria-expanded]=\"isOpen\">\r\n        <button class=\"btn btn-link\" *ngIf=\"heading\" [ngClass]=\"{ 'text-muted': isDisabled }\" type=\"button\">\r\n          {{ heading }}\r\n        </button>\r\n        <ng-content select=\"[accordion-heading]\"></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"panel-collapse collapse\" role=\"tabpanel\" [collapse]=\"!isOpen\" [isAnimated]=\"isAnimated\">\r\n    <div class=\"panel-body card-block card-body\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {\r\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\r\n} from '@angular/core';\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\nimport { AccordionComponent } from './accordion.component';\r\n\r\n/**\r\n * ### Accordion heading\r\n * Instead of using `heading` attribute on the `accordion-group`, you can use\r\n * an `accordion-heading` attribute on `any` element inside of a group that\r\n * will be used as group's header template.\r\n */\r\n@Component({\r\n  selector: 'accordion-group, accordion-panel',\r\n  templateUrl: './accordion-group.component.html',\r\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n  host: {\r\n    class: 'panel',\r\n    style: 'display: block'\r\n  },\r\n  styleUrls: ['./accordion.scss']\r\n})\r\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\r\n  /** turn on/off animation */\r\n  isAnimated = false;\r\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\r\n  @Input() heading: string;\r\n  /** Provides an ability to use Bootstrap's contextual panel classes\r\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\r\n   * List of all available classes [available here]\r\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\r\n   */\r\n  @Input() panelClass: string;\r\n  /** if <code>true</code> — disables accordion group */\r\n  @Input() isDisabled: boolean;\r\n  /** Emits when the opened state changes */\r\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  // Questionable, maybe .panel-open should be on child div.panel element?\r\n  /** Is accordion group open or closed. This property supports two-way binding */\r\n  @HostBinding('class.panel-open')\r\n  @Input()\r\n  get isOpen(): boolean {\r\n    return this._isOpen;\r\n  }\r\n\r\n  set isOpen(value: boolean) {\r\n    if (value !== this.isOpen) {\r\n      if (value) {\r\n        this.accordion.closeOtherPanels(this);\r\n      }\r\n      this._isOpen = value;\r\n      Promise.resolve(null).then(() => {\r\n        this.isOpenChange.emit(value);\r\n      })\r\n        .catch((error: Error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  protected _isOpen = false;\r\n  protected accordion: AccordionComponent;\r\n\r\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\r\n    this.accordion = accordion;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.panelClass = this.panelClass || 'panel-default';\r\n    this.accordion.addGroup(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.accordion.removeGroup(this);\r\n  }\r\n\r\n  toggleOpen(): void {\r\n    if (!this.isDisabled) {\r\n      this.isOpen = !this.isOpen;\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { AccordionComponent } from './accordion.component';\r\nimport { AccordionPanelComponent } from './accordion-group.component';\r\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CollapseModule],\r\n  declarations: [AccordionComponent, AccordionPanelComponent],\r\n  exports: [AccordionComponent, AccordionPanelComponent]\r\n})\r\nexport class AccordionModule {\r\n  static forRoot(): ModuleWithProviders<AccordionModule> {\r\n    return { ngModule: AccordionModule, providers: [] };\r\n  }\r\n}\r\n"]}