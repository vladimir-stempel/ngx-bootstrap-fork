{"version":3,"file":"ng-positioning.js","sourceRoot":"","sources":["../../../../src/positioning/ng-positioning.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,UAAU,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAE3F,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAI5E,MAAM,OAAO,WAAW;IACtB,QAAQ,CAAC,WAAwB,EAAE,aAA0B,CAAA,kBAAkB;QAC7E,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,aAAa,CAAA,WAAW,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,CAAC,WAAwB,EAAE,aAA0B,CAAA,kBAAkB;QAC3E,OAAO,mBAAmB,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IACzD,CAAC;IAED,gBAAgB,CACd,WAAwB,EACxB,aAA0B,EAC1B,QAAgB,EAChB,YAAsB,EACtB,OAAiB;QAEjB,MAAM,gBAAgB,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;QAE/D,OAAO,gBAAgB,CAAC,MAAM,CAC5B,CAAC,YAAY,EAAE,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,EAClD,QAAQ,CAAC,aAAa,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CACxD,CAAC;IACJ,CAAC;CACF;AAED,MAAM,eAAe,GAAG,IAAI,WAAW,EAAE,CAAC;AAE1C,MAAM,UAAU,gBAAgB,CAC9B,WAAwB,EACxB,aAA0B,EAC1B,SAAiB,EACjB,YAAsB,EACtB,OAAiB,EACjB,QAAoB;IAGpB,MAAM,IAAI,GAAG,eAAe,CAAC,gBAAgB,CAC3C,WAAW,EACX,aAAa,EACb,SAAS,EACT,YAAY,EACZ,OAAO,CACR,CAAC;IAEF,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IAEjC,SAAS,CAAC,aAAa,EAAE;QACvB,aAAa,EAAE,WAAW;QAC1B,GAAG,EAAE,KAAK;QACV,IAAI,EAAE,KAAK;QACX,SAAS,EAAE,eAAe,OAAO,CAAC,IAAI,OAAO,OAAO,CAAC,GAAG,UAAU;KACnE,EAAE,QAAQ,CAAC,CAAC;IAEb,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;QACvB,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;KAC9D;IAED,oBAAoB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACvC,CAAC","sourcesContent":["/**\r\n * @copyright Valor Software\r\n * @copyright Federico Zivolo and contributors\r\n */\r\nimport { Renderer2 } from '@angular/core';\r\n\r\nimport { getOffsets, getReferenceOffsets, updateContainerClass, setStyles } from './utils';\r\n\r\nimport { arrow, flip, preventOverflow, shift, initData } from './modifiers';\r\nimport { Data, Offsets, Options } from './models';\r\n\r\n\r\nexport class Positioning {\r\n  position(hostElement: HTMLElement, targetElement: HTMLElement/*, round = true*/): Offsets {\r\n    return this.offset(hostElement, targetElement/*, false*/);\r\n  }\r\n\r\n  offset(hostElement: HTMLElement, targetElement: HTMLElement/*, round = true*/): Offsets {\r\n    return getReferenceOffsets(targetElement, hostElement);\r\n  }\r\n\r\n  positionElements(\r\n    hostElement: HTMLElement,\r\n    targetElement: HTMLElement,\r\n    position: string,\r\n    appendToBody?: boolean,\r\n    options?: Options\r\n  ): Data {\r\n    const chainOfModifiers = [flip, shift, preventOverflow, arrow];\r\n\r\n    return chainOfModifiers.reduce(\r\n      (modifiedData, modifier) => modifier(modifiedData),\r\n      initData(targetElement, hostElement, position, options)\r\n    );\r\n  }\r\n}\r\n\r\nconst positionService = new Positioning();\r\n\r\nexport function positionElements(\r\n  hostElement: HTMLElement,\r\n  targetElement: HTMLElement,\r\n  placement: string,\r\n  appendToBody?: boolean,\r\n  options?: Options,\r\n  renderer?: Renderer2\r\n): void {\r\n\r\n  const data = positionService.positionElements(\r\n    hostElement,\r\n    targetElement,\r\n    placement,\r\n    appendToBody,\r\n    options\r\n  );\r\n\r\n  const offsets = getOffsets(data);\r\n\r\n  setStyles(targetElement, {\r\n    'will-change': 'transform',\r\n    top: '0px',\r\n    left: '0px',\r\n    transform: `translate3d(${offsets.left}px, ${offsets.top}px, 0px)`\r\n  }, renderer);\r\n\r\n  if (data.instance.arrow) {\r\n    setStyles(data.instance.arrow, data.offsets.arrow, renderer);\r\n  }\r\n\r\n  updateContainerClass(data, renderer);\r\n}\r\n"]}