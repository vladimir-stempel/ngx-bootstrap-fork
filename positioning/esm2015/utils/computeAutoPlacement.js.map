{"version":3,"file":"computeAutoPlacement.js","sourceRoot":"","sources":["../../../../../src/positioning/utils/computeAutoPlacement.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAGhD,SAAS,OAAO,CAAC,EAAE,KAAK,EAAE,MAAM,EAA0B;IACxD,OAAO,KAAK,GAAG,MAAM,CAAC;AACxB,CAAC;AAED,MAAM,UAAU,oBAAoB,CAClC,SAAiB,EACjB,OAAgB,EAChB,MAAmB,EACnB,IAAiB,EACjB,gBAAgB,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,EACrD,iBAAiB,GAAG,UAAU,EAC9B,OAAO,GAAG,CAAC;IAEX,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;QACpC,OAAO,SAAS,CAAC;KAClB;IAED,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;IAE3E,MAAM,KAAK,GAAG;QACZ,GAAG,EAAE;YACH,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,MAAM,EAAE,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG;SACrC;QACD,KAAK,EAAE;YACL,KAAK,EAAE,UAAU,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK;YACvC,MAAM,EAAE,UAAU,CAAC,MAAM;SAC1B;QACD,MAAM,EAAE;YACN,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,MAAM,EAAE,UAAU,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM;SAC3C;QACD,IAAI,EAAE;YACJ,KAAK,EAAE,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI;YACrC,MAAM,EAAE,UAAU,CAAC,MAAM;SAC1B;KACF,CAAC;IAEF,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;SACnC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,+BACV,GAAG,IACA,KAAK,CAAC,GAAG,CAAC,KACb,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IACzB,CAAC;SACF,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;IAEnC,IAAI,aAAa,GAAG,WAAW,CAAC,MAAM,CACpC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE;QACpB,OAAO,KAAK,IAAI,MAAM,CAAC,WAAW;eAC7B,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC;IACrC,CAAC,CACF,CAAC;IAEF,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE;QAChD,OAAO,gBAAgB;aACpB,IAAI,CAAC,CAAC,eAAuB,EAAE,EAAE;YAChC,OAAO,eAAe,KAAK,QAAQ,CAAC,GAAG,CAAC;QAC1C,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAW,aAAa,CAAC,MAAM,GAAG,CAAC;QACxD,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG;QACtB,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAEvB,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE1C,+BAA+B;IAC/B,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,kBAAkB,EAAE,cAAc,iBAAiB,EAAE,CAAC,CAAC;IAEnG,OAAO,iBAAiB,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAChE,CAAC","sourcesContent":["/**\r\n * Utility used to transform the `auto` placement to the placement with more\r\n * available space.\r\n */\r\nimport { getBoundaries } from './getBoundaries';\r\nimport { Offsets } from '../models';\r\n\r\nfunction getArea({ width, height }: Record<string, number>) {\r\n  return width * height;\r\n}\r\n\r\nexport function computeAutoPlacement(\r\n  placement: string,\r\n  refRect: Offsets,\r\n  target: HTMLElement,\r\n  host: HTMLElement,\r\n  allowedPositions = ['top', 'bottom', 'right', 'left'],\r\n  boundariesElement = 'viewport',\r\n  padding = 0\r\n) {\r\n  if (placement.indexOf('auto') === -1) {\r\n    return placement;\r\n  }\r\n\r\n  const boundaries = getBoundaries(target, host, padding, boundariesElement);\r\n\r\n  const rects = {\r\n    top: {\r\n      width: boundaries.width,\r\n      height: refRect.top - boundaries.top\r\n    },\r\n    right: {\r\n      width: boundaries.right - refRect.right,\r\n      height: boundaries.height\r\n    },\r\n    bottom: {\r\n      width: boundaries.width,\r\n      height: boundaries.bottom - refRect.bottom\r\n    },\r\n    left: {\r\n      width: refRect.left - boundaries.left,\r\n      height: boundaries.height\r\n    }\r\n  };\r\n\r\n  const sortedAreas = Object.keys(rects)\r\n    .map(key => ({\r\n      key,\r\n      ...rects[key],\r\n      area: getArea(rects[key])\r\n    }))\r\n    .sort((a, b) => b.area - a.area);\r\n\r\n  let filteredAreas = sortedAreas.filter(\r\n    ({ width, height }) => {\r\n      return width >= target.clientWidth\r\n        && height >= target.clientHeight;\r\n    }\r\n  );\r\n\r\n  filteredAreas = filteredAreas.filter((position) => {\r\n    return allowedPositions\r\n      .some((allowedPosition: string) => {\r\n        return allowedPosition === position.key;\r\n      });\r\n  });\r\n\r\n  const computedPlacement: string = filteredAreas.length > 0\r\n    ? filteredAreas[0].key\r\n    : sortedAreas[0].key;\r\n\r\n  const variation = placement.split(' ')[1];\r\n\r\n  // for tooltip on auto position\r\n  target.className = target.className.replace(/bs-tooltip-auto/g, `bs-tooltip-${computedPlacement}`);\r\n\r\n  return computedPlacement + (variation ? `-${variation}` : '');\r\n}\r\n"]}