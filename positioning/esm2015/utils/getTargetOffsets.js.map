{"version":3,"file":"getTargetOffsets.js","sourceRoot":"","sources":["../../../../../src/positioning/utils/getTargetOffsets.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAGhD,MAAM,UAAU,gBAAgB,CAC9B,MAAmB,EACnB,WAAoB,EACpB,QAAgB;IAEhB,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzC,wBAAwB;IACxB,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAEzC,uDAAuD;IACvD,MAAM,aAAa,GAAG;QACpB,KAAK,EAAE,UAAU,CAAC,KAAK;QACvB,MAAM,EAAE,UAAU,CAAC,MAAM;KAC1B,CAAC;IAEF,wFAAwF;IACxF,MAAM,OAAO,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5D,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;IAC1C,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/C,MAAM,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC;IACjD,MAAM,oBAAoB,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC;IAE3D,aAAa,CAAC,QAAQ,CAAC;QACrB,WAAW,CAAC,QAAQ,CAAC;YACrB,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC;YAC5B,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAE9B,aAAa,CAAC,aAAa,CAAC,GAAG,SAAS,KAAK,aAAa;QACxD,CAAC,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,UAAU,CAAC,oBAAoB,CAAC;QAC/D,CAAC,CAAC,WAAW,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC,CAAC;IAErD,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["/**\r\n * Get offsets to the target\r\n */\r\nimport { getOppositePlacement } from './getOppositePlacement';\r\nimport { getOuterSizes } from './getOuterSizes';\r\nimport { Offsets } from '../models';\r\n\r\nexport function getTargetOffsets(\r\n  target: HTMLElement,\r\n  hostOffsets: Offsets,\r\n  position: string\r\n): Offsets {\r\n  const placement = position.split(' ')[0];\r\n\r\n  // Get target node sizes\r\n  const targetRect = getOuterSizes(target);\r\n\r\n  // Add position, width and height to our offsets object\r\n  const targetOffsets = {\r\n    width: targetRect.width,\r\n    height: targetRect.height\r\n  };\r\n\r\n  // depending by the target placement we have to compute its offsets slightly differently\r\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\r\n  const mainSide = isHoriz ? 'top' : 'left';\r\n  const secondarySide = isHoriz ? 'left' : 'top';\r\n  const measurement = isHoriz ? 'height' : 'width';\r\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\r\n\r\n  targetOffsets[mainSide] =\r\n    hostOffsets[mainSide] +\r\n    hostOffsets[measurement] / 2 -\r\n    targetRect[measurement] / 2;\r\n\r\n  targetOffsets[secondarySide] = placement === secondarySide\r\n    ? hostOffsets[secondarySide] - targetRect[secondaryMeasurement]\r\n    : hostOffsets[getOppositePlacement(secondarySide)];\r\n\r\n  return targetOffsets;\r\n}\r\n"]}