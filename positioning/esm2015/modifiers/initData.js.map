{"version":3,"file":"initData.js","sourceRoot":"","sources":["../../../../../src/positioning/modifiers/initData.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,oBAAoB,EACpB,mBAAmB,EACnB,gBAAgB,EACjB,MAAM,UAAU,CAAC;AAIlB,MAAM,UAAU,QAAQ,CACtB,aAA0B,EAAE,WAAwB,EAAE,QAAgB,EAAE,OAAgB;IAGxF,MAAM,cAAc,GAAG,mBAAmB,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAEvE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,sCAAsC,CAAC;WACtD,CAAC,QAAQ,CAAC,KAAK,CAAC,wEAAwE,CAAC,EAAE;QACtF,QAAQ,GAAG,MAAM,CAAC;KACzB;IAEH,MAAM,aAAa,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAEhD,sDAAsD;IACtD,IAAI,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,+BAA+B,CAAC;QAC7D,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM;QAClC,CAAC,CAAC,QAAQ,CAAC;IAEb,oGAAoG;IACpG,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,2DAA2D,CAAC,CAAC;IAC7F,IAAI,OAAO,EAAE;QACX,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC/D;IAED,wEAAwE;IACxE,IAAI,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;QACtF,SAAS,GAAG,MAAM,CAAC;KACpB;IAED,MAAM,YAAY,GAAG,gBAAgB,CAAC,aAAa,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IAEhF,SAAS,GAAG,oBAAoB,CAC9B,SAAS,EACT,cAAc,EACd,aAAa,EACb,WAAW,EACX,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAC/C,CAAC;IAEF,OAAO;QACL,OAAO;QACP,QAAQ,EAAE;YACR,MAAM,EAAE,aAAa;YACrB,IAAI,EAAE,WAAW;YACjB,KAAK,EAAE,IAAI;SACZ;QACD,OAAO,EAAE;YACP,MAAM,EAAE,YAAY;YACpB,IAAI,EAAE,cAAc;YACpB,KAAK,EAAE,IAAI;SACZ;QACD,aAAa,EAAE,KAAK;QACpB,SAAS;QACT,aAAa;KACd,CAAC;AACJ,CAAC","sourcesContent":["import {\r\n  computeAutoPlacement,\r\n  getReferenceOffsets,\r\n  getTargetOffsets\r\n} from '../utils';\r\n\r\nimport { Data, Options } from '../models';\r\n\r\nexport function initData(\r\n  targetElement: HTMLElement, hostElement: HTMLElement, position: string, options: Options\r\n): Data {\r\n\r\n  const hostElPosition = getReferenceOffsets(targetElement, hostElement);\r\n\r\n  if (!position.match(/^(auto)*\\s*(left|right|top|bottom)*$/)\r\n    && !position.match(/^(left|right|top|bottom)*(?: (left|right|top|bottom))?\\s*(start|end)*$/)) {\r\n            position = 'auto';\r\n    }\r\n\r\n  const placementAuto = !!position.match(/auto/g);\r\n\r\n  // support old placements 'auto left|right|top|bottom'\r\n  let placement = position.match(/auto\\s(left|right|top|bottom)/)\r\n    ? position.split(' ')[1] || 'auto'\r\n    : position;\r\n\r\n  // Normalize placements that have identical main placement and variation (\"right right\" => \"right\").\r\n  const matches = placement.match(/^(left|right|top|bottom)* ?(?!\\1)(left|right|top|bottom)?/);\r\n  if (matches) {\r\n    placement = matches[1] + (matches[2] ? ` ${matches[2]}` : '');\r\n  }\r\n\r\n  // \"left right\", \"top bottom\" etc. placements also considered incorrect.\r\n  if (['left right', 'right left', 'top bottom', 'bottom top'].indexOf(placement) !== -1) {\r\n    placement = 'auto';\r\n  }\r\n\r\n  const targetOffset = getTargetOffsets(targetElement, hostElPosition, placement);\r\n\r\n  placement = computeAutoPlacement(\r\n    placement,\r\n    hostElPosition,\r\n    targetElement,\r\n    hostElement,\r\n    options ? options.allowedPositions : undefined\r\n  );\r\n\r\n  return {\r\n    options,\r\n    instance: {\r\n      target: targetElement,\r\n      host: hostElement,\r\n      arrow: null\r\n    },\r\n    offsets: {\r\n      target: targetOffset,\r\n      host: hostElPosition,\r\n      arrow: null\r\n    },\r\n    positionFixed: false,\r\n    placement,\r\n    placementAuto\r\n  };\r\n}\r\n"]}