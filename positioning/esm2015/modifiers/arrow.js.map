{"version":3,"file":"arrow.js","sourceRoot":"","sources":["../../../../../src/positioning/modifiers/arrow.ts"],"names":[],"mappings":"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","sourcesContent":["import { getClientRect, getOuterSizes, getStyleComputedProperty } from '../utils';\r\nimport { Data } from '../models';\r\n\r\nexport function arrow(data: Data) {\r\n  let targetOffsets = data.offsets.target;\r\n  // if arrowElement is a string, suppose it's a CSS selector\r\n  const arrowElement: HTMLElement | null = data.instance.target.querySelector('.arrow');\r\n\r\n  // if arrowElement is not found, don't run the modifier\r\n  if (!arrowElement) {\r\n    return data;\r\n  }\r\n\r\n  const isVertical = ['left', 'right'].indexOf(data.placement.split(' ')[0]) !== -1;\r\n\r\n  const len = isVertical ? 'height' : 'width';\r\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\r\n  const side = sideCapitalized.toLowerCase();\r\n  const altSide = isVertical ? 'left' : 'top';\r\n  const opSide = isVertical ? 'bottom' : 'right';\r\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\r\n  const placementVariation = data.placement.split(' ')[1];\r\n\r\n  // top/left side\r\n  if (data.offsets.host[opSide] - arrowElementSize < (targetOffsets)[side]) {\r\n    (targetOffsets)[side] -=\r\n      (targetOffsets)[side] - (data.offsets.host[opSide] - arrowElementSize);\r\n  }\r\n  // bottom/right side\r\n  if (Number((data).offsets.host[side]) + Number(arrowElementSize) > (targetOffsets)[opSide]) {\r\n    (targetOffsets)[side] +=\r\n      Number((data).offsets.host[side]) + Number(arrowElementSize) - Number((targetOffsets)[opSide]);\r\n  }\r\n  targetOffsets = getClientRect(targetOffsets);\r\n\r\n  // Compute the sideValue using the updated target offsets\r\n  // take target margin in account because we don't have this info available\r\n  const css = getStyleComputedProperty(data.instance.target);\r\n  const targetMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\r\n  const targetBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\r\n\r\n  // compute center of the target\r\n  let center: number;\r\n  if (!placementVariation) {\r\n    center = Number((data).offsets.host[side]) + Number(data.offsets.host[len] / 2 - arrowElementSize / 2);\r\n  } else {\r\n    const targetBorderRadius = parseFloat(css.borderRadius);\r\n    const targetSideArrowOffset = Number(targetMarginSide + targetBorderSide + targetBorderRadius);\r\n    center = side === placementVariation ?\r\n      Number((data).offsets.host[side]) + targetSideArrowOffset :\r\n      Number((data).offsets.host[side]) + Number(data.offsets.host[len] - targetSideArrowOffset);\r\n  }\r\n\r\n  let sideValue =\r\n    center - (targetOffsets)[side] - targetMarginSide - targetBorderSide;\r\n\r\n  // prevent arrowElement from being placed not contiguously to its target\r\n  sideValue = Math.max(Math.min(targetOffsets[len] - arrowElementSize, sideValue), 0);\r\n\r\n  data.offsets.arrow = {\r\n    [side]: Math.round(sideValue),\r\n    [altSide]: '' // make sure to unset any eventual altSide value from the DOM node\r\n  };\r\n\r\n  data.instance.arrow = arrowElement;\r\n\r\n  return data;\r\n}\r\n"]}