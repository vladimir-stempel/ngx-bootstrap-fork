{"version":3,"file":"ngx-bootstrap-carousel.js","sources":["../../../../src/carousel/carousel.config.ts","../../../../src/carousel/utils.ts","../../../../src/carousel/carousel.component.ts","../../../../src/carousel/carousel.component.html","../../../../src/carousel/slide.component.ts","../../../../src/carousel/carousel.module.ts","../../../../src/carousel/ngx-bootstrap-carousel.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CarouselConfig {\r\n  /* Default interval of auto changing of slides */\r\n  interval = 5000;\r\n\r\n  /* Is loop of auto changing of slides can be paused */\r\n  noPause = false;\r\n\r\n  /* Is slides can wrap from the last to the first slide */\r\n  noWrap = false;\r\n\r\n  /* Show carousel-indicators */\r\n  showIndicators = true;\r\n\r\n  /* Slides can be paused on focus */\r\n  pauseOnFocus = false;\r\n\r\n  /* If `true` - carousel indicators indicate slides chunks works ONLY if singleSlideOffset = FALSE */\r\n  indicatorsByChunk = false;\r\n\r\n  /* If value more then 1 — carousel works in multilist mode */\r\n  itemsPerSlide = 1;\r\n\r\n  /* If `true` — carousel shifts by one element. By default carousel shifts by number\r\n    of visible elements (itemsPerSlide field) */\r\n  singleSlideOffset = false;\r\n}\r\n","/**\r\n * Returns the index of the last element in the array where predicate is true, and -1\r\n * otherwise.\r\n * @param array The source array to search in\r\n * @param predicate find calls predicate once for each element of the array, in descending\r\n * order, until it finds one where predicate returns true. If such an element is found,\r\n * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.\r\n */\r\nexport function findLastIndex<T>(array: T[], predicate: (value: T, index: number, obj: T[]) => boolean): number {\r\n  let l = array.length;\r\n\r\n  while (l--) {\r\n    if (predicate(array[l], l, array)) {\r\n      return l;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\nexport function chunkByNumber<T>(array: T[], size: number): T[][] {\r\n  const out = [];\r\n  const n = Math.ceil((array.length) / size);\r\n  let i = 0;\r\n\r\n  while (i < n) {\r\n    const chunk = array.splice(\r\n      0,\r\n      (i === n - 1) && size < array.length ? array.length : size\r\n    );\r\n\r\n    out.push(chunk);\r\n    i++;\r\n  }\r\n\r\n  return out;\r\n}\r\n","/***\r\n * pause (not yet supported) (?string='hover') - event group name which pauses\r\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\r\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\r\n * carousel will not react to keyboard events\r\n * note: swiping not yet supported\r\n */\r\n/****\r\n * Problems:\r\n * 1) if we set an active slide via model changes, .active class remains on a\r\n * current slide.\r\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\r\n * 3) if first or last slide is active and noWrap is true, there should be\r\n * \"disabled\" class on the nav buttons.\r\n * 4) default interval should be equal 5000\r\n */\r\n\r\nimport {\r\n  Component, EventEmitter, Input, NgZone, OnDestroy, Output, AfterViewInit\r\n} from '@angular/core';\r\n\r\nimport { isBs3, LinkedList } from 'ngx-bootstrap/utils';\r\nimport { SlideComponent } from './slide.component';\r\nimport { CarouselConfig } from './carousel.config';\r\nimport { findLastIndex, chunkByNumber } from './utils';\r\nimport { SlideWithIndex, IndexedSlideList } from './models';\r\n\r\nexport enum Direction {\r\n  UNKNOWN,\r\n  NEXT,\r\n  PREV\r\n}\r\n\r\n/**\r\n * Base element to create carousel\r\n */\r\n@Component({\r\n  selector: 'carousel',\r\n  templateUrl: './carousel.component.html'\r\n})\r\nexport class CarouselComponent implements AfterViewInit, OnDestroy {\r\n  /* If `true` — carousel will not cycle continuously and will have hard stops (prevent looping) */\r\n  @Input() noWrap: boolean;\r\n  /*  If `true` — will disable pausing on carousel mouse hover */\r\n  @Input() noPause: boolean;\r\n  /*  If `true` — carousel-indicators are visible  */\r\n  @Input() showIndicators: boolean;\r\n  /*  If `true` - autoplay will be stopped on focus */\r\n  @Input() pauseOnFocus: boolean;\r\n  /* If `true` - carousel indicators indicate slides chunks\r\n     works ONLY if singleSlideOffset = FALSE */\r\n  @Input() indicatorsByChunk = false;\r\n  /* If value more then 1 — carousel works in multilist mode */\r\n  @Input() itemsPerSlide = 1;\r\n  /* If `true` — carousel shifts by one element. By default carousel shifts by number\r\n     of visible elements (itemsPerSlide field) */\r\n  @Input() singleSlideOffset = false;\r\n  /** Turn on/off animation. Animation doesn't work for multilist carousel */\r\n  @Input() isAnimated = false;\r\n\r\n  /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\r\n  @Output()\r\n  activeSlideChange: EventEmitter<number> = new EventEmitter<number>(false);\r\n\r\n  /** Will be emitted when active slides has been changed in multilist mode */\r\n  @Output()\r\n  slideRangeChange: EventEmitter<number[]> = new EventEmitter<number[]>();\r\n\r\n  /** Index of currently displayed slide(started for 0) */\r\n  @Input()\r\n  set activeSlide(index: number) {\r\n    if (this.multilist) {\r\n      return;\r\n    }\r\n    if (this._slides.length && index !== this._currentActiveSlide) {\r\n      this._select(index);\r\n    }\r\n  }\r\n\r\n  get activeSlide(): number {\r\n    return this._currentActiveSlide;\r\n  }\r\n\r\n  /* Index to start display slides from it */\r\n  @Input()\r\n  startFromIndex = 0;\r\n\r\n  /**\r\n   * Delay of item cycling in milliseconds. If false, carousel won't cycle\r\n   * automatically.\r\n   */\r\n  @Input()\r\n  get interval(): number {\r\n    return this._interval;\r\n  }\r\n\r\n  set interval(value: number) {\r\n    this._interval = value;\r\n    this.restartTimer();\r\n  }\r\n\r\n  get slides(): SlideComponent[] {\r\n    return this._slides.toArray();\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  protected currentInterval: any;\r\n  protected _currentActiveSlide: number;\r\n  protected _interval: number;\r\n  protected _slides: LinkedList<SlideComponent> = new LinkedList<SlideComponent>();\r\n  protected _chunkedSlides: SlideWithIndex[][];\r\n  protected _slidesWithIndexes: SlideWithIndex[];\r\n  protected _currentVisibleSlidesIndex = 0;\r\n  protected isPlaying: boolean;\r\n  protected destroyed = false;\r\n\r\n  get isBs4(): boolean {\r\n    return !isBs3();\r\n  }\r\n\r\n  constructor(config: CarouselConfig, private ngZone: NgZone) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => {\r\n      if (this.singleSlideOffset) {\r\n        this.indicatorsByChunk = false;\r\n      }\r\n      if (this.multilist) {\r\n        this._chunkedSlides = chunkByNumber(\r\n          this.mapSlidesAndIndexes(),\r\n          this.itemsPerSlide\r\n        );\r\n        this.selectInitialSlides();\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed = true;\r\n  }\r\n\r\n  /**\r\n   * Adds new slide. If this slide is first in collection - set it as active\r\n   * and starts auto changing\r\n   * @param slide\r\n   */\r\n  addSlide(slide: SlideComponent): void {\r\n    this._slides.add(slide);\r\n\r\n    if (this.multilist && this._slides.length <= this.itemsPerSlide) {\r\n      slide.active = true;\r\n    }\r\n\r\n    if (!this.multilist && this.isAnimated) {\r\n      slide.isAnimated = true;\r\n    }\r\n\r\n    if (!this.multilist && this._slides.length === 1) {\r\n      this._currentActiveSlide = undefined;\r\n      this.activeSlide = 0;\r\n      this.play();\r\n    }\r\n\r\n    if (this.multilist && this._slides.length > this.itemsPerSlide) {\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes specified slide. If this slide is active - will roll to another\r\n   * slide\r\n   * @param slide\r\n   */\r\n  removeSlide(slide: SlideComponent): void {\r\n    const remIndex = this._slides.indexOf(slide);\r\n\r\n    if (this._currentActiveSlide === remIndex) {\r\n      // removing of active slide\r\n      let nextSlideIndex: number = void 0;\r\n      if (this._slides.length > 1) {\r\n        // if this slide last - will roll to first slide, if noWrap flag is\r\n        // FALSE or to previous, if noWrap is TRUE in case, if this slide in\r\n        // middle of collection, index of next slide is same to removed\r\n        nextSlideIndex = !this.isLast(remIndex)\r\n          ? remIndex\r\n          : this.noWrap ? remIndex - 1 : 0;\r\n      }\r\n      this._slides.remove(remIndex);\r\n\r\n      // prevents exception with changing some value after checking\r\n      setTimeout(() => {\r\n        this._select(nextSlideIndex);\r\n      }, 0);\r\n    } else {\r\n      this._slides.remove(remIndex);\r\n      const currentSlideIndex = this.getCurrentSlideIndex();\r\n      setTimeout(() => {\r\n        // after removing, need to actualize index of current active slide\r\n        this._currentActiveSlide = currentSlideIndex;\r\n        this.activeSlideChange.emit(this._currentActiveSlide);\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  nextSlideFromInterval(force = false): void {\r\n    this.move(Direction.NEXT, force);\r\n  }\r\n\r\n  /**\r\n   * Rolling to next slide\r\n   * @param force: {boolean} if true - will ignore noWrap flag\r\n   */\r\n  nextSlide(force = false): void {\r\n    if (this.isPlaying) {\r\n      this.restartTimer();\r\n    }\r\n    this.move(Direction.NEXT, force);\r\n  }\r\n\r\n  /**\r\n   * Rolling to previous slide\r\n   * @param force: {boolean} if true - will ignore noWrap flag\r\n   */\r\n  previousSlide(force = false): void {\r\n    if (this.isPlaying) {\r\n      this.restartTimer();\r\n    }\r\n    this.move(Direction.PREV, force);\r\n  }\r\n\r\n  getFirstVisibleIndex(): number {\r\n    return this.slides.findIndex(this.getActive);\r\n  }\r\n\r\n  getLastVisibleIndex(): number {\r\n    return findLastIndex(this.slides, this.getActive);\r\n  }\r\n\r\n  getActive = (slide: SlideComponent) => slide.active;\r\n\r\n  move(direction: Direction, force = false): void {\r\n    const firstVisibleIndex = this.getFirstVisibleIndex();\r\n    const lastVisibleIndex = this.getLastVisibleIndex();\r\n\r\n    if (this.noWrap) {\r\n      if (\r\n        direction === Direction.NEXT &&\r\n        this.isLast(lastVisibleIndex) ||\r\n        direction === Direction.PREV &&\r\n        firstVisibleIndex === 0\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (!this.multilist) {\r\n      this.activeSlide = this.findNextSlideIndex(direction, force);\r\n    } else {\r\n      this.moveMultilist(direction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Swith slides by enter, space and arrows keys\r\n   * @internal\r\n   */\r\n  keydownPress(event: KeyboardEvent) {\r\n    if (event.keyCode === 13 || event.key === 'Enter' || event.keyCode === 32 || event.key === 'Space') {\r\n      this.nextSlide();\r\n      event.preventDefault();\r\n\r\n      return;\r\n    }\r\n\r\n    if (event.keyCode === 37 || event.key === 'LeftArrow') {\r\n      this.previousSlide();\r\n\r\n      return;\r\n    }\r\n\r\n    if (event.keyCode === 39 || event.key === 'RightArrow') {\r\n      this.nextSlide();\r\n\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play on mouse leave\r\n   * @internal\r\n   */\r\n  onMouseLeave(): void {\r\n    if (!this.pauseOnFocus) {\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play on mouse up\r\n   * @internal\r\n   */\r\n  onMouseUp(): void {\r\n    if (!this.pauseOnFocus) {\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When slides on focus autoplay is stopped(optional)\r\n   * @internal\r\n   */\r\n  pauseFocusIn(): void {\r\n    if (this.pauseOnFocus) {\r\n      this.isPlaying = false;\r\n      this.resetTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When slides out of focus autoplay is started\r\n   * @internal\r\n   */\r\n  pauseFocusOut(): void {\r\n    this.play();\r\n  }\r\n\r\n  /**\r\n   * Rolling to specified slide\r\n   * @param index: {number} index of slide, which must be shown\r\n   */\r\n  selectSlide(index: number): void {\r\n    if (this.isPlaying) {\r\n      this.restartTimer();\r\n    }\r\n\r\n    if (!this.multilist) {\r\n      this.activeSlide = this.indicatorsByChunk ? index * this.itemsPerSlide : index;\r\n    } else {\r\n      this.selectSlideRange(this.indicatorsByChunk ? index * this.itemsPerSlide : index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts a auto changing of slides\r\n   */\r\n  play(): void {\r\n    if (!this.isPlaying) {\r\n      this.isPlaying = true;\r\n      this.restartTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops a auto changing of slides\r\n   */\r\n  pause(): void {\r\n    if (!this.noPause) {\r\n      this.isPlaying = false;\r\n      this.resetTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and returns index of currently displayed slide\r\n   */\r\n  getCurrentSlideIndex(): number {\r\n    return this._slides.findIndex(this.getActive);\r\n  }\r\n\r\n  /**\r\n   * Defines, whether the specified index is last in collection\r\n   * @param index\r\n   */\r\n  isLast(index: number): boolean {\r\n    return index + 1 >= this._slides.length;\r\n  }\r\n\r\n  /**\r\n   * Defines, whether the specified index is first in collection\r\n   * @param index\r\n   */\r\n  isFirst(index: number): boolean {\r\n    return index === 0;\r\n  }\r\n\r\n  indicatorsSlides(): SlideComponent[] {\r\n    return this.slides.filter(\r\n      (slide: SlideComponent, index: number) => !this.indicatorsByChunk || index % this.itemsPerSlide === 0\r\n    );\r\n  }\r\n\r\n  private selectInitialSlides(): void {\r\n    const startIndex = this.startFromIndex <= this._slides.length\r\n      ? this.startFromIndex\r\n      : 0;\r\n\r\n    this.hideSlides();\r\n\r\n    if (this.singleSlideOffset) {\r\n      this._slidesWithIndexes = this.mapSlidesAndIndexes();\r\n\r\n      if (this._slides.length - startIndex < this.itemsPerSlide) {\r\n        const slidesToAppend = this._slidesWithIndexes.slice(0, startIndex);\r\n\r\n        this._slidesWithIndexes  = [\r\n          ...this._slidesWithIndexes,\r\n          ...slidesToAppend\r\n        ]\r\n          .slice(slidesToAppend.length)\r\n          .slice(0, this.itemsPerSlide);\r\n      } else {\r\n        this._slidesWithIndexes = this._slidesWithIndexes.slice(\r\n          startIndex,\r\n          startIndex + this.itemsPerSlide\r\n        );\r\n      }\r\n\r\n      this._slidesWithIndexes.forEach((slide: SlideWithIndex) => slide.item.active = true);\r\n      this.makeSlidesConsistent(this._slidesWithIndexes);\r\n    } else {\r\n      this.selectRangeByNestedIndex(startIndex);\r\n    }\r\n\r\n    this.slideRangeChange.emit(this.getVisibleIndexes());\r\n  }\r\n\r\n  /**\r\n   * Defines next slide index, depending of direction\r\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\r\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\r\n   *   return undefined if next slide require wrapping\r\n   */\r\n  private findNextSlideIndex(direction: Direction, force: boolean): number {\r\n    let nextSlideIndex = 0;\r\n\r\n    if (\r\n      !force &&\r\n      (this.isLast(this.activeSlide) &&\r\n        direction !== Direction.PREV &&\r\n        this.noWrap)\r\n    ) {\r\n      return undefined;\r\n    }\r\n\r\n    switch (direction) {\r\n      case Direction.NEXT:\r\n        // if this is last slide, not force, looping is disabled\r\n        // and need to going forward - select current slide, as a next\r\n        nextSlideIndex = !this.isLast(this._currentActiveSlide)\r\n          ? this._currentActiveSlide + 1\r\n          : !force && this.noWrap ? this._currentActiveSlide : 0;\r\n        break;\r\n      case Direction.PREV:\r\n        // if this is first slide, not force, looping is disabled\r\n        // and need to going backward - select current slide, as a next\r\n        nextSlideIndex =\r\n          this._currentActiveSlide > 0\r\n            ? this._currentActiveSlide - 1\r\n            : !force && this.noWrap\r\n              ? this._currentActiveSlide\r\n              : this._slides.length - 1;\r\n        break;\r\n      default:\r\n        throw new Error('Unknown direction');\r\n    }\r\n\r\n    return nextSlideIndex;\r\n  }\r\n\r\n  private mapSlidesAndIndexes(): SlideWithIndex[] {\r\n    return this.slides\r\n      .slice()\r\n      .map((slide: SlideComponent, index: number) => {\r\n        return {\r\n          index,\r\n          item: slide\r\n        };\r\n      });\r\n  }\r\n\r\n\r\n  private selectSlideRange(index: number): void {\r\n    if (this.isIndexInRange(index)) {\r\n      return;\r\n    }\r\n\r\n    this.hideSlides();\r\n\r\n    if (!this.singleSlideOffset) {\r\n      this.selectRangeByNestedIndex(index);\r\n    } else {\r\n      const startIndex = this.isIndexOnTheEdges(index)\r\n        ? index\r\n        : index - this.itemsPerSlide + 1;\r\n\r\n      const endIndex = this.isIndexOnTheEdges(index)\r\n        ? index + this.itemsPerSlide\r\n        : index + 1;\r\n\r\n      this._slidesWithIndexes = this.mapSlidesAndIndexes().slice(startIndex, endIndex);\r\n      this.makeSlidesConsistent(this._slidesWithIndexes);\r\n\r\n      this._slidesWithIndexes.forEach((slide: SlideWithIndex) => slide.item.active = true);\r\n    }\r\n\r\n    this.slideRangeChange.emit(this.getVisibleIndexes());\r\n  }\r\n\r\n  private selectRangeByNestedIndex(index: number): void {\r\n    const selectedRange = this._chunkedSlides\r\n      .map((slidesList, i: number) => {\r\n        return {\r\n          index: i,\r\n          list: slidesList\r\n        };\r\n      })\r\n      .find(\r\n        (slidesList: IndexedSlideList) => {\r\n          return slidesList.list.find(slide => slide.index === index) !== undefined;\r\n        }\r\n      );\r\n\r\n    this._currentVisibleSlidesIndex = selectedRange.index;\r\n\r\n    this._chunkedSlides[selectedRange.index].forEach((slide: SlideWithIndex) => {\r\n      slide.item.active = true;\r\n    });\r\n  }\r\n\r\n  private isIndexOnTheEdges(index: number): boolean {\r\n    return (\r\n      index + 1 - this.itemsPerSlide <= 0 ||\r\n      index + this.itemsPerSlide <= this._slides.length\r\n    );\r\n  }\r\n\r\n  private isIndexInRange(index: number): boolean {\r\n    if (this.singleSlideOffset) {\r\n      const visibleIndexes = this._slidesWithIndexes.map((slide: SlideWithIndex) => slide.index);\r\n\r\n      return visibleIndexes.indexOf(index) >= 0;\r\n    }\r\n\r\n    return (\r\n      index <= this.getLastVisibleIndex() &&\r\n      index >= this.getFirstVisibleIndex()\r\n    );\r\n  }\r\n\r\n  private hideSlides(): void {\r\n    this.slides.forEach((slide: SlideComponent) => slide.active = false);\r\n  }\r\n\r\n  private isVisibleSlideListLast(): boolean {\r\n    return this._currentVisibleSlidesIndex === this._chunkedSlides.length - 1;\r\n  }\r\n\r\n  private isVisibleSlideListFirst(): boolean {\r\n    return this._currentVisibleSlidesIndex === 0;\r\n  }\r\n\r\n  private moveSliderByOneItem(direction: Direction): void {\r\n    let firstVisibleIndex: number;\r\n    let lastVisibleIndex: number;\r\n    let indexToHide: number;\r\n    let indexToShow: number;\r\n\r\n    if (this.noWrap) {\r\n      firstVisibleIndex = this.getFirstVisibleIndex();\r\n      lastVisibleIndex = this.getLastVisibleIndex();\r\n\r\n      indexToHide = direction === Direction.NEXT\r\n        ? firstVisibleIndex\r\n        : lastVisibleIndex;\r\n\r\n      indexToShow = direction !== Direction.NEXT\r\n        ? firstVisibleIndex - 1\r\n        : !this.isLast(lastVisibleIndex)\r\n          ? lastVisibleIndex + 1 : 0;\r\n\r\n      this._slides.get(indexToHide).active = false;\r\n      this._slides.get(indexToShow).active = true;\r\n\r\n      const slidesToReorder = this.mapSlidesAndIndexes().filter(\r\n        (slide: SlideWithIndex) => slide.item.active\r\n      );\r\n\r\n      this.makeSlidesConsistent(slidesToReorder);\r\n\r\n      this.slideRangeChange.emit(this.getVisibleIndexes());\r\n    } else {\r\n      let displayedIndex: number;\r\n\r\n      firstVisibleIndex = this._slidesWithIndexes[0].index;\r\n      lastVisibleIndex = this._slidesWithIndexes[this._slidesWithIndexes.length - 1].index;\r\n\r\n      if (direction === Direction.NEXT) {\r\n        this._slidesWithIndexes.shift();\r\n\r\n        displayedIndex = this.isLast(lastVisibleIndex)\r\n          ? 0\r\n          : lastVisibleIndex + 1;\r\n\r\n        this._slidesWithIndexes.push({\r\n          index: displayedIndex,\r\n          item: this._slides.get(displayedIndex)\r\n        });\r\n      } else {\r\n        this._slidesWithIndexes.pop();\r\n        displayedIndex = this.isFirst(firstVisibleIndex)\r\n          ? this._slides.length - 1\r\n          : firstVisibleIndex - 1;\r\n\r\n        this._slidesWithIndexes = [{\r\n          index: displayedIndex,\r\n          item: this._slides.get(displayedIndex)\r\n        }, ...this._slidesWithIndexes];\r\n      }\r\n\r\n      this.hideSlides();\r\n\r\n      this._slidesWithIndexes.forEach(slide => slide.item.active = true);\r\n\r\n      this.makeSlidesConsistent(this._slidesWithIndexes);\r\n\r\n      this.slideRangeChange.emit(\r\n        this._slidesWithIndexes.map((slide: SlideWithIndex) => slide.index)\r\n      );\r\n    }\r\n  }\r\n\r\n  private makeSlidesConsistent = (slides: SlideWithIndex[]): void => {\r\n    slides.forEach((slide: SlideWithIndex, index: number) => slide.item.order = index);\r\n  }\r\n\r\n  private moveMultilist(direction: Direction): void {\r\n    if (this.singleSlideOffset) {\r\n      this.moveSliderByOneItem(direction);\r\n    } else {\r\n      this.hideSlides();\r\n\r\n      if (this.noWrap) {\r\n        this._currentVisibleSlidesIndex = direction === Direction.NEXT\r\n          ? this._currentVisibleSlidesIndex + 1\r\n          : this._currentVisibleSlidesIndex - 1;\r\n      } else {\r\n        if (direction === Direction.NEXT) {\r\n          this._currentVisibleSlidesIndex = this.isVisibleSlideListLast()\r\n            ? 0\r\n            : this._currentVisibleSlidesIndex + 1;\r\n        } else {\r\n          this._currentVisibleSlidesIndex = this.isVisibleSlideListFirst()\r\n            ? this._chunkedSlides.length - 1\r\n            : this._currentVisibleSlidesIndex - 1;\r\n        }\r\n      }\r\n\r\n      this._chunkedSlides[this._currentVisibleSlidesIndex].forEach(\r\n        (slide: SlideWithIndex) => slide.item.active = true\r\n      );\r\n\r\n      this.slideRangeChange.emit(this.getVisibleIndexes());\r\n    }\r\n  }\r\n\r\n  private getVisibleIndexes(): number[] {\r\n    if (!this.singleSlideOffset) {\r\n      return this._chunkedSlides[this._currentVisibleSlidesIndex]\r\n        .map((slide: SlideWithIndex) => slide.index);\r\n    } else {\r\n      return this._slidesWithIndexes.map((slide: SlideWithIndex) => slide.index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a slide, which specified through index, as active\r\n   * @param index\r\n   */\r\n  private _select(index: number): void {\r\n    if (isNaN(index)) {\r\n      this.pause();\r\n\r\n      return;\r\n    }\r\n\r\n    if (!this.multilist) {\r\n      const currentSlide = this._slides.get(this._currentActiveSlide);\r\n      if (currentSlide) {\r\n        currentSlide.active = false;\r\n      }\r\n    }\r\n\r\n    const nextSlide = this._slides.get(index);\r\n    if (nextSlide) {\r\n      this._currentActiveSlide = index;\r\n      nextSlide.active = true;\r\n      this.activeSlide = index;\r\n      this.activeSlideChange.emit(index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loop of auto changing of slides\r\n   */\r\n  private restartTimer() {\r\n    this.resetTimer();\r\n    const interval = +this.interval;\r\n    if (!isNaN(interval) && interval > 0) {\r\n      this.currentInterval = this.ngZone.runOutsideAngular(() => {\r\n        return setInterval(() => {\r\n          const nInterval = +this.interval;\r\n          this.ngZone.run(() => {\r\n            if (\r\n              this.isPlaying &&\r\n              !isNaN(this.interval) &&\r\n              nInterval > 0 &&\r\n              this.slides.length\r\n            ) {\r\n              this.nextSlideFromInterval();\r\n            } else {\r\n              this.pause();\r\n            }\r\n          });\r\n        }, interval);\r\n      });\r\n    }\r\n  }\r\n\r\n  get multilist(): boolean {\r\n    return this.itemsPerSlide > 1;\r\n  }\r\n\r\n  /**\r\n   * Stops loop of auto changing of slides\r\n   */\r\n  private resetTimer(): void {\r\n    if (this.currentInterval) {\r\n      clearInterval(this.currentInterval);\r\n      this.currentInterval = void 0;\r\n    }\r\n  }\r\n}\r\n","<div (mouseenter)=\"pause()\"\r\n     (mouseleave)=\"onMouseLeave()\"\r\n     (mouseup)=\"onMouseUp()\"\r\n     (keydown)=\"keydownPress($event)\"\r\n     (focusin)=\"pauseFocusIn()\"\r\n     (focusout)=\"pauseFocusOut()\"\r\n     class=\"carousel slide\" tabindex=\"0\">\r\n  <ol class=\"carousel-indicators\" *ngIf=\"showIndicators && slides.length > 1\">\r\n    <li *ngFor=\"let slide of indicatorsSlides(); let i = index;\"\r\n        [class.active]=\"slide.active === true\"\r\n        (click)=\"selectSlide(i)\">\r\n    </li>\r\n  </ol>\r\n  <div class=\"carousel-inner\" [ngStyle]=\"{'display': multilist ? 'flex' : 'block'}\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n  <a class=\"left carousel-control carousel-control-prev\"\r\n     [class.disabled]=\"activeSlide === 0 && noWrap\"\r\n     (click)=\"previousSlide()\" *ngIf=\"slides.length > 1\"\r\n      tabindex=\"0\" role=\"button\">\r\n    <span class=\"icon-prev carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n    <span *ngIf=\"isBs4\" class=\"sr-only\">Previous</span>\r\n  </a>\r\n  <a class=\"right carousel-control carousel-control-next\"\r\n     [class.disabled]=\"isLast(activeSlide) && noWrap\"\r\n     (click)=\"nextSlide()\" *ngIf=\"slides.length > 1\"\r\n     tabindex=\"0\" role=\"button\">\r\n    <span class=\"icon-next carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n    <span class=\"sr-only\">Next</span>\r\n  </a>\r\n</div>\r\n","import {\r\n  Component,\r\n  HostBinding,\r\n  OnDestroy,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { CarouselComponent } from './carousel.component';\r\n\r\n@Component({\r\n  selector: 'slide',\r\n  template: `\r\n    <div [class.active]=\"active\" class=\"item\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n  host: {\r\n    '[attr.aria-hidden]': '!active'\r\n  },\r\n  styles: [`\r\n    :host.carousel-animation {\r\n       transition: opacity 0.6s ease, visibility 0.6s ease;\r\n       float: left;\r\n    }\r\n    :host.carousel-animation.active {\r\n      opacity: 1;\r\n      visibility: visible;\r\n    }\r\n    :host.carousel-animation:not(.active) {\r\n      display: block;\r\n      position: absolute;\r\n      opacity: 0;\r\n      visibility: hidden;\r\n    }\r\n  `]\r\n})\r\nexport class SlideComponent implements OnInit, OnDestroy {\r\n  /** Is current slide active */\r\n  @HostBinding('class.active')\r\n  @Input()\r\n  active: boolean;\r\n\r\n  @HostBinding('style.width') itemWidth = '100%';\r\n  @HostBinding('style.order') order = 0;\r\n  @HostBinding('class.carousel-animation') isAnimated: boolean;\r\n\r\n  /** Wraps element by appropriate CSS classes */\r\n  @HostBinding('class.item')\r\n  @HostBinding('class.carousel-item')\r\n  addClass = true;\r\n\r\n  /** Link to Parent(container-collection) component */\r\n  protected carousel: CarouselComponent;\r\n\r\n  constructor(carousel: CarouselComponent) {\r\n    this.carousel = carousel;\r\n  }\r\n\r\n  /** Fires changes in container collection after adding a new slide instance */\r\n  ngOnInit(): void {\r\n    this.carousel.addSlide(this);\r\n    this.itemWidth = `${100 / this.carousel.itemsPerSlide}%`;\r\n  }\r\n\r\n  /** Fires changes in container collection after removing of this slide instance */\r\n  ngOnDestroy(): void {\r\n    this.carousel.removeSlide(this);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CarouselComponent } from './carousel.component';\r\nimport { SlideComponent } from './slide.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [SlideComponent, CarouselComponent],\r\n  exports: [SlideComponent, CarouselComponent]\r\n})\r\nexport class CarouselModule {\r\n  static forRoot(): ModuleWithProviders<CarouselModule> {\r\n    return { ngModule: CarouselModule, providers: [] };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵelementEnd","i0.ɵɵclassProp","i0.ɵɵtemplate","i0.ɵɵadvance","i0.ɵɵproperty","i0.ɵɵtext","i0.ɵɵelement","i0.ɵɵprojection"],"mappings":"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"}