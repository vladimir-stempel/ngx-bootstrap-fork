{"version":3,"sources":["../../../../src/pagination/pagination.config.ts","../../../../src/pagination/pager.component.ts","../../../../src/pagination/pager.component.html","../../../../src/pagination/pagination.component.html","../../../../src/pagination/pagination.component.ts","../../../../src/pagination/pagination.module.ts"],"names":["this","main","maxSize","itemsPerPage","boundaryLinks","directionLinks","firstText","previousText","nextText","lastText","pageBtnClass","rotate","pager","align","PaginationConfig","factory","ɵfac","providedIn","Injectable","PAGER_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","PagerComponent","multi","elementRef","paginationConfig","changeDetection","numPages","EventEmitter","pageChanged","onChange","Function","prototype","onTouched","inited","_page","config","configureOptions","Object","assign","defineProperty","_itemsPerPage","v","totalPages","calculateTotalPages","_totalItems","_totalPages","emit","selectPage","page","value","_previous","markForCheck","ngOnInit","window","classMap","nativeElement","getAttribute","pages","getPages","writeValue","getText","key","noPrevious","noNext","registerOnChange","fn","registerOnTouched","event","preventDefault","disabled","target","blur","makePage","num","text","active","number","currentPage","startPage","endPage","isMaxSized","Math","max","floor","ceil","min","toString","push","previousPageSet","unshift","nextPageSet","totalItems","i0","ɵɵdirectiveInject","ElementRef","ChangeDetectorRef","selectors","inputs","outputs","features","ɵɵProvidersFeature","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵlistener","$event","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵclassMap","i0.ɵɵclassProp","i0.ɵɵproperty","i0.ɵɵtextInterpolate","Component","selector","templateUrl","providers","Input","Output","i0.ɵɵelementContainer","ɵɵpureFunction2","_c0$1","ctx_r0","ctx_r1","ctx_r2","pg_r19","ɵɵpureFunction3","_c1$1","ctx_r3","ctx_r4","PAGINATION_CONTROL_VALUE_ACCESSOR","PaginationComponent","customPageTemplate","customNextTemplate","customPreviousTemplate","customFirstTemplate","customLastTemplate","i0.ɵɵtemplate","PaginationModule","forRoot","ngModule","imports","CommonModule","declarations","exports","NgModule"],"mappings":"wfAMA,WAIEA,KAAAC,KAAoB,CAClBC,aAAS,EACTC,aAAc,GACdC,eAAe,EACfC,gBAAgB,EAChBC,UAAW,QACXC,aAAc,WACdC,SAAU,OACVC,SAAU,OACVC,aAAc,GACdC,QAAQ,GAEVX,KAAAY,MAAoB,CAClBT,aAAc,GACdI,aAAc,aACdC,SAAU,SACVE,aAAc,GACdG,OAAO,qCAlBEC,wCAAAA,EAAgBC,QAAhBD,EAAgBE,KAAAC,WAFf,yEAEDH,EAAgB,CAAA,MAH5BI,EAAAA,iBAAW,CACVD,WAAY,wICWDE,EAAyC,CACpDC,QAASC,EAAAA,kBACPC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAChCC,OAAO,gBA6GP,SAAAD,EAAoBE,EACRC,EACQC,GAFA5B,KAAA0B,WAAAA,EAEA1B,KAAA4B,gBAAAA,EA1EV5B,KAAA6B,SAAiC,IAAIC,EAAAA,aAK/C9B,KAAA+B,YAA8C,IAAID,EAAAA,aAuDlD9B,KAAAgC,SAAWC,SAASC,UACpBlC,KAAAmC,UAAYF,SAASC,UAQXlC,KAAAoC,QAAS,EACTpC,KAAAqC,MAAQ,EAKhBrC,KAAK0B,WAAaA,EACb1B,KAAKsC,QACRtC,KAAKuC,iBACHC,OAAOC,OAAO,GAAId,EAAiB1B,KAAM0B,EAAiBf,eAtEhE4B,OAAAE,eACIlB,EAAAU,UAAA,eAAY,KADhB,WAEE,OAAOlC,KAAK2C,mBAGd,SAAiBC,GACf5C,KAAK2C,cAAgBC,EACrB5C,KAAK6C,WAAa7C,KAAK8C,uDAIzBN,OAAAE,eACIlB,EAAAU,UAAA,aAAU,KADd,WAEE,OAAOlC,KAAK+C,iBAGd,SAAeH,GACb5C,KAAK+C,YAAcH,EACnB5C,KAAK6C,WAAa7C,KAAK8C,uDAGzBN,OAAAE,eAAIlB,EAAAU,UAAA,aAAU,KAAd,WACE,OAAOlC,KAAKgD,iBAGd,SAAeJ,GACb5C,KAAKgD,YAAcJ,EACnB5C,KAAK6B,SAASoB,KAAKL,GACf5C,KAAKoC,QACPpC,KAAKkD,WAAWlD,KAAKmD,uCAIzBX,OAAAE,eAAIlB,EAAAU,UAAA,OAAI,KAeR,WACE,OAAOlC,KAAKqC,WAhBd,SAASe,GACP,IAAMC,EAAYrD,KAAKqC,MACvBrC,KAAKqC,MAAQe,EAAQpD,KAAK6C,WAAa7C,KAAK6C,WAAaO,GAAS,EAClEpD,KAAK4B,gBAAgB0B,eAEjBD,IAAcrD,KAAKqC,YAA8B,IAAdgB,GAIvCrD,KAAK+B,YAAYkB,KAAK,CACpBE,KAAMnD,KAAKqC,MACXlC,aAAcH,KAAKG,gDA+BvBqB,EAAAU,UAAAK,iBAAA,SAAiBD,GACftC,KAAKsC,OAASE,OAAOC,OAAO,GAAIH,IAGlCd,EAAAU,UAAAqB,SAAA,WACwB,oBAAXC,SACTxD,KAAKyD,SAAWzD,KAAK0B,WAAWgC,cAAcC,aAAa,UAAY,IAGzE3D,KAAKE,aACqB,IAAjBF,KAAKE,QAA0BF,KAAKE,QAAUF,KAAKsC,OAAOpC,QACnEF,KAAKW,YACoB,IAAhBX,KAAKW,OAAyBX,KAAKW,OAASX,KAAKsC,OAAO3B,OACjEX,KAAKI,mBAC2B,IAAvBJ,KAAKI,cACRJ,KAAKI,cACLJ,KAAKsC,OAAOlC,cAClBJ,KAAKK,oBAC4B,IAAxBL,KAAKK,eACRL,KAAKK,eACLL,KAAKsC,OAAOjC,eAClBL,KAAKU,kBAC0B,IAAtBV,KAAKU,aACRV,KAAKU,aACLV,KAAKsC,OAAO5B,aAGlBV,KAAKG,kBAC0B,IAAtBH,KAAKG,aACRH,KAAKG,aACLH,KAAKsC,OAAOnC,aAClBH,KAAK6C,WAAa7C,KAAK8C,sBAEvB9C,KAAK4D,MAAQ5D,KAAK6D,SAAS7D,KAAKmD,KAAMnD,KAAK6C,YAC3C7C,KAAKoC,QAAS,GAGhBZ,EAAAU,UAAA4B,WAAA,SAAWV,GACTpD,KAAKmD,KAAOC,EACZpD,KAAK4D,MAAQ5D,KAAK6D,SAAS7D,KAAKmD,KAAMnD,KAAK6C,aAG7CrB,EAAAU,UAAA6B,QAAA,SAAQC,GAEN,OAAQhE,KAAgBgE,EAAG,SAAYhE,KAAasC,OAAU0B,EAAG,SAGnExC,EAAAU,UAAA+B,WAAA,WACE,OAAqB,IAAdjE,KAAKmD,MAGd3B,EAAAU,UAAAgC,OAAA,WACE,OAAOlE,KAAKmD,OAASnD,KAAK6C,YAG5BrB,EAAAU,UAAAiC,iBAAA,SAAiBC,GACfpE,KAAKgC,SAAWoC,GAGlB5C,EAAAU,UAAAmC,kBAAA,SAAkBD,GAChBpE,KAAKmC,UAAYiC,GAGnB5C,EAAAU,UAAAgB,WAAA,SAAWC,EAAcmB,GAKvB,GAJIA,GACFA,EAAMC,kBAGHvE,KAAKwE,SAAU,CAClB,GAAIF,GAASA,EAAMG,OAEGH,EAAMG,OACnBC,OAET1E,KAAK8D,WAAWX,GAChBnD,KAAKgC,SAAShC,KAAKmD,QAKb3B,EAAAU,UAAAyC,SAAA,SAASC,EACAC,EACAC,GACjB,MAAO,CAACD,KAAIA,EAAEE,OAAQH,EAAKE,OAAMA,IAGzBtD,EAAAU,UAAA2B,SAAA,SAASmB,EAAqBnC,GACtC,IAAMe,EAAsB,GAGxBqB,EAAY,EACZC,EAAUrC,EACRsC,OACoB,IAAjBnF,KAAKE,SAA2BF,KAAKE,QAAU2C,EAGpDsC,IACEnF,KAAKW,QAGPuE,GADAD,EAAYG,KAAKC,IAAIL,EAAcI,KAAKE,MAAMtF,KAAKE,QAAU,GAAI,IAC3CF,KAAKE,QAAU,GAGvB2C,IAEZoC,GADAC,EAAUrC,GACY7C,KAAKE,QAAU,IAIvC+E,GACGG,KAAKG,KAAKP,EAAchF,KAAKE,SAAW,GAAKF,KAAKE,QAAU,EAG/DgF,EAAUE,KAAKI,IAAIP,EAAYjF,KAAKE,QAAU,EAAG2C,KAKrD,IAAK,IAAI+B,EAAMK,EAAWL,GAAOM,EAASN,IAAO,CAC/C,IAAMzB,EAAOnD,KAAK2E,SAASC,EAAKA,EAAIa,WAAYb,IAAQI,GACxDpB,EAAM8B,KAAKvC,GAIb,GAAIgC,IAAenF,KAAKW,OAAQ,CAC9B,GAAIsE,EAAY,EAAG,CACjB,IAAMU,EAAkB3F,KAAK2E,SAASM,EAAY,EAAG,OAAO,GAC5DrB,EAAMgC,QAAQD,GAGhB,GAAIT,EAAUrC,EAAY,CACxB,IAAMgD,EAAc7F,KAAK2E,SAASO,EAAU,EAAG,OAAO,GACtDtB,EAAM8B,KAAKG,IAIf,OAAOjC,GAICpC,EAAAU,UAAAY,oBAAA,WACR,IAAMD,EACJ7C,KAAKG,aAAe,EAChB,EACAiF,KAAKG,KAAKvF,KAAK8F,WAAa9F,KAAKG,cAEvC,OAAOiF,KAAKC,IAAIxC,GAAc,EAAG,0CAlQxBrB,GAAcuE,EAAAC,kBAAAD,EAAAE,YAAAF,EAAAC,kBAAAlF,GAAAiF,EAAAC,kBAAAD,EAAAG,sDAAd1E,EAAc2E,UAAA,CAAA,CAAA,UAAAC,OAAA,CAAAvF,MAAA,QAAAX,QAAA,UAAAE,cAAA,gBAAAC,eAAA,iBAAAC,UAAA,YAAAC,aAAA,eAAAC,SAAA,WAAAC,SAAA,WAAAE,OAAA,SAAAD,aAAA,eAAA8D,SAAA,WAAArE,aAAA,eAAA2F,WAAA,cAAAO,QAAA,CAAAxE,SAAA,WAAAE,YAAA,eAAAuE,SAAA,CAAAP,EAAAQ,mBAFd,CAACpF,KAA6BqF,MAAA,EAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,SAAA,CAAA,EAAA,WAAA,CAAA,OAAA,GAAA,EAAA,UAAAC,SAAA,SAAAC,EAAAC,SC3B3CC,EAAAA,eAAAA,EAAAA,KAAAA,GACEA,EAAAA,eAAAA,EAAAA,KAAAA,GAGEA,EAAAA,eAAAA,EAAAA,IAAAA,GAAQC,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,OAASF,EAAA3D,WAAA2D,EAAA1D,KAAkB,EAAC6D,MAAWC,EAAAA,OAAAA,GAAyBC,EAAAA,eAC1EA,EAAAA,eACAJ,EAAAA,eAAAA,EAAAA,KAAAA,GAGEA,EAAAA,eAAAA,EAAAA,IAAAA,GAAQC,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,OAASF,EAAA3D,WAAA2D,EAAA1D,KAAkB,EAAC6D,MAAWC,EAAAA,OAAAA,GAAqBC,EAAAA,eACtEA,EAAAA,eACFA,EAAAA,sBARMC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,EAAAA,cAFAC,EAAAA,YAAAA,WAAAA,EAAAA,aAAAA,CAA+B,WAAAR,EAAAhG,OAC/ByG,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,QAE6CH,EAAAA,UAAAA,GAAAI,EAAAA,kBAAAA,EAAAA,QAAAA,aAI7CJ,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,EAAAA,cAFAC,EAAAA,YAAAA,WAAAA,EAAAA,SAAAA,CAA2B,OAAAR,EAAAhG,OAC3ByG,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,QAE6CH,EAAAA,UAAAA,GAAAI,EAAAA,kBAAAA,EAAAA,QAAAA,oHDoBtC/F,EAAc,CAAA,MAL1BgG,EAAAA,gBAAU,CACTC,SAAU,QACVC,YAAa,yBACbC,UAAW,CAACxG,sFAKHN,MAAK,CAAA,MAAb+G,EAAAA,QAEQ1H,QAAO,CAAA,MAAf0H,EAAAA,QAEQxH,cAAa,CAAA,MAArBwH,EAAAA,QAEQvH,eAAc,CAAA,MAAtBuH,EAAAA,QAGQtH,UAAS,CAAA,MAAjBsH,EAAAA,QAEQrH,aAAY,CAAA,MAApBqH,EAAAA,QAEQpH,SAAQ,CAAA,MAAhBoH,EAAAA,QAEQnH,SAAQ,CAAA,MAAhBmH,EAAAA,QAEQjH,OAAM,CAAA,MAAdiH,EAAAA,QAGQlH,aAAY,CAAA,MAApBkH,EAAAA,QAGQpD,SAAQ,CAAA,MAAhBoD,EAAAA,QAGS/F,SAAQ,CAAA,MAAjBgG,EAAAA,SAKD9F,YAAW,CAAA,MADV8F,EAAAA,SAKG1H,aAAY,CAAA,MADfyH,EAAAA,QAYG9B,WAAU,CAAA,MADb8B,EAAAA,mHE5EDd,EAAAA,eAAAA,EAAAA,KAAAA,IAGEA,EAAAA,eAAAA,EAAAA,IAAAA,IAA0BC,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,WAAoB,EAACC,MAC7Cc,EAAAA,mBAAAA,EAAAA,IAGFZ,EAAAA,eACFA,EAAAA,mEANIG,EAAAA,YAAAA,WAAAA,EAAAA,cAAAA,EAAAA,UAEcF,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,mBAAAA,EAAAA,qBAAAA,EAAAA,CAAgE,0BAAAvB,EAAAgC,gBAAA,EAAAC,EAAAC,EAAAhE,cAAAgE,EAAAzD,SAAAyD,EAAA9E,2DAMlF2D,EAAAA,eAAAA,EAAAA,KAAAA,IAGEA,EAAAA,eAAAA,EAAAA,IAAAA,IAA0BC,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,gBAAAA,OAAAA,EAAAA,WAAAA,EAAAA,KAA2B,EAACC,MACpDc,EAAAA,mBAAAA,EAAAA,IAGFZ,EAAAA,eACFA,EAAAA,mEANIG,EAAAA,YAAAA,WAAAA,EAAAA,cAAAA,EAAAA,UAEcF,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,mBAAAA,EAAAA,wBAAAA,EAAAA,CAAsE,0BAAAvB,EAAAgC,gBAAA,EAAAC,EAAAE,EAAAjE,cAAAiE,EAAA1D,SAAA0D,EAAA/E,+HAMxF2D,EAAAA,eAAAA,EAAAA,KAAAA,IAIEA,EAAAA,eAAAA,EAAAA,IAAAA,IAA0BC,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAAAA,OAAAA,EAAAA,gBAAAA,WAAAA,EAAAA,OAAAA,MACxBe,EAAAA,mBAAAA,EAAAA,IAGFZ,EAAAA,eACFA,EAAAA,gFARIG,EAAAA,YAAAA,SAAAA,EAAAA,OAAAA,CAA0B,WAAAc,EAAA3D,WAAA4D,EAAAtD,QAIZqC,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,mBAAAA,EAAAA,oBAAAA,EAAAA,CAA8D,0BAAAvB,EAAAsC,gBAAA,EAAAC,EAAAH,EAAA3D,SAAA4D,EAAAD,EAAAhF,2DAMhF2D,EAAAA,eAAAA,EAAAA,KAAAA,IAGEA,EAAAA,eAAAA,EAAAA,IAAAA,IAA0BC,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,gBAAAA,OAAAA,EAAAA,WAAAA,EAAAA,KAA2B,EAACC,MACpDc,EAAAA,mBAAAA,EAAAA,IAGFZ,EAAAA,eACFA,EAAAA,kEANIG,EAAAA,YAAAA,WAAAA,EAAAA,UAAAA,EAAAA,UAEcF,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,mBAAAA,EAAAA,oBAAAA,EAAAA,CAA8D,0BAAAvB,EAAAgC,gBAAA,EAAAC,EAAAO,EAAArE,UAAAqE,EAAA/D,SAAA+D,EAAApF,2DAMhF2D,EAAAA,eAAAA,EAAAA,KAAAA,IAGEA,EAAAA,eAAAA,EAAAA,IAAAA,IAA0BC,EAAAA,WAAAA,SAAAA,SAAAA,GAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,gBAAAA,OAAAA,EAAAA,WAAAA,EAAAA,WAAAA,MACxBe,EAAAA,mBAAAA,EAAAA,IAGFZ,EAAAA,eACFA,EAAAA,mEANIG,EAAAA,YAAAA,WAAAA,EAAAA,UAAAA,EAAAA,UAEcF,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,mBAAAA,EAAAA,oBAAAA,EAAAA,CAA8D,0BAAAvB,EAAAgC,gBAAA,EAAAC,EAAAQ,EAAAtE,UAAAsE,EAAAhE,SAAAgE,EAAArF,gCAOvC8D,EAAAA,OAAAA,0BAAAM,EAAAA,kBAAAA,EAAAA,+BAETN,EAAAA,OAAAA,gCAAAM,EAAAA,kBAAAA,EAAAA,QAAAA,kCAEIN,EAAAA,OAAAA,gCAAAM,EAAAA,kBAAAA,EAAAA,QAAAA,sCAEHN,EAAAA,OAAAA,gCAAAM,EAAAA,kBAAAA,EAAAA,QAAAA,mCAEDN,EAAAA,OAAAA,gCAAAM,EAAAA,kBAAAA,EAAAA,QAAAA,UCxC3B,IAAMkB,EAA8C,CACzDrH,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAmH,KAC9BjH,OAAO,gBAsHP,SAAAiH,EACUhH,EACRC,EACQC,GAFA5B,KAAA0B,WAAAA,EAEA1B,KAAA4B,gBAAAA,EA3EA5B,KAAA6B,SAAiC,IAAIC,EAAAA,aAK/C9B,KAAA+B,YAAc,IAAID,EAAAA,aAuDlB9B,KAAAgC,SAAWC,SAASC,UACpBlC,KAAAmC,UAAYF,SAASC,UAQXlC,KAAAoC,QAAS,EACTpC,KAAAqC,MAAQ,EAOhBrC,KAAK0B,WAAaA,EACb1B,KAAKsC,QACRtC,KAAKuC,iBAAiBZ,EAAiB1B,aAvE3CuC,OAAAE,eACIgG,EAAAxG,UAAA,eAAY,KADhB,WAEE,OAAOlC,KAAK2C,mBAGd,SAAiBC,GACf5C,KAAK2C,cAAgBC,EACrB5C,KAAK6C,WAAa7C,KAAK8C,uDAIzBN,OAAAE,eACIgG,EAAAxG,UAAA,aAAU,KADd,WAEE,OAAOlC,KAAK+C,iBAGd,SAAeH,GACb5C,KAAK+C,YAAcH,EACnB5C,KAAK6C,WAAa7C,KAAK8C,uDAGzBN,OAAAE,eAAIgG,EAAAxG,UAAA,aAAU,KAAd,WACE,OAAOlC,KAAKgD,iBAGd,SAAeJ,GACb5C,KAAKgD,YAAcJ,EACnB5C,KAAK6B,SAASoB,KAAKL,GACf5C,KAAKoC,QACPpC,KAAKkD,WAAWlD,KAAKmD,uCAIzBX,OAAAE,eAAIgG,EAAAxG,UAAA,OAAI,KAeR,WACE,OAAOlC,KAAKqC,WAhBd,SAASe,GACP,IAAMC,EAAYrD,KAAKqC,MACvBrC,KAAKqC,MAAQe,EAAQpD,KAAK6C,WAAa7C,KAAK6C,WAAaO,GAAS,EAClEpD,KAAK4B,gBAAgB0B,eAEjBD,IAAcrD,KAAKqC,YAA8B,IAAdgB,GAIvCrD,KAAK+B,YAAYkB,KAAK,CACpBE,KAAMnD,KAAKqC,MACXlC,aAAcH,KAAKG,gDA+BvBuI,EAAAxG,UAAAK,iBAAA,SAAiBD,GACftC,KAAKsC,OAASE,OAAOC,OAAO,GAAIH,IAGlCoG,EAAAxG,UAAAqB,SAAA,WACwB,oBAAXC,SACTxD,KAAKyD,SAAWzD,KAAK0B,WAAWgC,cAAcC,aAAa,UAAY,IAGzE3D,KAAKE,aACqB,IAAjBF,KAAKE,QAA0BF,KAAKE,QAAUF,KAAKsC,OAAOpC,QACnEF,KAAKW,YACoB,IAAhBX,KAAKW,OAAyBX,KAAKW,OAASX,KAAKsC,OAAO3B,OACjEX,KAAKI,mBAC2B,IAAvBJ,KAAKI,cACRJ,KAAKI,cACLJ,KAAKsC,OAAOlC,cAClBJ,KAAKK,oBAC4B,IAAxBL,KAAKK,eACRL,KAAKK,eACLL,KAAKsC,OAAOjC,eAClBL,KAAKU,kBAC0B,IAAtBV,KAAKU,aACRV,KAAKU,aACLV,KAAKsC,OAAO5B,aAGlBV,KAAKG,kBAC0B,IAAtBH,KAAKG,aACRH,KAAKG,aACLH,KAAKsC,OAAOnC,aAClBH,KAAK6C,WAAa7C,KAAK8C,sBAEvB9C,KAAK4D,MAAQ5D,KAAK6D,SAAS7D,KAAKmD,KAAMnD,KAAK6C,YAC3C7C,KAAKoC,QAAS,GAGhBsG,EAAAxG,UAAA4B,WAAA,SAAWV,GACTpD,KAAKmD,KAAOC,EACZpD,KAAK4D,MAAQ5D,KAAK6D,SAAS7D,KAAKmD,KAAMnD,KAAK6C,aAG7C6F,EAAAxG,UAAA6B,QAAA,SAAQC,GAEN,OAAQhE,KAAgBgE,EAAG,SAAYhE,KAAasC,OAAU0B,EAAG,SAGnE0E,EAAAxG,UAAA+B,WAAA,WACE,OAAqB,IAAdjE,KAAKmD,MAGduF,EAAAxG,UAAAgC,OAAA,WACE,OAAOlE,KAAKmD,OAASnD,KAAK6C,YAG5B6F,EAAAxG,UAAAiC,iBAAA,SAAiBC,GACfpE,KAAKgC,SAAWoC,GAGlBsE,EAAAxG,UAAAmC,kBAAA,SAAkBD,GAChBpE,KAAKmC,UAAYiC,GAGnBsE,EAAAxG,UAAAgB,WAAA,SAAWC,EAAcmB,GAKvB,GAJIA,GACFA,EAAMC,kBAGHvE,KAAKwE,SAAU,CAClB,GAAIF,GAASA,EAAMG,OAEGH,EAAMG,OACnBC,OAET1E,KAAK8D,WAAWX,GAChBnD,KAAKgC,SAAShC,KAAKmD,QAKbuF,EAAAxG,UAAAyC,SAAA,SACRC,EACAC,EACAC,GAEA,MAAO,CAAED,KAAIA,EAAEE,OAAQH,EAAKE,OAAMA,IAG1B4D,EAAAxG,UAAA2B,SAAA,SAASmB,EAAqBnC,GACtC,IAAMe,EAAsB,GAGxBqB,EAAY,EACZC,EAAUrC,EACRsC,OACoB,IAAjBnF,KAAKE,SAA2BF,KAAKE,QAAU2C,EAGpDsC,IACEnF,KAAKW,QAGPuE,GADAD,EAAYG,KAAKC,IAAIL,EAAcI,KAAKE,MAAMtF,KAAKE,QAAU,GAAI,IAC3CF,KAAKE,QAAU,GAGvB2C,IAEZoC,GADAC,EAAUrC,GACY7C,KAAKE,QAAU,IAIvC+E,GACGG,KAAKG,KAAKP,EAAchF,KAAKE,SAAW,GAAKF,KAAKE,QAAU,EAG/DgF,EAAUE,KAAKI,IAAIP,EAAYjF,KAAKE,QAAU,EAAG2C,KAKrD,IAAK,IAAI+B,EAAMK,EAAWL,GAAOM,EAASN,IAAO,CAC/C,IAAMzB,EAAOnD,KAAK2E,SAASC,EAAKA,EAAIa,WAAYb,IAAQI,GACxDpB,EAAM8B,KAAKvC,GAIb,GAAIgC,IAAenF,KAAKW,OAAQ,CAC9B,GAAIsE,EAAY,EAAG,CACjB,IAAMU,EAAkB3F,KAAK2E,SAASM,EAAY,EAAG,OAAO,GAC5DrB,EAAMgC,QAAQD,GAGhB,GAAIT,EAAUrC,EAAY,CACxB,IAAMgD,EAAc7F,KAAK2E,SAASO,EAAU,EAAG,OAAO,GACtDtB,EAAM8B,KAAKG,IAIf,OAAOjC,GAIC8E,EAAAxG,UAAAY,oBAAA,WACR,IAAMD,EACJ7C,KAAKG,aAAe,EAChB,EACAiF,KAAKG,KAAKvF,KAAK8F,WAAa9F,KAAKG,cAEvC,OAAOiF,KAAKC,IAAIxC,GAAc,EAAG,0CA7QxB6F,GAAmB3C,EAAAC,kBAAAD,EAAAE,YAAAF,EAAAC,kBAAAlF,GAAAiF,EAAAC,kBAAAD,EAAAG,sDAAnBwC,EAAmBvC,UAAA,CAAA,CAAA,eAAAC,OAAA,CAAAvF,MAAA,QAAAX,QAAA,UAAAE,cAAA,gBAAAC,eAAA,iBAAAC,UAAA,YAAAC,aAAA,eAAAC,SAAA,WAAAC,SAAA,WAAAE,OAAA,SAAAD,aAAA,eAAA8D,SAAA,WAAAmE,mBAAA,qBAAAC,mBAAA,qBAAAC,uBAAA,yBAAAC,oBAAA,sBAAAC,mBAAA,qBAAA5I,aAAA,eAAA2F,WAAA,cAAAO,QAAA,CAAAxE,SAAA,WAAAE,YAAA,eAAAuE,SAAA,CAAAP,EAAAQ,mBAFnB,CAACkC,KAAkCjC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,aAAA,EAAA,WAAA,CAAA,QAAA,6BAAA,EAAA,WAAA,EAAA,QAAA,CAAA,QAAA,4BAAA,EAAA,WAAA,EAAA,QAAA,CAAA,QAAA,4BAAA,EAAA,SAAA,WAAA,EAAA,QAAA,WAAA,CAAA,QAAA,4BAAA,EAAA,WAAA,EAAA,QAAA,CAAA,QAAA,4BAAA,EAAA,WAAA,EAAA,QAAA,CAAA,sBAAA,IAAA,CAAA,sBAAA,IAAA,CAAA,0BAAA,IAAA,CAAA,uBAAA,IAAA,CAAA,sBAAA,IAAA,CAAA,EAAA,mBAAA,aAAA,CAAA,OAAA,GAAA,EAAA,YAAA,EAAA,SAAA,CAAA,EAAA,mBAAA,2BAAA,CAAA,EAAA,kBAAA,aAAA,CAAA,EAAA,kBAAA,aAAA,CAAA,EAAA,kBAAA,aAAA,CAAA,EAAA,kBAAA,cAAAC,SAAA,SAAAC,EAAAC,SD9BhDC,EAAAA,eAAAA,EAAAA,KAAAA,GACEkC,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAUAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAUAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAWAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAUAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GASF9B,EAAAA,eAEA8B,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,wBAEAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,wBAEAA,EAAAA,WAAAA,GAAAA,EAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,wBAEAA,EAAAA,WAAAA,GAAAA,EAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,wBAEAA,EAAAA,WAAAA,GAAAA,EAAAA,EAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,+BA7DuB1B,EAAAA,WAAAA,UAAAA,EAAAA,UAEhBH,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,OAAAA,EAAAA,eAUAH,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,OAAAA,EAAAA,gBAScH,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,UAAAA,EAAAA,OAYdH,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,OAAAA,EAAAA,gBAUAH,EAAAA,UAAAA,GAAAG,EAAAA,WAAAA,OAAAA,EAAAA,8JCXMoB,EAAmB,CAAA,MAL/BlB,EAAAA,gBAAU,CACTC,SAAU,aACVC,YAAa,8BACbC,UAAW,CAACc,sFAKH5H,MAAK,CAAA,MAAb+G,EAAAA,QAEQ1H,QAAO,CAAA,MAAf0H,EAAAA,QAEQxH,cAAa,CAAA,MAArBwH,EAAAA,QAEQvH,eAAc,CAAA,MAAtBuH,EAAAA,QAGQtH,UAAS,CAAA,MAAjBsH,EAAAA,QAEQrH,aAAY,CAAA,MAApBqH,EAAAA,QAEQpH,SAAQ,CAAA,MAAhBoH,EAAAA,QAEQnH,SAAQ,CAAA,MAAhBmH,EAAAA,QAEQjH,OAAM,CAAA,MAAdiH,EAAAA,QAGQlH,aAAY,CAAA,MAApBkH,EAAAA,QAEQpD,SAAQ,CAAA,MAAhBoD,EAAAA,QAEQe,mBAAkB,CAAA,MAA1Bf,EAAAA,QAEQgB,mBAAkB,CAAA,MAA1BhB,EAAAA,QAEQiB,uBAAsB,CAAA,MAA9BjB,EAAAA,QAEQkB,oBAAmB,CAAA,MAA3BlB,EAAAA,QAEQmB,mBAAkB,CAAA,MAA1BnB,EAAAA,QAGS/F,SAAQ,CAAA,MAAjBgG,EAAAA,SAKD9F,YAAW,CAAA,MADV8F,EAAAA,SAKG1H,aAAY,CAAA,MADfyH,EAAAA,QAYG9B,WAAU,CAAA,MADb8B,EAAAA,2BC9EH,SAAAqB,YACSA,EAAAC,QAAP,WACE,MAAO,CAAEC,SAAUF,EAAkBtB,UAAW,0CAFvCsB,iEAAAA,IAAgBG,QAAA,CAJlB,CAACC,EAAAA,kFAICJ,EAAgB,CAAAK,aAAA,CAHZ9H,EAAgBkH,GAAmBU,QAAA,CADxCC,EAAAA,cAAYE,QAAA,CAEZ/H,EAAgBkH,qEAEfO,EAAgB,CAAA,MAL5BO,EAAAA,eAAS,CACRJ,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC9H,EAAgBkH,GAC/Ba,QAAS,CAAC/H,EAAgBkH","sourcesContent":["// todo: split\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { ConfigModel, PagerModel } from './models';\r\n\r\n/** Provides default values for Pagination and pager components */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PaginationConfig {\r\n  main: ConfigModel = {\r\n    maxSize: void 0,\r\n    itemsPerPage: 10,\r\n    boundaryLinks: false,\r\n    directionLinks: true,\r\n    firstText: 'First',\r\n    previousText: 'Previous',\r\n    nextText: 'Next',\r\n    lastText: 'Last',\r\n    pageBtnClass: '',\r\n    rotate: true\r\n  };\r\n  pager: PagerModel = {\r\n    itemsPerPage: 15,\r\n    previousText: '« Previous',\r\n    nextText: 'Next »',\r\n    pageBtnClass: '',\r\n    align: true\r\n  };\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Provider\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { PageChangedEvent } from './pagination.component';\r\nimport { PaginationConfig } from './pagination.config';\r\n\r\nimport { ConfigModel, PagesModel } from './models';\r\n\r\nexport const PAGER_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => PagerComponent),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n  selector: 'pager',\r\n  templateUrl: './pager.component.html',\r\n  providers: [PAGER_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class PagerComponent implements ControlValueAccessor, OnInit {\r\n  config: ConfigModel;\r\n  /** if `true` aligns each link to the sides of pager */\r\n  @Input() align: boolean;\r\n  /** limit number for page links in pager */\r\n  @Input() maxSize: number;\r\n  /** if false first and last buttons will be hidden */\r\n  @Input() boundaryLinks: boolean;\r\n  /** if false previous and next buttons will be hidden */\r\n  @Input() directionLinks: boolean;\r\n  // labels\r\n  /** first button text */\r\n  @Input() firstText: string;\r\n  /** previous button text */\r\n  @Input() previousText: string;\r\n  /** next button text */\r\n  @Input() nextText: string;\r\n  /** last button text */\r\n  @Input() lastText: string;\r\n  /** if true current page will in the middle of pages list */\r\n  @Input() rotate: boolean;\r\n  // css\r\n  /** add class to <code><li\\></code> */\r\n  @Input() pageBtnClass: string;\r\n\r\n  /** if true pagination component will be disabled */\r\n  @Input() disabled: boolean;\r\n\r\n  /** fired when total pages count changes, $event:number equals to total pages count */\r\n  @Output() numPages: EventEmitter<number> = new EventEmitter<number>();\r\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to\r\n   * object with current page index and number of items per page\r\n   */\r\n  @Output()\r\n  pageChanged: EventEmitter<PageChangedEvent> = new EventEmitter<PageChangedEvent>();\r\n\r\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\r\n  @Input()\r\n  get itemsPerPage(): number {\r\n    return this._itemsPerPage;\r\n  }\r\n\r\n  set itemsPerPage(v: number) {\r\n    this._itemsPerPage = v;\r\n    this.totalPages = this.calculateTotalPages();\r\n  }\r\n\r\n  /** total number of items in all pages */\r\n  @Input()\r\n  get totalItems(): number {\r\n    return this._totalItems;\r\n  }\r\n\r\n  set totalItems(v: number) {\r\n    this._totalItems = v;\r\n    this.totalPages = this.calculateTotalPages();\r\n  }\r\n\r\n  get totalPages(): number {\r\n    return this._totalPages;\r\n  }\r\n\r\n  set totalPages(v: number) {\r\n    this._totalPages = v;\r\n    this.numPages.emit(v);\r\n    if (this.inited) {\r\n      this.selectPage(this.page);\r\n    }\r\n  }\r\n\r\n  set page(value: number) {\r\n    const _previous = this._page;\r\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\r\n    this.changeDetection.markForCheck();\r\n\r\n    if (_previous === this._page || typeof _previous === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    this.pageChanged.emit({\r\n      page: this._page,\r\n      itemsPerPage: this.itemsPerPage\r\n    });\r\n  }\r\n\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  classMap: string;\r\n  pages: PagesModel[];\r\n\r\n  protected _itemsPerPage: number;\r\n  protected _totalItems: number;\r\n  protected _totalPages: number;\r\n  protected inited = false;\r\n  protected _page = 1;\r\n\r\n  constructor(private elementRef: ElementRef,\r\n              paginationConfig: PaginationConfig,\r\n              private changeDetection: ChangeDetectorRef) {\r\n    this.elementRef = elementRef;\r\n    if (!this.config) {\r\n      this.configureOptions(\r\n        Object.assign({}, paginationConfig.main, paginationConfig.pager)\r\n      );\r\n    }\r\n  }\r\n\r\n  configureOptions(config: ConfigModel): void {\r\n    this.config = Object.assign({}, config);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (typeof window !== 'undefined') {\r\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\r\n    }\r\n    // watch for maxSize\r\n    this.maxSize =\r\n      typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\r\n    this.rotate =\r\n      typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\r\n    this.boundaryLinks =\r\n      typeof this.boundaryLinks !== 'undefined'\r\n        ? this.boundaryLinks\r\n        : this.config.boundaryLinks;\r\n    this.directionLinks =\r\n      typeof this.directionLinks !== 'undefined'\r\n        ? this.directionLinks\r\n        : this.config.directionLinks;\r\n    this.pageBtnClass =\r\n      typeof this.pageBtnClass !== 'undefined'\r\n        ? this.pageBtnClass\r\n        : this.config.pageBtnClass;\r\n\r\n    // base class\r\n    this.itemsPerPage =\r\n      typeof this.itemsPerPage !== 'undefined'\r\n        ? this.itemsPerPage\r\n        : this.config.itemsPerPage;\r\n    this.totalPages = this.calculateTotalPages();\r\n    // this class\r\n    this.pages = this.getPages(this.page, this.totalPages);\r\n    this.inited = true;\r\n  }\r\n\r\n  writeValue(value: number): void {\r\n    this.page = value;\r\n    this.pages = this.getPages(this.page, this.totalPages);\r\n  }\r\n\r\n  getText(key: string): string {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\r\n  }\r\n\r\n  noPrevious(): boolean {\r\n    return this.page === 1;\r\n  }\r\n\r\n  noNext(): boolean {\r\n    return this.page === this.totalPages;\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  selectPage(page: number, event?: Event): void {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (!this.disabled) {\r\n      if (event && event.target) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const target: any = event.target;\r\n        target.blur();\r\n      }\r\n      this.writeValue(page);\r\n      this.onChange(this.page);\r\n    }\r\n  }\r\n\r\n  // Create page object used in template\r\n  protected makePage(num: number,\r\n                     text: string,\r\n                     active: boolean): { number: number; text: string; active: boolean } {\r\n    return {text, number: num, active};\r\n  }\r\n\r\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\r\n    const pages: PagesModel[] = [];\r\n\r\n    // Default page limits\r\n    let startPage = 1;\r\n    let endPage = totalPages;\r\n    const isMaxSized =\r\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\r\n\r\n    // recompute if maxSize\r\n    if (isMaxSized) {\r\n      if (this.rotate) {\r\n        // Current page is displayed in the middle of the visible ones\r\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\r\n        endPage = startPage + this.maxSize - 1;\r\n\r\n        // Adjust if limit is exceeded\r\n        if (endPage > totalPages) {\r\n          endPage = totalPages;\r\n          startPage = endPage - this.maxSize + 1;\r\n        }\r\n      } else {\r\n        // Visible pages are paginated with maxSize\r\n        startPage =\r\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\r\n\r\n        // Adjust last page if limit is exceeded\r\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\r\n      }\r\n    }\r\n\r\n    // Add page number links\r\n    for (let num = startPage; num <= endPage; num++) {\r\n      const page = this.makePage(num, num.toString(), num === currentPage);\r\n      pages.push(page);\r\n    }\r\n\r\n    // Add links to move between page sets\r\n    if (isMaxSized && !this.rotate) {\r\n      if (startPage > 1) {\r\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\r\n        pages.unshift(previousPageSet);\r\n      }\r\n\r\n      if (endPage < totalPages) {\r\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\r\n        pages.push(nextPageSet);\r\n      }\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  // base class\r\n  protected calculateTotalPages(): number {\r\n    const totalPages =\r\n      this.itemsPerPage < 1\r\n        ? 1\r\n        : Math.ceil(this.totalItems / this.itemsPerPage);\r\n\r\n    return Math.max(totalPages || 0, 1);\r\n  }\r\n}\r\n","<ul class=\"pager\">\r\n  <li [class.disabled]=\"noPrevious()\" [class.previous]=\"align\"\r\n      [ngClass]=\"{'pull-left': align, 'float-left': align}\"\r\n      class=\"{{ pageBtnClass }}\">\r\n    <a href (click)=\"selectPage(page - 1, $event)\">{{ getText('previous') }}</a>\r\n  </li>\r\n  <li [class.disabled]=\"noNext()\" [class.next]=\"align\"\r\n      [ngClass]=\"{'pull-right': align, 'float-right': align}\"\r\n      class=\"{{ pageBtnClass }}\">\r\n    <a href (click)=\"selectPage(page + 1, $event)\">{{ getText('next') }}</a>\r\n  </li>\r\n</ul>\r\n","<ul class=\"pagination\" [ngClass]=\"classMap\">\r\n  <li class=\"pagination-first page-item\"\r\n      *ngIf=\"boundaryLinks\"\r\n      [class.disabled]=\"noPrevious() || disabled\">\r\n    <a class=\"page-link\" href (click)=\"selectPage(1, $event)\">\r\n      <ng-container [ngTemplateOutlet]=\"customFirstTemplate || defaultFirstTemplate\"\r\n                   [ngTemplateOutletContext]=\"{disabled: noPrevious() || disabled, currentPage: page}\">\r\n      </ng-container>\r\n    </a>\r\n  </li>\r\n\r\n  <li class=\"pagination-prev page-item\"\r\n      *ngIf=\"directionLinks\"\r\n      [class.disabled]=\"noPrevious() || disabled\">\r\n    <a class=\"page-link\" href (click)=\"selectPage(page - 1, $event)\">\r\n      <ng-container [ngTemplateOutlet]=\"customPreviousTemplate || defaultPreviousTemplate\"\r\n                   [ngTemplateOutletContext]=\"{disabled: noPrevious() || disabled, currentPage: page}\">\r\n      </ng-container>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngFor=\"let pg of pages\"\r\n      [class.active]=\"pg.active\"\r\n      [class.disabled]=\"disabled && !pg.active\"\r\n      class=\"pagination-page page-item\">\r\n    <a class=\"page-link\" href (click)=\"selectPage(pg.number, $event)\">\r\n      <ng-container [ngTemplateOutlet]=\"customPageTemplate || defaultPageTemplate\"\r\n                   [ngTemplateOutletContext]=\"{disabled: disabled, $implicit: pg, currentPage: page}\">\r\n      </ng-container>\r\n    </a>\r\n  </li>\r\n\r\n  <li class=\"pagination-next page-item\"\r\n      *ngIf=\"directionLinks\"\r\n      [class.disabled]=\"noNext() || disabled\">\r\n    <a class=\"page-link\" href (click)=\"selectPage(page + 1, $event)\">\r\n      <ng-container [ngTemplateOutlet]=\"customNextTemplate || defaultNextTemplate\"\r\n                   [ngTemplateOutletContext]=\"{disabled: noNext() || disabled, currentPage: page}\">\r\n      </ng-container>\r\n    </a>\r\n  </li>\r\n\r\n  <li class=\"pagination-last page-item\"\r\n      *ngIf=\"boundaryLinks\"\r\n      [class.disabled]=\"noNext() || disabled\">\r\n    <a class=\"page-link\" href (click)=\"selectPage(totalPages, $event)\">\r\n      <ng-container [ngTemplateOutlet]=\"customLastTemplate || defaultLastTemplate\"\r\n                   [ngTemplateOutletContext]=\"{disabled: noNext() || disabled, currentPage: page}\">\r\n      </ng-container>\r\n    </a>\r\n  </li>\r\n</ul>\r\n\r\n<ng-template #defaultPageTemplate let-page>{{ page.text }}</ng-template>\r\n\r\n<ng-template #defaultNextTemplate>{{ getText('next') }}</ng-template>\r\n\r\n<ng-template #defaultPreviousTemplate>{{ getText('previous') }}</ng-template>\r\n\r\n<ng-template #defaultFirstTemplate>{{ getText('first') }}</ng-template>\r\n\r\n<ng-template #defaultLastTemplate>{{ getText('last') }}</ng-template>\r\n","import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Provider, TemplateRef\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { PaginationConfig } from './pagination.config';\r\nimport { ConfigModel, PagesModel, PaginationLinkContext, PaginationNumberLinkContext } from './models';\r\n\r\nexport interface PageChangedEvent {\r\n  itemsPerPage: number;\r\n  page: number;\r\n}\r\n\r\nexport const PAGINATION_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => PaginationComponent),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n  selector: 'pagination',\r\n  templateUrl: './pagination.component.html',\r\n  providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class PaginationComponent implements ControlValueAccessor, OnInit {\r\n  config: ConfigModel;\r\n  /** if `true` aligns each link to the sides of pager */\r\n  @Input() align: boolean;\r\n  /** limit number for page links in pager */\r\n  @Input() maxSize: number;\r\n  /** if false first and last buttons will be hidden */\r\n  @Input() boundaryLinks: boolean;\r\n  /** if false previous and next buttons will be hidden */\r\n  @Input() directionLinks: boolean;\r\n  // labels\r\n  /** first button text */\r\n  @Input() firstText: string;\r\n  /** previous button text */\r\n  @Input() previousText: string;\r\n  /** next button text */\r\n  @Input() nextText: string;\r\n  /** last button text */\r\n  @Input() lastText: string;\r\n  /** if true current page will in the middle of pages list */\r\n  @Input() rotate: boolean;\r\n  // css\r\n  /** add class to <code><li\\></code> */\r\n  @Input() pageBtnClass: string;\r\n  /** if true pagination component will be disabled */\r\n  @Input() disabled: boolean;\r\n  /** custom template for page link */\r\n  @Input() customPageTemplate: TemplateRef<PaginationNumberLinkContext>;\r\n  /** custom template for next link */\r\n  @Input() customNextTemplate: TemplateRef<PaginationLinkContext>;\r\n  /** custom template for previous link */\r\n  @Input() customPreviousTemplate: TemplateRef<PaginationLinkContext>;\r\n  /** custom template for first link */\r\n  @Input() customFirstTemplate: TemplateRef<PaginationLinkContext>;\r\n  /** custom template for last link */\r\n  @Input() customLastTemplate: TemplateRef<PaginationLinkContext>;\r\n\r\n  /** fired when total pages count changes, $event:number equals to total pages count */\r\n  @Output() numPages: EventEmitter<number> = new EventEmitter<number>();\r\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to object\r\n   * with current page index and number of items per page\r\n   */\r\n  @Output()\r\n  pageChanged = new EventEmitter<PageChangedEvent>();\r\n\r\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\r\n  @Input()\r\n  get itemsPerPage(): number {\r\n    return this._itemsPerPage;\r\n  }\r\n\r\n  set itemsPerPage(v: number) {\r\n    this._itemsPerPage = v;\r\n    this.totalPages = this.calculateTotalPages();\r\n  }\r\n\r\n  /** total number of items in all pages */\r\n  @Input()\r\n  get totalItems(): number {\r\n    return this._totalItems;\r\n  }\r\n\r\n  set totalItems(v: number) {\r\n    this._totalItems = v;\r\n    this.totalPages = this.calculateTotalPages();\r\n  }\r\n\r\n  get totalPages(): number {\r\n    return this._totalPages;\r\n  }\r\n\r\n  set totalPages(v: number) {\r\n    this._totalPages = v;\r\n    this.numPages.emit(v);\r\n    if (this.inited) {\r\n      this.selectPage(this.page);\r\n    }\r\n  }\r\n\r\n  set page(value: number) {\r\n    const _previous = this._page;\r\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\r\n    this.changeDetection.markForCheck();\r\n\r\n    if (_previous === this._page || typeof _previous === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    this.pageChanged.emit({\r\n      page: this._page,\r\n      itemsPerPage: this.itemsPerPage\r\n    });\r\n  }\r\n\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  classMap: string;\r\n  pages: PagesModel[];\r\n\r\n  protected _itemsPerPage: number;\r\n  protected _totalItems: number;\r\n  protected _totalPages: number;\r\n  protected inited = false;\r\n  protected _page = 1;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    paginationConfig: PaginationConfig,\r\n    private changeDetection: ChangeDetectorRef\r\n  ) {\r\n    this.elementRef = elementRef;\r\n    if (!this.config) {\r\n      this.configureOptions(paginationConfig.main);\r\n    }\r\n  }\r\n\r\n  configureOptions(config: ConfigModel): void {\r\n    this.config = Object.assign({}, config);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (typeof window !== 'undefined') {\r\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\r\n    }\r\n    // watch for maxSize\r\n    this.maxSize =\r\n      typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\r\n    this.rotate =\r\n      typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\r\n    this.boundaryLinks =\r\n      typeof this.boundaryLinks !== 'undefined'\r\n        ? this.boundaryLinks\r\n        : this.config.boundaryLinks;\r\n    this.directionLinks =\r\n      typeof this.directionLinks !== 'undefined'\r\n        ? this.directionLinks\r\n        : this.config.directionLinks;\r\n    this.pageBtnClass =\r\n      typeof this.pageBtnClass !== 'undefined'\r\n        ? this.pageBtnClass\r\n        : this.config.pageBtnClass;\r\n\r\n    // base class\r\n    this.itemsPerPage =\r\n      typeof this.itemsPerPage !== 'undefined'\r\n        ? this.itemsPerPage\r\n        : this.config.itemsPerPage;\r\n    this.totalPages = this.calculateTotalPages();\r\n    // this class\r\n    this.pages = this.getPages(this.page, this.totalPages);\r\n    this.inited = true;\r\n  }\r\n\r\n  writeValue(value: number): void {\r\n    this.page = value;\r\n    this.pages = this.getPages(this.page, this.totalPages);\r\n  }\r\n\r\n  getText(key: string): string {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\r\n  }\r\n\r\n  noPrevious(): boolean {\r\n    return this.page === 1;\r\n  }\r\n\r\n  noNext(): boolean {\r\n    return this.page === this.totalPages;\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  selectPage(page: number, event?: Event): void {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (!this.disabled) {\r\n      if (event && event.target) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const target: any = event.target;\r\n        target.blur();\r\n      }\r\n      this.writeValue(page);\r\n      this.onChange(this.page);\r\n    }\r\n  }\r\n\r\n  // Create page object used in template\r\n  protected makePage(\r\n    num: number,\r\n    text: string,\r\n    active: boolean\r\n  ): { number: number; text: string; active: boolean } {\r\n    return { text, number: num, active };\r\n  }\r\n\r\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\r\n    const pages: PagesModel[] = [];\r\n\r\n    // Default page limits\r\n    let startPage = 1;\r\n    let endPage = totalPages;\r\n    const isMaxSized =\r\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\r\n\r\n    // recompute if maxSize\r\n    if (isMaxSized) {\r\n      if (this.rotate) {\r\n        // Current page is displayed in the middle of the visible ones\r\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\r\n        endPage = startPage + this.maxSize - 1;\r\n\r\n        // Adjust if limit is exceeded\r\n        if (endPage > totalPages) {\r\n          endPage = totalPages;\r\n          startPage = endPage - this.maxSize + 1;\r\n        }\r\n      } else {\r\n        // Visible pages are paginated with maxSize\r\n        startPage =\r\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\r\n\r\n        // Adjust last page if limit is exceeded\r\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\r\n      }\r\n    }\r\n\r\n    // Add page number links\r\n    for (let num = startPage; num <= endPage; num++) {\r\n      const page = this.makePage(num, num.toString(), num === currentPage);\r\n      pages.push(page);\r\n    }\r\n\r\n    // Add links to move between page sets\r\n    if (isMaxSized && !this.rotate) {\r\n      if (startPage > 1) {\r\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\r\n        pages.unshift(previousPageSet);\r\n      }\r\n\r\n      if (endPage < totalPages) {\r\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\r\n        pages.push(nextPageSet);\r\n      }\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  // base class\r\n  protected calculateTotalPages(): number {\r\n    const totalPages =\r\n      this.itemsPerPage < 1\r\n        ? 1\r\n        : Math.ceil(this.totalItems / this.itemsPerPage);\r\n\r\n    return Math.max(totalPages || 0, 1);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { PagerComponent } from './pager.component';\r\nimport { PaginationComponent } from './pagination.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PagerComponent, PaginationComponent],\r\n  exports: [PagerComponent, PaginationComponent]\r\n})\r\nexport class PaginationModule {\r\n  static forRoot(): ModuleWithProviders<PaginationModule> {\r\n    return { ngModule: PaginationModule, providers: [] };\r\n  }\r\n}\r\n"]}