{"version":3,"file":"typeahead.directive.js","sourceRoot":"","sources":["../../../../src/typeahead/typeahead.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iBAAiB,EACjB,SAAS,EACT,UAAU,EACV,YAAY,EACZ,YAAY,EACZ,KAAK,EAGL,MAAM,EACN,SAAS,EACT,WAAW,EACX,gBAAgB,EACjB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,IAAI,EAAgB,YAAY,EAAc,MAAM,MAAM,CAAC;AACpE,OAAO,EAAmB,sBAAsB,EAAE,MAAM,gCAAgC,CAAC;AACzF,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAEzF,OAAO,EAAE,2BAA2B,EAAE,MAAM,iCAAiC,CAAC;AAC9E,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACzD,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AACrD,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC3E,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;;;;;AAkBzD,MAAM,OAAO,kBAAkB;IAiJ7B,YACE,GAA2B,EAC3B,MAAuB,EACf,eAAkC,EAClC,OAAmB,EACnB,SAAoB,EACpB,QAAmB,EAC3B,gBAAkC;QAJ1B,oBAAe,GAAf,eAAe,CAAmB;QAClC,YAAO,GAAP,OAAO,CAAY;QACnB,cAAS,GAAT,SAAS,CAAW;QACpB,aAAQ,GAAR,QAAQ,CAAW;QAlJ7B;;;WAGG;QACM,uBAAkB,GAAW,KAAK,CAAC,CAAC;QAG7C,4BAA4B;QACnB,eAAU,GAAG,KAAK,CAAC;QAmB5B;;;WAGG;QACM,mBAAc,GAAY,KAAK,CAAC,CAAC;QAC1C;;WAEG;QACM,sBAAiB,GAAG,IAAI,CAAC;QAClC;;WAEG;QACM,yBAAoB,GAAG,IAAI,CAAC;QACrC;;WAEG;QACM,4BAAuB,GAAG,GAAG,CAAC;QACvC;;;;;;WAMG;QACM,4BAAuB,GAAY,KAAK,CAAC,CAAC;QACnD;;;;;WAKG;QACM,sCAAiC,GAAG,GAAG,CAAC;QACjD;;;WAGG;QACM,8BAAyB,GAAG,KAAK,CAAC;QAS3C,4CAA4C;QACnC,wBAAmB,GAAG,KAAK,CAAC;QACrC,0DAA0D;QACjD,qCAAgC,GAAG,CAAC,CAAC;QAG9C;;;WAGG;QACM,6BAAwB,GAAG,IAAI,CAAC;QACzC,wCAAwC;QAC/B,+BAA0B,GAAG,IAAI,CAAC;QAC3C;;WAEG;QACO,qBAAgB,GAAG,IAAI,YAAY,EAAW,CAAC;QACzD;;WAEG;QACO,uBAAkB,GAAG,IAAI,YAAY,EAAW,CAAC;QAC3D,8EAA8E;QACpE,sBAAiB,GAAG,IAAI,YAAY,EAAkB,CAAC;QACjE,+EAA+E;QACrE,uBAAkB,GAAG,IAAI,YAAY,EAAkB,CAAC;QAClE,4DAA4D;QAClD,oBAAe,GAAG,IAAI,YAAY,EAAkB,CAAC;QAO/D,0EAA0E;QACjE,WAAM,GAAG,KAAK,CAAC;QAiBxB,WAAM,GAAG,KAAK,CAAC;QACf,SAAI,GAAG,MAAM,CAAC;QAEd,wBAAmB,GAAG,KAAK,CAAC;QAC5B,cAAS,GAAG,KAAK,CAAC;QAClB,6BAAwB,GAAG,KAAK,CAAC;QAEjC,8DAA8D;QACpD,sBAAiB,GAAyB,IAAI,YAAY,EAAE,CAAC;QAC7D,aAAQ,GAAqB,EAAE,CAAC;QAChC,cAAS,GAAG,aAAa,CAAC;QAG5B,mBAAc,GAAmB,EAAE,CAAC;QAc1C,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,YAAY,CAChC,OAAO,EACP,gBAAgB,EAChB,QAAQ,CACT;aACE,OAAO,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;QAE3D,MAAM,CAAC,MAAM,CAAC,IAAI,EAChB;YACE,0BAA0B,EAAE,MAAM,CAAC,iBAAiB;YACpD,wBAAwB,EAAE,MAAM,CAAC,wBAAwB;YACzD,wBAAwB,EAAE,MAAM,CAAC,eAAe;YAChD,0BAA0B,EAAE,MAAM,CAAC,iBAAiB;YACpD,kBAAkB,EAAE,MAAM,CAAC,SAAS;YACpC,gBAAgB,EAAE,MAAM,CAAC,gBAAgB;YACzC,UAAU,EAAE,MAAM,CAAC,UAAU;SAC9B,CACF,CAAC;IACJ,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,IAAI,EAAE,CAAC;QAE9D,IAAI,CAAC,kBAAkB;YACrB,IAAI,CAAC,kBAAkB,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;QAEnE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,IAAI,CAAC,CAAC;QAEjD,yCAAyC;QACzC,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE;YACxE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;SAC7B;QAED,IAAI,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;SAC5B;QAED,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;aAAM;YACL,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;QAED,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAGD,8DAA8D;IAC9D,OAAO,CAAC,CAAM;QACZ,yEAAyE;QACzE,gEAAgE;QAChE,0EAA0E;QAC1E,kBAAkB;QAClB,MAAM,KAAK,GACT,CAAC,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS;YAC1B,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK;YAChB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,SAAS;gBACpC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW;gBACtB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;QACzB,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACnE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC7C;aAAM;YACL,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;IACH,CAAC;IAGD,QAAQ,CAAC,KAAoB;QAC3B,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM;YACA,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,EAAE;gBACxD,IAAI,CAAC,IAAI,EAAE,CAAC;gBAEZ,OAAO;aACR;YAED,KAAK;YACC,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS,EAAE;gBACzD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;gBAChC,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;gBAElC,OAAO;aACR;YAED,OAAO;YACD,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,GAAG,KAAK,WAAW,EAAE;gBAC3D,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;gBAChC,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;gBAElC,OAAO;aACR;YAED,QAAQ;YACF,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE;gBACvD,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;gBAEpC,OAAO;aACR;SACF;IACH,CAAC;IAID,OAAO;QACL,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,oCAAoC;QACpC,yDAAyD;QACzD,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,IAAI,CAAC,kBAAkB,KAAK,CAAC,EAAE;gBACjC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;aACrE;QACH,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;IAGD,MAAM;QACJ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YACjD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACnD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,cAAc,CAC1C,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,EAChC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,EAChC,KAAK,CAAC,CAAC,CAAC;SACT;IACH,CAAC;IAGD,SAAS,CAAC,KAAoB;QAC5B,6BAA6B;QAC7B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QAEG,IAAI,KAAK,CAAC,OAAO,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,EAAE;YAClD,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;QAEG,IAAI,KAAK,CAAC,OAAO,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE;YACnG,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,IAAI,CAAC,wBAAwB,EAAE;gBACjC,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;gBAEpC,OAAO;aACR;YAED,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;gBAClC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBAC5D,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;gBACjC,IAAI,CAAC,IAAI,EAAE,CAAC;aACb;SACF;IACH,CAAC;IAED,WAAW,CAAC,KAAqB;QAC/B,IAAI,QAAgB,CAAC;QACrB,IAAI,IAAI,CAAC,uBAAuB,EAAE;YAChC,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC,iCAAiC,KAAK,CAAC,CAAC,CAAC;YACzG,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACxF,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC;SAClC;aAAM;YACL,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;SACxB;QACD,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAC3C,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACpC,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,IAAI;QACF,IAAI,CAAC,UAAU;aACZ,MAAM,CAAC,2BAA2B,CAAC;aACnC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;aAClB,QAAQ,CAAC,EAAC,UAAU,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,OAAO,EAAC,CAAC;aAChE,IAAI,CAAC;YACJ,YAAY,EAAE,IAAI;YAClB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC,CAAC;QAEL,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,CAAa,EAAE,EAAE;YACvF,IAAI,IAAI,CAAC,kBAAkB,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;gBAClF,OAAO,SAAS,CAAC;aAClB;YACD,IAAI,CAAC,IAAI,CAAC,0BAA0B,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;gBACrF,OAAO,SAAS,CAAC;aAClB;YACD,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;QAC9B,yEAAyE;QAEzE,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,iBAAiB;YAC7C,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;YACxC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;aAC9B,QAAQ,EAAE;aACV,WAAW,EAAE,CAAC;QAEjB,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAE5D,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QACxC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAEnC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,QAAgB,EAAE,EAAE;YAC/D,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;YACjC,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,IAAI;QACF,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACvB,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;SACrC;QACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,cAAc;QACZ,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YACjD,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;IACH,CAAC;IAED,WAAW;QACT,yBAAyB;QACzB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,cAAc,EAAE;YACrC,GAAG,CAAC,WAAW,EAAE,CAAC;SACnB;QACD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAC5B,CAAC;IAES,YAAY;QACpB,IAAI,CAAC,cAAc,CAAC,IAAI,CACtB,IAAI,CAAC,iBAAiB;aACnB,IAAI,CACH,YAAY,CAAS,IAAI,CAAC,eAAe,CAAC,EAC1C,GAAG,CAAC,KAAK,CAAC,EAAE;YACV,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAChC,CAAC,CAAC,EACF,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAChC;aACA,SAAS,CAAC,CAAC,OAA0B,EAAE,EAAE;YACxC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAClC,CAAC,CAAC,CACL,CAAC;IACJ,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CACtB,IAAI,CAAC,iBAAiB;aACnB,IAAI,CACH,YAAY,CAAS,IAAI,CAAC,eAAe,CAAC,EAC1C,QAAQ,CAAC,CAAC,KAAa,EAAE,EAAE;YACzB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAEnD,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;iBACxB,IAAI,CACH,MAAM,CAAC,CAAC,MAAuB,EAAE,EAAE;gBACjC,OAAO,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,eAAe,CAAC,CAAC;YACjF,CAAC,CAAC,EACF,OAAO,EAAE,CACV,CAAC;QACN,CAAC,CAAC,CACH;aACA,SAAS,CAAC,CAAC,OAA0B,EAAE,EAAE;YACxC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAClC,CAAC,CAAC,CACL,CAAC;IACJ,CAAC;IAES,eAAe,CAAC,MAAuB;QAC/C,MAAM,WAAW,GAAW,kBAAkB,CAC5C,MAAM,EACN,IAAI,CAAC,oBAAoB,CAC1B,CAAC;QACF,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB;YAC7C,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC;YACvB,CAAC,CAAC,WAAW,CAAC;QAEhB,OAAO,gBAAgB,CAAC,WAAW,EAAE,CAAC;IACxC,CAAC;IAES,aAAa,CAAC,YAA+B;QAErD,IAAI,KAAK,GAAG,YAAY,CAAC;QACzB,IAAI,IAAI,CAAC,uBAAuB,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7D,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,uBAAuB,EAAE,EAC/F,IAAI,CAAC,iCAAiC,CAAC,EAAE;gBACzC,kFAAkF;gBAClF,KAAK,GAAG,QAAQ,CACd,KAAe,EACf,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,yBAAyB,EAC9B,IAAI,CAAC,iCAAiC,CACvC,CAAC;aACH;SACF;aAAM,IAAI,IAAI,CAAC,oBAAoB,EAAE;YACpC,KAAK,GAAG,QAAQ,CACd,KAAe,EACf,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,yBAAyB,CAC/B,CAAC;SACH;aAAM;YACL,oBAAoB;YACpB,KAAK,GAAG,QAAQ,CACd,KAAe,EACf,IAAI,EACJ,IAAI,EACJ,IAAI,CAAC,iCAAiC,CACvC,CAAC;SACH;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAES,cAAc,CAAC,KAAa;QACpC,gFAAgF;QAChF,IAAI,eAAe,GAAsB,CAAC,IAAI,CAAC,iBAAiB;YAC9D,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC,KAAK,CAAC;aACP,QAAQ,EAAE;aACV,WAAW,EAAE,CAAC;QAEjB,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAEtD,OAAO,eAAe,CAAC;IACzB,CAAC;IAES,SAAS,CAAC,KAAa,EAAE,IAAuB;QACxD,IAAI,WAAmB,CAAC;QAExB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,IAAI,CAAC,EAAE;gBACvC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;oBACpD,OAAO,KAAK,CAAC;iBACd;aACF;YAED,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAES,iBAAiB,CAAC,OAA0B;QACpD,IAAI,CAAC,cAAc,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QAEnC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,IAAI,CAAC,IAAI,EAAE,CAAC;YAEZ,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,wBAAwB,EAAE;YACpD,OAAO;SACR;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,2CAA2C;YAC3C,MAAM,aAAa,GAAG,CAAC,IAAI,CAAC,iBAAiB;gBAC3C,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;gBACxC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAExC,yEAAyE;YACzE,MAAM,eAAe,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;YAE/D,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;YAC5D,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;SACzC;aAAM;YACL,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;IACH,CAAC;IAES,cAAc,CAAC,OAA0B;QACjD,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAE7E,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,OAAO,GAAqB,EAAE,CAAC;YAEnC,0BAA0B;YAC1B,MAAM,MAAM,GAAG,MAAM;iBAClB,GAAG,CAAC,CAAC,MAAuB,EAAE,EAAE,CAC/B,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,mBAAmB,CAAC,CACrD;iBACA,MAAM,CAAC,CAAC,CAAS,EAAE,CAAS,EAAE,CAAW,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YAErE,MAAM,CAAC,OAAO,CAAC,CAAC,KAAa,EAAE,EAAE;gBAC/B,uCAAuC;gBACvC,OAAO,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;gBAErD,6CAA6C;gBAC7C,OAAO,GAAG,OAAO,CAAC,MAAM,CACtB,MAAM;qBACH,MAAM,CAAC,CAAC,MAAuB,EAAE,EAAE,CAClC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,KAAK,CAC/D;qBACA,GAAG,CAAC,CAAC,MAAuB,EAAE,EAAE,CAC/B,IAAI,cAAc,CAChB,MAAM,EACN,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,oBAAoB,CAAC,CACtD,CACF,CACJ,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;SACzB;aAAM;YACL,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG;YACxB,8DAA8D;YAC9D,CAAC,MAAW,EAAE,EAAE,CACd,IAAI,cAAc,CAChB,MAAM,EACN,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,oBAAoB,CAAC,CACtD,CACJ,CAAC;SACH;IACH,CAAC;IAES,YAAY,CAAC,OAA0B;QAC/C,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACnB,OAAO,OAAO,CAAC;SAChB;QAED,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI;eAC7B,IAAI,CAAC,gBAAgB,KAAK,SAAS;eACnC,OAAO,IAAI,CAAC,gBAAgB,KAAK,QAAQ;eACzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACpD,OAAO,CAAC,KAAK,CAAC,gGAAgG,CAAC,CAAC;YAEhH,OAAO,OAAO,CAAC;SAChB;QAED,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAEnD,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,MAAM,CAAC,EAAE;YAChE,OAAO,CAAC,KAAK,CAAC,2FAA2F,CAAC,CAAC;YAE3G,OAAO,OAAO,CAAC;SAChB;QAED,IAAI,OAAO,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;YAClC,OAAO,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;SACxE;QAED,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACvC,OAAO,CAAC,KAAK,CAAC,mEAAmE,CAAC,CAAC;YAEnF,OAAO,OAAO,CAAC;SAChB;QAED,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAkB,EAAE,CAAkB,EAAE,EAAE;YAC7D,MAAM,OAAO,GAAG,kBAAkB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC7C,MAAM,OAAO,GAAG,kBAAkB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAE7C,IAAI,OAAO,GAAG,OAAO,EAAE;gBACrB,OAAO,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACrC;YAED,IAAI,OAAO,GAAG,OAAO,EAAE;gBACrB,OAAO,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACrC;YAED,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC;IAES,UAAU;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IAClC,CAAC;IAES,uBAAuB;QAC/B,IAAI,IAAI,CAAC,uBAAuB,IAAI,IAAI,CAAC,oBAAoB;eACxD,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,uBAAuB,EAAE,EAClG,IAAI,CAAC,iCAAiC,CAAC,CAAC,EAAE;YACtC,MAAM,IAAI,KAAK,CAAC;4EACoD,IAAI,CAAC,uBAAuB;sDAClD,IAAI,CAAC,yBAAyB;4CACxC,CAAC,CAAC;SACvC;IACL,CAAC;IAES,oBAAoB,CAAC,IAAY,EAAE,IAAY;QACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;;oFA3pBU,kBAAkB;uDAAlB,kBAAkB;qGAAlB,mBAAe,oFAAf,oBAAgB,8EAAhB,aAAS,8EAAT,aAAS,4EAAT,YAAQ,wFAAR,qBAAiB;;;;uFAAjB,kBAAkB;cAX9B,SAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,QAAQ,EAAE,cAAc;gBACxB,qEAAqE;gBACrE,IAAI,EAAE;oBACJ,8BAA8B,EAAE,kBAAkB;oBAClD,kBAAkB,EAAE,yCAAyC;oBAC7D,sBAAsB,EAAE,QAAQ;oBAChC,0BAA0B,EAAE,MAAM;iBACnC;aACF;+OAKU,SAAS;kBAAjB,KAAK;YAKG,kBAAkB;kBAA1B,KAAK;YAEG,gBAAgB;kBAAxB,KAAK;YAEG,UAAU;kBAAlB,KAAK;YAEG,eAAe;kBAAvB,KAAK;YAEG,qBAAqB;kBAA7B,KAAK;YAKG,oBAAoB;kBAA5B,KAAK;YAIG,mBAAmB;kBAA3B,KAAK;YAKG,gBAAgB;kBAAxB,KAAK;YAKG,cAAc;kBAAtB,KAAK;YAIG,iBAAiB;kBAAzB,KAAK;YAIG,oBAAoB;kBAA5B,KAAK;YAIG,uBAAuB;kBAA/B,KAAK;YAQG,uBAAuB;kBAA/B,KAAK;YAOG,iCAAiC;kBAAzC,KAAK;YAKG,yBAAyB;kBAAjC,KAAK;YAIG,qBAAqB;kBAA7B,KAAK;YAIG,mBAAmB;kBAA3B,KAAK;YAEG,mBAAmB;kBAA3B,KAAK;YAEG,gCAAgC;kBAAxC,KAAK;YAEG,0BAA0B;kBAAlC,KAAK;YAKG,wBAAwB;kBAAhC,KAAK;YAEG,0BAA0B;kBAAlC,KAAK;YAII,gBAAgB;kBAAzB,MAAM;YAIG,kBAAkB;kBAA3B,MAAM;YAEG,iBAAiB;kBAA1B,MAAM;YAEG,kBAAkB;kBAA3B,MAAM;YAEG,eAAe;kBAAxB,MAAM;YAKE,SAAS;kBAAjB,KAAK;YAGG,MAAM;kBAAd,KAAK;;IA2FN,8DAA8D;IAC9D,OAAO;kBAFN,YAAY;mBAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;YAwBjC,QAAQ;kBADP,YAAY;mBAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;YAqCjC,OAAO;kBAFN,YAAY;mBAAC,OAAO;;kBACpB,YAAY;mBAAC,OAAO;YAcrB,MAAM;kBADL,YAAY;mBAAC,MAAM;YAgBpB,SAAS;kBADR,YAAY;mBAAC,SAAS,EAAE,CAAC,QAAQ,CAAC","sourcesContent":["import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  TemplateRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\n\r\nimport { from, Subscription, isObservable, Observable } from 'rxjs';\r\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\nimport { debounceTime, filter, mergeMap, switchMap, toArray, tap } from 'rxjs/operators';\r\n\r\nimport { TypeaheadContainerComponent } from './typeahead-container.component';\r\nimport { TypeaheadMatch } from './typeahead-match.class';\r\nimport { TypeaheadConfig } from './typeahead.config';\r\nimport { getValueFromObject, latinize, tokenize } from './typeahead-utils';\r\nimport { TypeaheadOrder } from './typeahead-order.class';\r\nimport { TypeaheadOptionItemContext, TypeaheadOptionListContext } from './models';\r\n\r\n// eslint-disable-next-line\r\ntype TypeaheadOption = string | Record<string|number, any>;\r\ntype Typeahead = TypeaheadOption[] | Observable<TypeaheadOption[]>;\r\n\r\n@Directive({\r\n  selector: '[typeahead]',\r\n  exportAs: 'bs-typeahead',\r\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n  host: {\r\n    '[attr.aria-activedescendant]': 'activeDescendant',\r\n    '[attr.aria-owns]': 'isOpen ? this._container.popupId : null',\r\n    '[attr.aria-expanded]': 'isOpen',\r\n    '[attr.aria-autocomplete]': 'list'\r\n  }\r\n})\r\nexport class TypeaheadDirective implements OnInit, OnDestroy {\r\n  /** options source, can be Array of strings, objects or\r\n   * an Observable for external matching process\r\n   */\r\n  @Input() typeahead: Typeahead;\r\n  /** minimal no of characters that needs to be entered before\r\n   * typeahead kicks-in. When set to 0, typeahead shows on focus with full\r\n   * list of options (limited as normal by typeaheadOptionsLimit)\r\n   */\r\n  @Input() typeaheadMinLength: number = void 0;\r\n  /** sets use adaptive position */\r\n  @Input() adaptivePosition: boolean;\r\n  /** turn on/off animation */\r\n  @Input() isAnimated = false;\r\n  /** minimal wait time after last character typed before typeahead kicks-in */\r\n  @Input() typeaheadWaitMs: number;\r\n  /** maximum length of options items list. The default value is 20 */\r\n  @Input() typeaheadOptionsLimit: number;\r\n  /** when options source is an array of objects, the name of field\r\n   * that contains the options value, we use array item as option in case\r\n   * of this field is missing. Supports nested properties and methods.\r\n   */\r\n  @Input() typeaheadOptionField: string;\r\n  /** when options source is an array of objects, the name of field that\r\n   * contains the group value, matches are grouped by this field when set.\r\n   */\r\n  @Input() typeaheadGroupField: string;\r\n  /** Used to specify a custom order of matches. When options source is an array of objects\r\n   * a field for sorting has to be set up. In case of options source is an array of string,\r\n   * a field for sorting is absent. The ordering direction could be changed to ascending or descending.\r\n   */\r\n  @Input() typeaheadOrderBy: TypeaheadOrder;\r\n  /** should be used only in case of typeahead attribute is Observable of array.\r\n   * If true - loading of options will be async, otherwise - sync.\r\n   * true make sense if options array is large.\r\n   */\r\n  @Input() typeaheadAsync: boolean = void 0;\r\n  /** match latin symbols.\r\n   * If true the word súper would match super and vice versa.\r\n   */\r\n  @Input() typeaheadLatinize = true;\r\n  /** Can be use to search words by inserting a single white space between each characters\r\n   *  for example 'C a l i f o r n i a' will match 'California'.\r\n   */\r\n  @Input() typeaheadSingleWords = true;\r\n  /** should be used only in case typeaheadSingleWords attribute is true.\r\n   * Sets the word delimiter to break words. Defaults to space.\r\n   */\r\n  @Input() typeaheadWordDelimiters = ' ';\r\n  /** Can be used to conduct a search of multiple items and have suggestion not for the\r\n   * whole value of the input but for the value that comes after a delimiter provided via\r\n   * typeaheadMultipleSearchDelimiters attribute. This option can only be used together with\r\n   * typeaheadSingleWords option if typeaheadWordDelimiters and typeaheadPhraseDelimiters\r\n   * are different from typeaheadMultipleSearchDelimiters to avoid conflict in determining\r\n   * when to delimit multiple searches and when a single word.\r\n   */\r\n  @Input() typeaheadMultipleSearch: boolean = void 0;\r\n  /** should be used only in case typeaheadMultipleSearch attribute is true.\r\n   * Sets the multiple search delimiter to know when to start a new search. Defaults to comma.\r\n   * If space needs to be used, then explicitly set typeaheadWordDelimiters to something else than space\r\n   * because space is used by default OR set typeaheadSingleWords attribute to false if you don't need\r\n   * to use it together with multiple search.\r\n   */\r\n  @Input() typeaheadMultipleSearchDelimiters = ',';\r\n  /** should be used only in case typeaheadSingleWords attribute is true.\r\n   * Sets the word delimiter to match exact phrase.\r\n   * Defaults to simple and double quotes.\r\n   */\r\n  @Input() typeaheadPhraseDelimiters = '\\'\"';\r\n  /** used to specify a custom item template.\r\n   * Template variables exposed are called item and index;\r\n   */\r\n  @Input() typeaheadItemTemplate: TemplateRef<TypeaheadOptionItemContext>;\r\n  /** used to specify a custom options list template.\r\n   * Template variables: matches, itemTemplate, query\r\n   */\r\n  @Input() optionsListTemplate: TemplateRef<TypeaheadOptionListContext>;\r\n  /** specifies if typeahead is scrollable  */\r\n  @Input() typeaheadScrollable = false;\r\n  /** specifies number of options to show in scroll view  */\r\n  @Input() typeaheadOptionsInScrollableView = 5;\r\n  /** used to hide result on blur */\r\n  @Input() typeaheadHideResultsOnBlur: boolean;\r\n  /** fired when an options list was opened and the user clicked Tab\r\n   * If a value equal true, it will be chosen first or active item in the list\r\n   * If value equal false, it will be chosen an active item in the list or nothing\r\n   */\r\n  @Input() typeaheadSelectFirstItem = true;\r\n  /** makes active first item in a list */\r\n  @Input() typeaheadIsFirstItemActive = true;\r\n  /** fired when 'busy' state of this component was changed,\r\n   * fired on async mode only, returns boolean\r\n   */\r\n  @Output() typeaheadLoading = new EventEmitter<boolean>();\r\n  /** fired on every key event and returns true\r\n   * in case of matches are not detected\r\n   */\r\n  @Output() typeaheadNoResults = new EventEmitter<boolean>();\r\n  /** fired when option was selected, return object with data of this option. */\r\n  @Output() typeaheadOnSelect = new EventEmitter<TypeaheadMatch>();\r\n  /** fired when option was previewed, return object with data of this option. */\r\n  @Output() typeaheadOnPreview = new EventEmitter<TypeaheadMatch>();\r\n  /** fired when blur event occurs. returns the active item */\r\n  @Output() typeaheadOnBlur = new EventEmitter<TypeaheadMatch>();\r\n\r\n  /**\r\n   * A selector specifying the element the typeahead should be appended to.\r\n   */\r\n  @Input() container: string;\r\n\r\n  /** This attribute indicates that the dropdown should be opened upwards */\r\n  @Input() dropup = false;\r\n\r\n  // not yet implemented\r\n  /** if false restrict model values to the ones selected from the popup only will be provided */\r\n  // @Input() protected typeaheadEditable:boolean;\r\n  /** if false the first match automatically will not be focused as you type */\r\n  // @Input() protected typeaheadFocusFirst:boolean;\r\n  /** format the ng-model result after selection */\r\n  // @Input() protected typeaheadInputFormatter:any;\r\n  /** if true automatically select an item when there is one option that exactly matches the user input */\r\n  // @Input() protected typeaheadSelectOnExact:boolean;\r\n  /**  if true select the currently highlighted match on blur */\r\n  // @Input() protected typeaheadSelectOnBlur:boolean;\r\n  /**  if false don't focus the input element the typeahead directive is associated with on selection */\r\n    // @Input() protected typeaheadFocusOnSelect:boolean;\r\n\r\n  activeDescendant: string;\r\n  isOpen = false;\r\n  list = 'list';\r\n  _container: TypeaheadContainerComponent;\r\n  isActiveItemChanged = false;\r\n  isFocused = false;\r\n  cancelRequestOnFocusLost = false;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  protected keyUpEventEmitter: EventEmitter<string> = new EventEmitter();\r\n  protected _matches: TypeaheadMatch[] = [];\r\n  protected placement = 'bottom left';\r\n\r\n  private _typeahead: ComponentLoader<TypeaheadContainerComponent>;\r\n  private _subscriptions: Subscription[] = [];\r\n  private _outsideClickListener: () => void;\r\n  private _allEnteredValue: string;\r\n\r\n  constructor(\r\n    cis: ComponentLoaderFactory,\r\n    config: TypeaheadConfig,\r\n    private changeDetection: ChangeDetectorRef,\r\n    private element: ElementRef,\r\n    private ngControl: NgControl,\r\n    private renderer: Renderer2,\r\n    viewContainerRef: ViewContainerRef\r\n  ) {\r\n\r\n    this._typeahead = cis.createLoader<TypeaheadContainerComponent>(\r\n      element,\r\n      viewContainerRef,\r\n      renderer\r\n    )\r\n      .provide({ provide: TypeaheadConfig, useValue: config });\r\n\r\n    Object.assign(this,\r\n      {\r\n        typeaheadHideResultsOnBlur: config.hideResultsOnBlur,\r\n        cancelRequestOnFocusLost: config.cancelRequestOnFocusLost,\r\n        typeaheadSelectFirstItem: config.selectFirstItem,\r\n        typeaheadIsFirstItemActive: config.isFirstItemActive,\r\n        typeaheadMinLength: config.minLength,\r\n        adaptivePosition: config.adaptivePosition,\r\n        isAnimated: config.isAnimated\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.typeaheadOptionsLimit = this.typeaheadOptionsLimit || 20;\r\n\r\n    this.typeaheadMinLength =\r\n      this.typeaheadMinLength === void 0 ? 1 : this.typeaheadMinLength;\r\n\r\n    this.typeaheadWaitMs = this.typeaheadWaitMs || 0;\r\n\r\n    // async should be false in case of array\r\n    if (this.typeaheadAsync === undefined && !(isObservable(this.typeahead))) {\r\n      this.typeaheadAsync = false;\r\n    }\r\n\r\n    if (isObservable(this.typeahead)) {\r\n      this.typeaheadAsync = true;\r\n    }\r\n\r\n    if (this.typeaheadAsync) {\r\n      this.asyncActions();\r\n    } else {\r\n      this.syncActions();\r\n    }\r\n\r\n    this.checkDelimitersConflict();\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  onInput(e: any): void {\r\n    // For `<input>`s, use the `value` property. For others that don't have a\r\n    // `value` (such as `<span contenteditable=\"true\">`), use either\r\n    // `textContent` or `innerText` (depending on which one is supported, i.e.\r\n    // Firefox or IE).\r\n    const value =\r\n      e.target.value !== undefined\r\n        ? e.target.value\r\n        : e.target.textContent !== undefined\r\n        ? e.target.textContent\r\n        : e.target.innerText;\r\n    if (value != null && value.trim().length >= this.typeaheadMinLength) {\r\n      this.typeaheadLoading.emit(true);\r\n      this.keyUpEventEmitter.emit(e.target.value);\r\n    } else {\r\n      this.typeaheadLoading.emit(false);\r\n      this.typeaheadNoResults.emit(false);\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  @HostListener('keyup', ['$event'])\r\n  onChange(event: KeyboardEvent): void {\r\n    if (this._container) {\r\n      // esc\r\n            if (event.keyCode === 27 || event.key === 'Escape') {\r\n        this.hide();\r\n\r\n        return;\r\n      }\r\n\r\n      // up\r\n            if (event.keyCode === 38 || event.key === 'ArrowUp') {\r\n        this.isActiveItemChanged = true;\r\n        this._container.prevActiveMatch();\r\n\r\n        return;\r\n      }\r\n\r\n      // down\r\n            if (event.keyCode === 40 || event.key === 'ArrowDown') {\r\n        this.isActiveItemChanged = true;\r\n        this._container.nextActiveMatch();\r\n\r\n        return;\r\n      }\r\n\r\n      // enter\r\n            if (event.keyCode === 13 || event.key === 'Enter') {\r\n        this._container.selectActiveMatch();\r\n\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('click')\r\n  @HostListener('focus')\r\n  onFocus(): void {\r\n    this.isFocused = true;\r\n    // add setTimeout to fix issue #5251\r\n    // to get and emit updated value if it's changed on focus\r\n    setTimeout(() => {\r\n      if (this.typeaheadMinLength === 0) {\r\n        this.typeaheadLoading.emit(true);\r\n        this.keyUpEventEmitter.emit(this.element.nativeElement.value || '');\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur(): void {\r\n    this.isFocused = false;\r\n    if (this._container && !this._container.isFocused) {\r\n      this.typeaheadOnBlur.emit(this._container.active);\r\n    }\r\n\r\n    if (!this.container && this._matches.length === 0) {\r\n    this.typeaheadOnBlur.emit(new TypeaheadMatch(\r\n      this.element.nativeElement.value,\r\n      this.element.nativeElement.value,\r\n      false));\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeydown(event: KeyboardEvent): void {\r\n    // no container - no problems\r\n    if (!this._container) {\r\n      return;\r\n    }\r\n\r\n        if (event.keyCode === 9 || event.key === 'Tab') {\r\n      this.onBlur();\r\n    }\r\n\r\n        if (event.keyCode === 9 || event.key === 'Tab' || event.keyCode === 13 || event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (this.typeaheadSelectFirstItem) {\r\n        this._container.selectActiveMatch();\r\n\r\n        return;\r\n      }\r\n\r\n      if (!this.typeaheadSelectFirstItem) {\r\n        this._container.selectActiveMatch(this.isActiveItemChanged);\r\n        this.isActiveItemChanged = false;\r\n        this.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  changeModel(match: TypeaheadMatch): void {\r\n    let valueStr: string;\r\n    if (this.typeaheadMultipleSearch) {\r\n      const tokens = this._allEnteredValue.split(new RegExp(`([${this.typeaheadMultipleSearchDelimiters}]+)`));\r\n      this._allEnteredValue = tokens.slice(0, tokens.length - 1).concat(match.value).join('');\r\n      valueStr = this._allEnteredValue;\r\n    } else {\r\n      valueStr = match.value;\r\n    }\r\n    this.ngControl.viewToModelUpdate(valueStr);\r\n    (this.ngControl.control).setValue(valueStr);\r\n    this.changeDetection.markForCheck();\r\n    this.hide();\r\n  }\r\n\r\n  get matches(): TypeaheadMatch[] {\r\n    return this._matches;\r\n  }\r\n\r\n  show(): void {\r\n    this._typeahead\r\n      .attach(TypeaheadContainerComponent)\r\n      .to(this.container)\r\n      .position({attachment: `${this.dropup ? 'top' : 'bottom'} left`})\r\n      .show({\r\n        typeaheadRef: this,\r\n        placement: this.placement,\r\n        animation: false,\r\n        dropup: this.dropup\r\n      });\r\n\r\n    this._outsideClickListener = this.renderer.listen('document', 'click', (e: MouseEvent) => {\r\n      if (this.typeaheadMinLength === 0 && this.element.nativeElement.contains(e.target)) {\r\n        return undefined;\r\n      }\r\n      if (!this.typeaheadHideResultsOnBlur || this.element.nativeElement.contains(e.target)) {\r\n        return undefined;\r\n      }\r\n      this.onOutsideClick();\r\n    });\r\n\r\n    this._container = this._typeahead.instance;\r\n    this._container.parent = this;\r\n    // This improves the speed as it won't have to be done for each list item\r\n\r\n    const normalizedQuery = (this.typeaheadLatinize\r\n      ? latinize(this.ngControl.control.value)\r\n      : this.ngControl.control.value)\r\n      .toString()\r\n      .toLowerCase();\r\n\r\n    this._container.query = this.tokenizeQuery(normalizedQuery);\r\n\r\n    this._container.matches = this._matches;\r\n    this.element.nativeElement.focus();\r\n\r\n    this._container.activeChangeEvent.subscribe((activeId: string) => {\r\n      this.activeDescendant = activeId;\r\n      this.changeDetection.markForCheck();\r\n    });\r\n    this.isOpen = true;\r\n  }\r\n\r\n  hide(): void {\r\n    if (this._typeahead.isShown) {\r\n      this._typeahead.hide();\r\n      this._outsideClickListener();\r\n      this._container = null;\r\n      this.isOpen = false;\r\n      this.changeDetection.markForCheck();\r\n    }\r\n    this.typeaheadOnPreview.emit(null);\r\n  }\r\n\r\n  onOutsideClick(): void {\r\n    if (this._container && !this._container.isFocused) {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // clean up subscriptions\r\n    for (const sub of this._subscriptions) {\r\n      sub.unsubscribe();\r\n    }\r\n    this._typeahead.dispose();\r\n  }\r\n\r\n  protected asyncActions(): void {\r\n    this._subscriptions.push(\r\n      this.keyUpEventEmitter\r\n        .pipe(\r\n          debounceTime<string>(this.typeaheadWaitMs),\r\n          tap(value => {\r\n            this._allEnteredValue = value;\r\n          }),\r\n          switchMap(() => this.typeahead)\r\n        )\r\n        .subscribe((matches: TypeaheadOption[]) => {\r\n          this.finalizeAsyncCall(matches);\r\n        })\r\n    );\r\n  }\r\n\r\n  protected syncActions(): void {\r\n    this._subscriptions.push(\r\n      this.keyUpEventEmitter\r\n        .pipe(\r\n          debounceTime<string>(this.typeaheadWaitMs),\r\n          mergeMap((value: string) => {\r\n            this._allEnteredValue = value;\r\n            const normalizedQuery = this.normalizeQuery(value);\r\n\r\n            return from(this.typeahead)\r\n              .pipe(\r\n                filter((option: TypeaheadOption) => {\r\n                  return option && this.testMatch(this.normalizeOption(option), normalizedQuery);\r\n                }),\r\n                toArray()\r\n              );\r\n          })\r\n        )\r\n        .subscribe((matches: TypeaheadOption[]) => {\r\n          this.finalizeAsyncCall(matches);\r\n        })\r\n    );\r\n  }\r\n\r\n  protected normalizeOption(option: TypeaheadOption): string {\r\n    const optionValue: string = getValueFromObject(\r\n      option,\r\n      this.typeaheadOptionField\r\n    );\r\n    const normalizedOption = this.typeaheadLatinize\r\n      ? latinize(optionValue)\r\n      : optionValue;\r\n\r\n    return normalizedOption.toLowerCase();\r\n  }\r\n\r\n  protected tokenizeQuery(currentQuery: string | string[]): string | string[] {\r\n\r\n    let query = currentQuery;\r\n    if (this.typeaheadMultipleSearch && this.typeaheadSingleWords) {\r\n      if (!this.haveCommonCharacters(`${this.typeaheadPhraseDelimiters}${this.typeaheadWordDelimiters}`,\r\n        this.typeaheadMultipleSearchDelimiters)) {\r\n        // single words and multiple search delimiters are different, can be used together\r\n        query = tokenize(\r\n          query as string,\r\n          this.typeaheadWordDelimiters,\r\n          this.typeaheadPhraseDelimiters,\r\n          this.typeaheadMultipleSearchDelimiters\r\n        );\r\n      }\r\n    } else if (this.typeaheadSingleWords) {\r\n      query = tokenize(\r\n        query as string,\r\n        this.typeaheadWordDelimiters,\r\n        this.typeaheadPhraseDelimiters\r\n      );\r\n    } else {\r\n      // multiple searches\r\n      query = tokenize(\r\n        query as string,\r\n        null,\r\n        null,\r\n        this.typeaheadMultipleSearchDelimiters\r\n      );\r\n    }\r\n\r\n    return query;\r\n  }\r\n\r\n  protected normalizeQuery(value: string): string | string[] {\r\n    // If singleWords, break model here to not be doing extra work on each iteration\r\n    let normalizedQuery: string | string[] = (this.typeaheadLatinize\r\n      ? latinize(value)\r\n      : value)\r\n      .toString()\r\n      .toLowerCase();\r\n\r\n    normalizedQuery = this.tokenizeQuery(normalizedQuery);\r\n\r\n    return normalizedQuery;\r\n  }\r\n\r\n  protected testMatch(match: string, test: string[] | string): boolean {\r\n    let spaceLength: number;\r\n\r\n    if (typeof test === 'object') {\r\n      spaceLength = test.length;\r\n      for (let i = 0; i < spaceLength; i += 1) {\r\n        if (test[i].length > 0 && match.indexOf(test[i]) < 0) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return match.indexOf(test) >= 0;\r\n  }\r\n\r\n  protected finalizeAsyncCall(matches: TypeaheadOption[]): void {\r\n    this.prepareMatches(matches || []);\r\n\r\n    this.typeaheadLoading.emit(false);\r\n    this.typeaheadNoResults.emit(!this.hasMatches());\r\n\r\n    if (!this.hasMatches()) {\r\n      this.hide();\r\n\r\n      return;\r\n    }\r\n\r\n    if (!this.isFocused && this.cancelRequestOnFocusLost) {\r\n      return;\r\n    }\r\n\r\n    if (this._container) {\r\n      // fix: remove usage of ngControl internals\r\n      const _controlValue = (this.typeaheadLatinize\r\n        ? latinize(this.ngControl.control.value)\r\n        : this.ngControl.control.value) || '';\r\n\r\n      // This improves the speed as it won't have to be done for each list item\r\n      const normalizedQuery = _controlValue.toString().toLowerCase();\r\n\r\n      this._container.query = this.tokenizeQuery(normalizedQuery);\r\n      this._container.matches = this._matches;\r\n    } else {\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  protected prepareMatches(options: TypeaheadOption[]): void {\r\n    const limited = options.slice(0, this.typeaheadOptionsLimit);\r\n    const sorted = !this.typeaheadOrderBy ? limited : this.orderMatches(limited);\r\n\r\n    if (this.typeaheadGroupField) {\r\n      let matches: TypeaheadMatch[] = [];\r\n\r\n      // extract all group names\r\n      const groups = sorted\r\n        .map((option: TypeaheadOption) =>\r\n          getValueFromObject(option, this.typeaheadGroupField)\r\n        )\r\n        .filter((v: string, i: number, a: string[]) => a.indexOf(v) === i);\r\n\r\n      groups.forEach((group: string) => {\r\n        // add group header to array of matches\r\n        matches.push(new TypeaheadMatch(group, group, true));\r\n\r\n        // add each item of group to array of matches\r\n        matches = matches.concat(\r\n          sorted\r\n            .filter((option: TypeaheadOption) =>\r\n              getValueFromObject(option, this.typeaheadGroupField) === group\r\n            )\r\n            .map((option: TypeaheadOption) =>\r\n              new TypeaheadMatch(\r\n                option,\r\n                getValueFromObject(option, this.typeaheadOptionField)\r\n              )\r\n            )\r\n        );\r\n      });\r\n\r\n      this._matches = matches;\r\n    } else {\r\n      this._matches = sorted.map(\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        (option: any) =>\r\n          new TypeaheadMatch(\r\n            option,\r\n            getValueFromObject(option, this.typeaheadOptionField)\r\n          )\r\n      );\r\n    }\r\n  }\r\n\r\n  protected orderMatches(options: TypeaheadOption[]): TypeaheadOption[] {\r\n    if (!options.length) {\r\n      return options;\r\n    }\r\n\r\n    if (this.typeaheadOrderBy !== null\r\n      && this.typeaheadOrderBy !== undefined\r\n      && typeof this.typeaheadOrderBy === 'object'\r\n      && Object.keys(this.typeaheadOrderBy).length === 0) {\r\n      console.error('Field and direction properties for typeaheadOrderBy have to be set according to documentation!');\r\n\r\n      return options;\r\n    }\r\n\r\n    const { field, direction } = this.typeaheadOrderBy;\r\n\r\n    if (!direction || !(direction === 'asc' || direction === 'desc')) {\r\n      console.error('typeaheadOrderBy direction has to equal \"asc\" or \"desc\". Please follow the documentation.');\r\n\r\n      return options;\r\n    }\r\n\r\n    if (typeof options[0] === 'string') {\r\n      return direction === 'asc' ? options.sort() : options.sort().reverse();\r\n    }\r\n\r\n    if (!field || typeof field !== 'string') {\r\n      console.error('typeaheadOrderBy field has to set according to the documentation.');\r\n\r\n      return options;\r\n    }\r\n\r\n    return options.sort((a: TypeaheadOption, b: TypeaheadOption) => {\r\n      const stringA = getValueFromObject(a, field);\r\n      const stringB = getValueFromObject(b, field);\r\n\r\n      if (stringA < stringB) {\r\n        return direction === 'asc' ? -1 : 1;\r\n      }\r\n\r\n      if (stringA > stringB) {\r\n        return direction === 'asc' ? 1 : -1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  protected hasMatches(): boolean {\r\n    return this._matches.length > 0;\r\n  }\r\n\r\n  protected checkDelimitersConflict(): void {\r\n    if (this.typeaheadMultipleSearch && this.typeaheadSingleWords\r\n      && (this.haveCommonCharacters(`${this.typeaheadPhraseDelimiters}${this.typeaheadWordDelimiters}`,\r\n    this.typeaheadMultipleSearchDelimiters))) {\r\n        throw new Error(`Delimiters used in typeaheadMultipleSearchDelimiters must be different\r\n          from delimiters used in typeaheadWordDelimiters (current value: ${this.typeaheadWordDelimiters}) and\r\n          typeaheadPhraseDelimiters (current value: ${this.typeaheadPhraseDelimiters}).\r\n          Please refer to the documentation`);\r\n      }\r\n  }\r\n\r\n  protected haveCommonCharacters(str1: string, str2: string) {\r\n    for (let i = 0; i < str1.length; i++) {\r\n      if (str1.charAt(i).indexOf(str2) > -1) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]}