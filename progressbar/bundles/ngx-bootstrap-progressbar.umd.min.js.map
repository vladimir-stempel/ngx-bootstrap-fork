{"version":3,"sources":["../../../../src/progressbar/progressbar.config.ts","../../../../src/progressbar/progressbar.component.html","../../../../src/progressbar/progressbar.component.ts","../../../../src/progressbar/bar.component.ts","../../../../src/progressbar/bar.component.html","../../../../src/progressbar/progressbar.module.ts"],"names":["this","animate","max","i0.ɵɵelementStart","i0.ɵɵprojection","i0.ɵɵelementEnd","i0.ɵɵproperty","ctx_r0","_value","_max","i0.ɵɵtext","item_r3","value","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","ProgressbarConfig","factory","ɵfac","providedIn","Injectable","ProgressbarComponent","config","isStacked","addClass","bars","Object","assign","defineProperty","prototype","_animate","forEach","b","_striped","striped","Array","isArray","isBs3","v","bar","recalculatePercentage","addBar","push","removeBar","splice","indexOf","i0","ɵɵdirectiveInject","selectors","hostVars","hostBindings","rf","ctx","Component","selector","templateUrl","styles","Input","type","HostBinding","BarComponent","el","progress","renderer","percent","ngOnInit","ngOnDestroy","ngOnChanges","changes","currentValue","applyTypeClasses","toFixed","totalPercentage","reduce","total","_prevType","barTypeClass","bgClass","removeClass","nativeElement","ElementRef","Renderer2","hostAttrs","host","role","aria-valuemin","[class.progress-bar-animated]","[class.progress-bar-striped]","[class.active]","[attr.aria-valuenow]","[attr.aria-valuetext]","[attr.aria-valuemax]","[style.height.%]","Host","setBarWidth","ProgressbarModule","forRoot","ngModule","providers","imports","CommonModule","declarations","exports","NgModule","i1","NgIf","NgForOf"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgressbarConfig {\r\n  /** if `true` changing value of progress bar will be animated */\r\n  animate = false;\r\n  /** maximum total value of progress element */\r\n  max = 100;\r\n}\r\n","<bar [type]=\"type\" [value]=\"_value\" [max]=\"_max\" *ngIf=\"!isStacked\">\r\n  <ng-content></ng-content>\r\n</bar>\r\n<ng-template [ngIf]=\"isStacked\">\r\n  <bar *ngFor=\"let item of _value\" [type]=\"item.type\" [value]=\"item.value\" [max]=\"item.max\">{{ item.label }}</bar>\r\n</ng-template>\r\n","import { Component, HostBinding, Input } from '@angular/core';\r\nimport { ProgressbarConfig } from './progressbar.config';\r\nimport { ProgressbarType } from './progressbar-type.interface';\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\nimport { BarComponent } from './bar.component';\r\n\r\n@Component({\r\n  selector: 'progressbar',\r\n  templateUrl: './progressbar.component.html',\r\n  styles: [\r\n    `\r\n    :host {\r\n      width: 100%;\r\n      display: flex;\r\n    }\r\n  `\r\n  ]\r\n})\r\nexport class ProgressbarComponent {\r\n  /** if `true` changing value of progress bar will be animated */\r\n  @Input()\r\n  set animate(value: boolean) {\r\n    this._animate = value;\r\n    this.bars.forEach((b: BarComponent) => {\r\n      b.animate = value;\r\n    });\r\n  }\r\n  /** If `true`, striped classes are applied */\r\n  @Input()\r\n  set striped(value: boolean) {\r\n    this._striped = value;\r\n    this.bars.forEach((b: BarComponent) => {\r\n      b.striped = value;\r\n    });\r\n  }\r\n\r\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\r\n  @Input() type: ProgressbarType;\r\n  /** current value of progress bar. Could be a number or array of objects\r\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\r\n   */\r\n  @Input()\r\n  set value(value: number | Record<string, number | string>) {\r\n    this.isStacked = Array.isArray(value);\r\n    this._value = value;\r\n  }\r\n  isStacked = false;\r\n  _striped: boolean;\r\n  _animate: boolean;\r\n  _max = 100;\r\n\r\n  _value: number | Record<string, number | string>;\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  /** maximum total value of progress element */\r\n  @HostBinding('attr.max')\r\n  @Input()\r\n  get max(): number {\r\n    return this._max;\r\n  }\r\n\r\n  set max(v: number) {\r\n    this._max = v;\r\n    this.bars.forEach((bar: BarComponent) => {\r\n      bar.recalculatePercentage();\r\n    });\r\n  }\r\n\r\n  @HostBinding('class.progress') addClass = true;\r\n\r\n  bars: BarComponent[] = [];\r\n  constructor(config: ProgressbarConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n  addBar(bar: BarComponent): void {\r\n    bar.animate = this._animate;\r\n    bar.striped = this._striped;\r\n\r\n    this.bars.push(bar);\r\n  }\r\n\r\n  removeBar(bar: BarComponent): void {\r\n    this.bars.splice(this.bars.indexOf(bar), 1);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Host,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ElementRef,\r\n  Renderer2, SimpleChanges, OnChanges\r\n} from '@angular/core';\r\n\r\nimport { ProgressbarComponent } from './progressbar.component';\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\n\r\n// todo: number pipe\r\n// todo: use query from progress?\r\n@Component({\r\n  selector: 'bar',\r\n  templateUrl: './bar.component.html',\r\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n  host: {\r\n    role: 'progressbar',\r\n    'aria-valuemin': '0',\r\n    '[class.progress-bar-animated]': '!isBs3 && animate',\r\n    '[class.progress-bar-striped]': 'striped',\r\n    '[class.active]': 'isBs3 && animate',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\r\n    '[attr.aria-valuemax]': 'max',\r\n    '[style.height.%]': '\"100\"'\r\n  }\r\n})\r\nexport class BarComponent implements OnInit, OnDestroy, OnChanges {\r\n  @Input() max: number;\r\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\r\n  @Input() type: string;\r\n\r\n  /** current value of progress bar */\r\n  @Input() value: number;\r\n\r\n  @HostBinding('style.width.%')\r\n  get setBarWidth() {\r\n    this.recalculatePercentage();\r\n\r\n    return this.percent;\r\n  }\r\n\r\n  @HostBinding('class.progress-bar') addClass = true;\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  striped: boolean;\r\n  animate: boolean;\r\n  percent = 0;\r\n  progress: ProgressbarComponent;\r\n\r\n  private _prevType: string;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    @Host() progress: ProgressbarComponent,\r\n    private renderer: Renderer2\r\n  ) {\r\n    this.progress = progress;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.progress.addBar(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.progress.removeBar(this);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.value) {\r\n      if (!changes.value.currentValue && changes.value.currentValue !== 0) {\r\n        return;\r\n      }\r\n      this.value = changes.value.currentValue;\r\n      this.recalculatePercentage();\r\n    }\r\n\r\n    if (changes.type) {\r\n      this.type = changes.type.currentValue;\r\n      this.applyTypeClasses();\r\n    }\r\n  }\r\n\r\n  recalculatePercentage(): void {\r\n    this.percent = +(this.value / this.progress.max * 100).toFixed(2);\r\n\r\n    const totalPercentage = this.progress.bars\r\n      .reduce(function (total: number, bar: BarComponent): number {\r\n        return total + bar.percent;\r\n      }, 0);\r\n\r\n    if (totalPercentage > 100) {\r\n      this.percent -= totalPercentage - 100;\r\n    }\r\n  }\r\n\r\n  private applyTypeClasses(): void {\r\n    if (this._prevType) {\r\n      const barTypeClass = `progress-bar-${this._prevType}`;\r\n      const bgClass = `bg-${this._prevType}`;\r\n      this.renderer.removeClass(this.el.nativeElement, barTypeClass);\r\n      this.renderer.removeClass(this.el.nativeElement, bgClass);\r\n      this._prevType = null;\r\n    }\r\n\r\n    if (this.type) {\r\n      const barTypeClass = `progress-bar-${this.type}`;\r\n      const bgClass = `bg-${this.type}`;\r\n      this.renderer.addClass(this.el.nativeElement, barTypeClass);\r\n      this.renderer.addClass(this.el.nativeElement, bgClass);\r\n      this._prevType = this.type;\r\n    }\r\n  }\r\n}\r\n","<ng-content></ng-content>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { BarComponent } from './bar.component';\r\nimport { ProgressbarComponent } from './progressbar.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [BarComponent, ProgressbarComponent],\r\n  exports: [BarComponent, ProgressbarComponent]\r\n})\r\nexport class ProgressbarModule {\r\n  static forRoot(): ModuleWithProviders<ProgressbarModule> {\r\n    return { ngModule: ProgressbarModule, providers: [] };\r\n  }\r\n}\r\n"]}