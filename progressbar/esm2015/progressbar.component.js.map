{"version":3,"file":"progressbar.component.js","sourceRoot":"","sources":["../../../../src/progressbar/progressbar.component.ts","../../../../src/progressbar/progressbar.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, HostBinding, Input } from '@angular/core';\r\nimport { ProgressbarConfig } from './progressbar.config';\r\nimport { ProgressbarType } from './progressbar-type.interface';\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\nimport { BarComponent } from './bar.component';\r\n\r\n@Component({\r\n  selector: 'progressbar',\r\n  templateUrl: './progressbar.component.html',\r\n  styles: [\r\n    `\r\n    :host {\r\n      width: 100%;\r\n      display: flex;\r\n    }\r\n  `\r\n  ]\r\n})\r\nexport class ProgressbarComponent {\r\n  /** if `true` changing value of progress bar will be animated */\r\n  @Input()\r\n  set animate(value: boolean) {\r\n    this._animate = value;\r\n    this.bars.forEach((b: BarComponent) => {\r\n      b.animate = value;\r\n    });\r\n  }\r\n  /** If `true`, striped classes are applied */\r\n  @Input()\r\n  set striped(value: boolean) {\r\n    this._striped = value;\r\n    this.bars.forEach((b: BarComponent) => {\r\n      b.striped = value;\r\n    });\r\n  }\r\n\r\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\r\n  @Input() type: ProgressbarType;\r\n  /** current value of progress bar. Could be a number or array of objects\r\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\r\n   */\r\n  @Input()\r\n  set value(value: number | Record<string, number | string>) {\r\n    this.isStacked = Array.isArray(value);\r\n    this._value = value;\r\n  }\r\n  isStacked = false;\r\n  _striped: boolean;\r\n  _animate: boolean;\r\n  _max = 100;\r\n\r\n  _value: number | Record<string, number | string>;\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  /** maximum total value of progress element */\r\n  @HostBinding('attr.max')\r\n  @Input()\r\n  get max(): number {\r\n    return this._max;\r\n  }\r\n\r\n  set max(v: number) {\r\n    this._max = v;\r\n    this.bars.forEach((bar: BarComponent) => {\r\n      bar.recalculatePercentage();\r\n    });\r\n  }\r\n\r\n  @HostBinding('class.progress') addClass = true;\r\n\r\n  bars: BarComponent[] = [];\r\n  constructor(config: ProgressbarConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n  addBar(bar: BarComponent): void {\r\n    bar.animate = this._animate;\r\n    bar.striped = this._striped;\r\n\r\n    this.bars.push(bar);\r\n  }\r\n\r\n  removeBar(bar: BarComponent): void {\r\n    this.bars.splice(this.bars.indexOf(bar), 1);\r\n  }\r\n}\r\n","<bar [type]=\"type\" [value]=\"_value\" [max]=\"_max\" *ngIf=\"!isStacked\">\r\n  <ng-content></ng-content>\r\n</bar>\r\n<ng-template [ngIf]=\"isStacked\">\r\n  <bar *ngFor=\"let item of _value\" [type]=\"item.type\" [value]=\"item.value\" [max]=\"item.max\">{{ item.label }}</bar>\r\n</ng-template>\r\n"]}