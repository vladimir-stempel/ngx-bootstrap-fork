{"version":3,"file":"state.class.js","sourceRoot":"","sources":["../../../../src/mini-ngrx/state.class.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,eAAe,EAAc,cAAc,EAAE,MAAM,MAAM,CAAC;AACnE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAGjD,MAAM,OAAO,SAAa,SAAQ,eAAkB;IAClD,YACE,aAAgB,EAChB,kBAAsC,EACtC,OAAyB;QAEzB,KAAK,CAAC,aAAa,CAAC,CAAC;QAErB,MAAM,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAC5C,SAAS,CAAC,cAAc,CAAC,CAC1B,CAAC;QACF,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAChC,IAAI,CAAC,CAAC,KAAQ,EAAE,MAAc,EAAE,EAAE;YAChC,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,KAAK,CAAC;aACd;YAED,OAAO,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAChC,CAAC,EACD,aAAa,CACd,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,CAAC,KAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACnD,CAAC;CACF","sourcesContent":["/**\r\n * @copyright ngrx\r\n */\r\nimport { Action, ActionReducer } from './index';\r\nimport { BehaviorSubject, Observable, queueScheduler } from 'rxjs';\r\nimport { observeOn, scan } from 'rxjs/operators';\r\n\r\n\r\nexport class MiniState<T> extends BehaviorSubject<T> {\r\n  constructor(\r\n    _initialState: T,\r\n    actionsDispatcher$: Observable<Action>,\r\n    reducer: ActionReducer<T>\r\n  ) {\r\n    super(_initialState);\r\n\r\n    const actionInQueue$ = actionsDispatcher$.pipe(\r\n      observeOn(queueScheduler)\r\n    );\r\n    const state$ = actionInQueue$.pipe(\r\n      scan((state: T, action: Action) => {\r\n        if (!action) {\r\n          return state;\r\n        }\r\n\r\n        return reducer(state, action);\r\n      },\r\n      _initialState\r\n    ));\r\n\r\n    state$.subscribe((value: T) => this.next(value));\r\n  }\r\n}\r\n"]}