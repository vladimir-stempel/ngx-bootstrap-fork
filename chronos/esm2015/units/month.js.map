{"version":3,"file":"month.js","sourceRoot":"","sources":["../../../../../src/chronos/units/month.ts"],"names":[],"mappings":"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","sourcesContent":["import { addFormatToken } from '../format/format';\r\nimport { isLeapYear } from './year';\r\nimport { mod } from '../utils';\r\nimport { getMonth } from '../utils/date-getters';\r\nimport { addRegexToken, match1to2, match2 } from '../parse/regex';\r\nimport { addParseToken } from '../parse/token';\r\nimport { MONTH } from './constants';\r\nimport { toInt } from '../utils/type-checks';\r\nimport { addUnitPriority } from './priorities';\r\nimport { addUnitAlias } from './aliases';\r\nimport { getParsingFlags } from '../create/parsing-flags';\r\nimport { DateParsingConfig } from '../create/parsing.types';\r\nimport { DateArray, DateFormatterOptions } from '../types';\r\n\r\n// todo: this is duplicate, source in date-getters.ts\r\nexport function daysInMonth(year: number, month: number): number {\r\n  if (isNaN(year) || isNaN(month)) {\r\n    return NaN;\r\n  }\r\n  const modMonth = mod(month, 12);\r\n  const _year = year + (month - modMonth) / 12;\r\n\r\n  return modMonth === 1\r\n    ? isLeapYear(_year) ? 29 : 28\r\n    : (31 - modMonth % 7 % 2);\r\n}\r\n\r\nexport function initMonth() {\r\n// FORMATTING\r\n\r\n  addFormatToken('M', ['MM', 2, false], 'Mo',\r\n    function(date: Date, opts: DateFormatterOptions): string {\r\n      return (getMonth(date, opts.isUTC) + 1).toString(10);\r\n    }\r\n  );\r\n\r\n  addFormatToken('MMM', null, null,\r\n    function(date: Date, opts: DateFormatterOptions): string {\r\n      return opts.locale.monthsShort(date, opts.format, opts.isUTC);\r\n    }\r\n  );\r\n\r\n  addFormatToken('MMMM', null, null,\r\n    function(date: Date, opts: DateFormatterOptions): string {\r\n      return opts.locale.months(date, opts.format, opts.isUTC);\r\n    }\r\n  );\r\n\r\n\r\n// ALIASES\r\n\r\n  addUnitAlias('month', 'M');\r\n\r\n// PRIORITY\r\n\r\n  addUnitPriority('month', 8);\r\n\r\n// PARSING\r\n\r\n  addRegexToken('M', match1to2);\r\n  addRegexToken('MM', match1to2, match2);\r\n  addRegexToken('MMM', function(isStrict, locale) {\r\n    return locale.monthsShortRegex(isStrict);\r\n  });\r\n  addRegexToken('MMMM', function(isStrict, locale) {\r\n    return locale.monthsRegex(isStrict);\r\n  });\r\n\r\n  addParseToken(['M', 'MM'], function(input: string, array: DateArray, config: DateParsingConfig): DateParsingConfig {\r\n    array[MONTH] = toInt(input) - 1;\r\n\r\n    return config;\r\n  });\r\n\r\n  addParseToken(\r\n    ['MMM', 'MMMM'],\r\n    function(input: string, array: DateArray, config: DateParsingConfig, token: string): DateParsingConfig {\r\n      const month = config._locale.monthsParse(input, token, config._strict);\r\n      // if we didn't find a month name, mark the date as invalid.\r\n      if (month != null) {\r\n        array[MONTH] = month;\r\n      } else {\r\n        getParsingFlags(config).invalidMonth = !!input;\r\n      }\r\n\r\n      return config;\r\n    }\r\n  );\r\n}\r\n"]}