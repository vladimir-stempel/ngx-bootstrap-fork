{"version":3,"file":"timestamp.js","sourceRoot":"","sources":["../../../../../src/chronos/units/timestamp.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAC5E,OAAO,EAAE,aAAa,EAAC,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAK7C,MAAM,UAAU,aAAa;IAC7B,aAAa;IAEX,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,UAAS,IAAU;QACjD,OAAO,IAAI,CAAC,IAAI,CAAC;aACd,QAAQ,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;IACH,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,UAAS,IAAU;QACjD,OAAO,IAAI,CAAC,OAAO,EAAE;aAClB,QAAQ,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;IAEL,UAAU;IAER,aAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAChC,aAAa,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IAEnC,aAAa,CAAC,GAAG,EAAE,UAAS,KAAa,EAAE,KAAgB,EAAE,MAAyB;QACpF,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;QAE/C,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;IACH,aAAa,CAAC,GAAG,EAAE,UAAS,KAAa,EAAE,KAAgB,EAAE,MAAyB;QACpF,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAEnC,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { addFormatToken } from '../format/format';\r\nimport { unix } from '../utils/date-getters';\r\nimport { addRegexToken, matchSigned, matchTimestamp } from '../parse/regex';\r\nimport { addParseToken} from '../parse/token';\r\nimport { toInt } from '../utils/type-checks';\r\nimport { DateArray } from '../types';\r\nimport { DateParsingConfig } from '../create/parsing.types';\r\n\r\n\r\nexport function initTimestamp() {\r\n// FORMATTING\r\n\r\n  addFormatToken('X', null, null, function(date: Date): string {\r\n    return unix(date)\r\n      .toString(10);\r\n  });\r\n  addFormatToken('x', null, null, function(date: Date): string {\r\n    return date.valueOf()\r\n      .toString(10);\r\n  });\r\n\r\n// PARSING\r\n\r\n  addRegexToken('x', matchSigned);\r\n  addRegexToken('X', matchTimestamp);\r\n\r\n  addParseToken('X', function(input: string, array: DateArray, config: DateParsingConfig): DateParsingConfig {\r\n    config._d = new Date(parseFloat(input) * 1000);\r\n\r\n    return config;\r\n  });\r\n  addParseToken('x', function(input: string, array: DateArray, config: DateParsingConfig): DateParsingConfig {\r\n    config._d = new Date(toInt(input));\r\n\r\n    return config;\r\n  });\r\n}\r\n"]}