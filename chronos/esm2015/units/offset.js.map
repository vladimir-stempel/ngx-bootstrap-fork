{"version":3,"file":"offset.js","sourceRoot":"","sources":["../../../../../src/chronos/units/offset.ts"],"names":[],"mappings":"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","sourcesContent":["// FORMATTING\r\n\r\nimport { addFormatToken } from '../format/format';\r\nimport { zeroFill } from '../utils/zero-fill';\r\nimport { DateParsingConfig } from '../create/parsing.types';\r\nimport { isNumber, isString, toInt } from '../utils/type-checks';\r\nimport { addRegexToken, matchOffset, matchShortOffset } from '../parse/regex';\r\nimport { add } from '../moment/add-subtract';\r\nimport { addParseToken } from '../parse/token';\r\nimport { DateArray } from '../types';\r\nimport { cloneDate } from '../create/clone';\r\nimport { setMonth } from '../utils/date-setters';\r\n\r\nfunction addOffsetFormatToken(token: string, separator: string): void {\r\n  addFormatToken(token, null, null, function (date: Date, config): string {\r\n    let offset = getUTCOffset(date, {_isUTC: config.isUTC, _offset: config.offset});\r\n    let sign = '+';\r\n    if (offset < 0) {\r\n      offset = -offset;\r\n      sign = '-';\r\n    }\r\n\r\n    return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\r\n  });\r\n}\r\n\r\nexport function initOffset() {\r\n  addOffsetFormatToken('Z', ':');\r\n  addOffsetFormatToken('ZZ', '');\r\n\r\n// PARSING\r\n\r\n  addRegexToken('Z', matchShortOffset);\r\n  addRegexToken('ZZ', matchShortOffset);\r\n  addParseToken(['Z', 'ZZ'], function(input: string, array: DateArray, config: DateParsingConfig): DateParsingConfig {\r\n    config._useUTC = true;\r\n    config._tzm = offsetFromString(matchShortOffset, input);\r\n\r\n    return config;\r\n  });\r\n}\r\n\r\n// HELPERS\r\n\r\n// timezone chunker\r\n// '+10:00' > ['10',  '00']\r\n// '-1530'  > ['-15', '30']\r\nconst chunkOffset = /([\\+\\-]|\\d\\d)/gi;\r\n\r\nfunction offsetFromString(matcher: RegExp, str: string): number {\r\n  const matches = (str || '').match(matcher);\r\n\r\n  if (matches === null) {\r\n    return null;\r\n  }\r\n\r\n  const chunk = matches[matches.length - 1];\r\n  const parts = chunk.match(chunkOffset) || ['-', '0', '0'];\r\n  const minutes = parseInt(parts[1], 10) * 60 + toInt(parts[2]);\r\n  const _min = parts[0] === '+' ? minutes : -minutes;\r\n\r\n  return minutes === 0 ? 0 : _min;\r\n}\r\n\r\n// Return a moment from input, that is local/utc/zone equivalent to model.\r\nexport function cloneWithOffset(input: Date, date: Date,\r\n                                config: DateParsingConfig = {}): Date {\r\n  if (!config._isUTC) {\r\n    return input;\r\n  }\r\n\r\n  const res = cloneDate(date);\r\n  // todo: input._d - res._d + ((res._offset || 0) - (input._offset || 0))*60000\r\n  const offsetDiff = (config._offset || 0) * 60000;\r\n  const diff = input.valueOf() - res.valueOf() + offsetDiff;\r\n  // Use low-level api, because this fn is low-level api.\r\n  res.setTime(res.valueOf() + diff);\r\n  // todo: add timezone handling\r\n  // hooks.updateOffset(res, false);\r\n\r\n  return res;\r\n}\r\n\r\nexport function getDateOffset(date: Date): number {\r\n  // On Firefox.24 Date#getTimezoneOffset returns a floating point.\r\n  // https://github.com/moment/moment/pull/1871\r\n  return -Math.round(date.getTimezoneOffset() / 15) * 15;\r\n}\r\n\r\n// HOOKS\r\n\r\n// This function will be called whenever a moment is mutated.\r\n// It is intended to keep the offset in sync with the timezone.\r\n// todo: it's from moment timezones\r\n// hooks.updateOffset = function () {\r\n// };\r\n\r\n// MOMENTS\r\n\r\n// keepLocalTime = true means only change the timezone, without\r\n// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\r\n// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\r\n// +0200, so we adjust the time as needed, to be valid.\r\n//\r\n// Keeping the time actually adds/subtracts (one hour)\r\n// from the actual represented time. That is why we call updateOffset\r\n// a second time. In case it wants us to change the offset again\r\n// _changeInProgress == true case, then we have to adjust, because\r\n// there is no such time in the given timezone.\r\nexport function getUTCOffset(date: Date, config: DateParsingConfig = {}): number {\r\n  const _offset = config._offset || 0;\r\n\r\n  return config._isUTC ? _offset : getDateOffset(date);\r\n}\r\n\r\nexport function setUTCOffset(date: Date, input: number | string, keepLocalTime?: boolean, keepMinutes?: boolean, config: DateParsingConfig = {}): Date {\r\n  const offset = config._offset || 0;\r\n  let localAdjust;\r\n  let _input = input;\r\n  let _date = date;\r\n\r\n  if (isString(_input)) {\r\n    _input = offsetFromString(matchShortOffset, _input);\r\n    if (_input === null) {\r\n      return _date;\r\n    }\r\n  } else if (isNumber(_input) && Math.abs(_input) < 16 && !keepMinutes) {\r\n    _input = _input * 60;\r\n  }\r\n\r\n  if (!config._isUTC && keepLocalTime) {\r\n    localAdjust = getDateOffset(_date);\r\n  }\r\n  config._offset = _input;\r\n  config._isUTC = true;\r\n  if (localAdjust != null) {\r\n    _date = add(_date, localAdjust, 'minutes');\r\n  }\r\n  if (offset !== _input) {\r\n    if (!keepLocalTime || config._changeInProgress) {\r\n      _date = add(_date, _input - offset, 'minutes', config._isUTC);\r\n      // addSubtract(this, createDuration(_input - offset, 'm'), 1, false);\r\n    } else if (!config._changeInProgress) {\r\n      config._changeInProgress = true;\r\n      // todo: add timezone handling\r\n      // hooks.updateOffset(this, true);\r\n      config._changeInProgress = null;\r\n    }\r\n  }\r\n\r\n  return _date;\r\n}\r\n\r\n/*\r\nexport function getSetZone(input, keepLocalTime) {\r\n  if (input != null) {\r\n    if (typeof input !== 'string') {\r\n      input = -input;\r\n    }\r\n\r\n    this.utcOffset(input, keepLocalTime);\r\n\r\n    return this;\r\n  } else {\r\n    return -this.utcOffset();\r\n  }\r\n}\r\n*/\r\n\r\nexport function setOffsetToUTC(date: Date, keepLocalTime?: boolean): Date {\r\n  return setUTCOffset(date, 0, keepLocalTime);\r\n}\r\n\r\nexport function isDaylightSavingTime(date: Date): boolean {\r\n\r\n  return (getUTCOffset(date) > getUTCOffset(setMonth(cloneDate(date), 0))\r\n    || getUTCOffset(date) > getUTCOffset(setMonth(cloneDate(date), 5)));\r\n}\r\n\r\n/*export function setOffsetToLocal(date: Date, isUTC?: boolean, keepLocalTime?: boolean) {\r\n  if (this._isUTC) {\r\n    this.utcOffset(0, keepLocalTime);\r\n    this._isUTC = false;\r\n\r\n    if (keepLocalTime) {\r\n      this.subtract(getDateOffset(this), 'm');\r\n    }\r\n  }\r\n  return this;\r\n}*/\r\n\r\nexport function setOffsetToParsedOffset(date: Date, input: string, config: DateParsingConfig = {}): Date {\r\n  if (config._tzm != null) {\r\n    return setUTCOffset(date, config._tzm, false, true, config);\r\n  }\r\n\r\n  if (isString(input)) {\r\n    const tZone = offsetFromString(matchOffset, input);\r\n    if (tZone != null) {\r\n      return setUTCOffset(date, tZone, false, false, config);\r\n    }\r\n\r\n    return setUTCOffset(date, 0, true, false, config);\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\nexport function hasAlignedHourOffset(date: Date, input?: Date) {\r\n  const _input = input ? getUTCOffset(input, { _isUTC: false }) : 0;\r\n\r\n  return (getUTCOffset(date) - _input) % 60 === 0;\r\n}\r\n\r\n\r\n// DEPRECATED\r\n/*export function isDaylightSavingTimeShifted() {\r\n  if (!isUndefined(this._isDSTShifted)) {\r\n    return this._isDSTShifted;\r\n  }\r\n\r\n  const c = {};\r\n\r\n  copyConfig(c, this);\r\n  c = prepareConfig(c);\r\n\r\n  if (c._a) {\r\n    const other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\r\n    this._isDSTShifted = this.isValid() &&\r\n      compareArrays(c._a, other.toArray()) > 0;\r\n  } else {\r\n    this._isDSTShifted = false;\r\n  }\r\n\r\n  return this._isDSTShifted;\r\n}*/\r\n\r\n// in Khronos\r\n/*export function isLocal() {\r\n  return this.isValid() ? !this._isUTC : false;\r\n}\r\n\r\nexport function isUtcOffset() {\r\n  return this.isValid() ? this._isUTC : false;\r\n}\r\n\r\nexport function isUtc() {\r\n  return this.isValid() ? this._isUTC && this._offset === 0 : false;\r\n}*/\r\n"]}