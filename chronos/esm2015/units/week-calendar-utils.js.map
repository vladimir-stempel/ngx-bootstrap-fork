{"version":3,"file":"week-calendar-utils.js","sourceRoot":"","sources":["../../../../../src/chronos/units/week-calendar-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n *\r\n * @param {number} year\r\n * @param {number} dow - start-of-first-week\r\n * @param {number} doy - start-of-year\r\n * @returns {number}\r\n */\r\nimport { createUTCDate } from '../create/date-from-array';\r\nimport { daysInYear } from './year';\r\nimport { getDayOfYear } from './day-of-year';\r\nimport { getFullYear } from '../utils/date-getters';\r\n\r\nfunction firstWeekOffset(year: number, dow: number, doy: number): number {\r\n  // first-week day -- which january is always in the first week (4 for iso, 1 for other)\r\n  const fwd = dow - doy + 7;\r\n  // first-week day local weekday -- which local weekday is fwd\r\n  const fwdlw = (createUTCDate(year, 0, fwd).getUTCDay() - dow + 7) % 7;\r\n\r\n  return -fwdlw + fwd - 1;\r\n}\r\n\r\n// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\r\nexport function dayOfYearFromWeeks(\r\n  year: number,\r\n  week: number,\r\n  weekday: number,\r\n  dow: number,\r\n  doy: number\r\n): { year: number; dayOfYear: number } {\r\n  const localWeekday = (7 + weekday - dow) % 7;\r\n  const weekOffset = firstWeekOffset(year, dow, doy);\r\n  const dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset;\r\n  let resYear: number;\r\n  let resDayOfYear: number;\r\n\r\n  if (dayOfYear <= 0) {\r\n    resYear = year - 1;\r\n    resDayOfYear = daysInYear(resYear) + dayOfYear;\r\n  } else if (dayOfYear > daysInYear(year)) {\r\n    resYear = year + 1;\r\n    resDayOfYear = dayOfYear - daysInYear(year);\r\n  } else {\r\n    resYear = year;\r\n    resDayOfYear = dayOfYear;\r\n  }\r\n\r\n  return {\r\n    year: resYear,\r\n    dayOfYear: resDayOfYear\r\n  };\r\n}\r\n\r\nexport function weekOfYear(date: Date, dow: number, doy: number, isUTC?: boolean): { week: number; year: number } {\r\n  const weekOffset = firstWeekOffset(getFullYear(date, isUTC), dow, doy);\r\n  const week = Math.floor((getDayOfYear(date, isUTC) - weekOffset - 1) / 7) + 1;\r\n  let resWeek: number;\r\n  let resYear: number;\r\n\r\n  if (week < 1) {\r\n    resYear = getFullYear(date, isUTC) - 1;\r\n    resWeek = week + weeksInYear(resYear, dow, doy);\r\n  } else if (week > weeksInYear(getFullYear(date, isUTC), dow, doy)) {\r\n    resWeek = week - weeksInYear(getFullYear(date, isUTC), dow, doy);\r\n    resYear = getFullYear(date, isUTC) + 1;\r\n  } else {\r\n    resYear = getFullYear(date, isUTC);\r\n    resWeek = week;\r\n  }\r\n\r\n  return {\r\n    week: resWeek,\r\n    year: resYear\r\n  };\r\n}\r\n\r\nexport function weeksInYear(year: number, dow: number, doy: number): number {\r\n  const weekOffset = firstWeekOffset(year, dow, doy);\r\n  const weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\r\n\r\n  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\r\n}\r\n"]}