{"version":3,"file":"from-string.js","sourceRoot":"","sources":["../../../../../src/chronos/create/from-string.ts"],"names":[],"mappings":"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","sourcesContent":["import { defaultLocaleMonthsShort, defaultLocaleWeekdaysShort } from '../locale/locale.class';\r\nimport { DateArray } from '../types';\r\nimport { DateParsingConfig } from './parsing.types';\r\nimport { isString } from '../utils/type-checks';\r\nimport { configFromStringAndFormat } from './from-string-and-format';\r\nimport { createUTCDate } from './date-from-array';\r\nimport { createInvalid, markInvalid } from './valid';\r\nimport { getParsingFlags } from './parsing-flags';\r\n\r\n// iso 8601 regex\r\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\r\nconst extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\r\nconst basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\r\n\r\nconst tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\r\n\r\nconst isoDates: [string, RegExp, boolean][] = [\r\n  ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/, true],\r\n  ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/, true],\r\n  ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/, true],\r\n  ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\r\n  ['YYYY-DDD', /\\d{4}-\\d{3}/, true],\r\n  ['YYYY-MM', /\\d{4}-\\d\\d/, false],\r\n  ['YYYYYYMMDD', /[+-]\\d{10}/, true],\r\n  ['YYYYMMDD', /\\d{8}/, true],\r\n  // YYYYMM is NOT allowed by the standard\r\n  ['GGGG[W]WWE', /\\d{4}W\\d{3}/, true],\r\n  ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\r\n  ['YYYYDDD', /\\d{7}/, true]\r\n];\r\n\r\n// iso time formats and regexes\r\nconst isoTimes: [string, RegExp][] = [\r\n  ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\r\n  ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\r\n  ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\r\n  ['HH:mm', /\\d\\d:\\d\\d/],\r\n  ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\r\n  ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\r\n  ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\r\n  ['HHmm', /\\d\\d\\d\\d/],\r\n  ['HH', /\\d\\d/]\r\n];\r\n\r\nconst aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\r\n\r\nconst obsOffsets: { [key: string]: number } = {\r\n  UT: 0,\r\n  GMT: 0,\r\n  EDT: -4 * 60,\r\n  EST: -5 * 60,\r\n  CDT: -5 * 60,\r\n  CST: -6 * 60,\r\n  MDT: -6 * 60,\r\n  MST: -7 * 60,\r\n  PDT: -7 * 60,\r\n  PST: -8 * 60\r\n};\r\n\r\n// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\r\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\r\n\r\n// date from iso format\r\nexport function configFromISO(config: DateParsingConfig): DateParsingConfig {\r\n  if (!isString(config._i)) {\r\n    return config;\r\n  }\r\n\r\n  const input = config._i;\r\n  const match = extendedIsoRegex.exec(input) || basicIsoRegex.exec(input);\r\n\r\n\r\n  let allowTime;\r\n  let dateFormat;\r\n  let timeFormat;\r\n  let tzFormat;\r\n\r\n  if (!match) {\r\n    config._isValid = false;\r\n\r\n    return config;\r\n  }\r\n\r\n  // getParsingFlags(config).iso = true;\r\n  let i;\r\n  let l;\r\n  for (i = 0, l = isoDates.length; i < l; i++) {\r\n    if (isoDates[i][1].exec(match[1])) {\r\n      dateFormat = isoDates[i][0];\r\n      allowTime = isoDates[i][2] !== false;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (dateFormat == null) {\r\n    config._isValid = false;\r\n\r\n    return config;\r\n  }\r\n\r\n  if (match[3]) {\r\n    for (i = 0, l = isoTimes.length; i < l; i++) {\r\n      if (isoTimes[i][1].exec(match[3])) {\r\n        // match[2] should be 'T' or space\r\n        timeFormat = (match[2] || ' ') + isoTimes[i][0];\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (timeFormat == null) {\r\n      config._isValid = false;\r\n\r\n      return config;\r\n    }\r\n\r\n  }\r\n  if (!allowTime && timeFormat != null) {\r\n    config._isValid = false;\r\n\r\n    return config;\r\n  }\r\n\r\n  if (match[4]) {\r\n    if (tzRegex.exec(match[4])) {\r\n      tzFormat = 'Z';\r\n    } else {\r\n      config._isValid = false;\r\n\r\n      return config;\r\n    }\r\n  }\r\n\r\n  config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\r\n\r\n  return configFromStringAndFormat(config);\r\n}\r\n\r\nfunction extractFromRFC2822Strings(yearStr: string, monthStr: string, dayStr: string, hourStr: string, minuteStr: string, secondStr: string): DateArray {\r\n  const result = [\r\n    untruncateYear(yearStr),\r\n    defaultLocaleMonthsShort.indexOf(monthStr),\r\n    parseInt(dayStr, 10),\r\n    parseInt(hourStr, 10),\r\n    parseInt(minuteStr, 10)\r\n  ];\r\n\r\n  if (secondStr) {\r\n    result.push(parseInt(secondStr, 10));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction untruncateYear(yearStr: string): number {\r\n  const year = parseInt(yearStr, 10);\r\n\r\n  return year <= 49 ? year + 2000 : year;\r\n}\r\n\r\nfunction preprocessRFC2822(str: string): string {\r\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\r\n  return str\r\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\r\n    .replace(/(\\s\\s+)/g, ' ').trim();\r\n}\r\n\r\nfunction checkWeekday(weekdayStr: string, parsedInput: DateArray, config: DateParsingConfig): boolean {\r\n  if (weekdayStr) {\r\n    // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\r\n    const weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr);\r\n    const weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\r\n    if (weekdayProvided !== weekdayActual) {\r\n      getParsingFlags(config).weekdayMismatch = true;\r\n      config._isValid = false;\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction calculateOffset(obsOffset: string, militaryOffset: string, numOffset: string) {\r\n  if (obsOffset) {\r\n    return obsOffsets[obsOffset];\r\n  } else if (militaryOffset) {\r\n    // the only allowed military tz is Z\r\n    return 0;\r\n  } else {\r\n    const hm = parseInt(numOffset, 10);\r\n    const m = hm % 100;\r\n    const h = (hm - m) / 100;\r\n\r\n    return h * 60 + m;\r\n  }\r\n}\r\n\r\n// date and time from ref 2822 format\r\nexport function configFromRFC2822(config: DateParsingConfig): DateParsingConfig {\r\n  if (!isString(config._i)) {\r\n    return config;\r\n  }\r\n\r\n  const match = rfc2822.exec(preprocessRFC2822(config._i));\r\n\r\n  if (!match) {\r\n    return markInvalid(config);\r\n  }\r\n\r\n  const parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\r\n  if (!checkWeekday(match[1], parsedArray, config)) {\r\n    return config;\r\n  }\r\n\r\n  config._a = parsedArray;\r\n  config._tzm = calculateOffset(match[8], match[9], match[10]);\r\n\r\n  config._d = createUTCDate.apply(null, config._a);\r\n  config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\r\n\r\n  getParsingFlags(config).rfc2822 = true;\r\n\r\n  return config;\r\n}\r\n\r\n// date from iso format or fallback\r\nexport function configFromString(config: DateParsingConfig): DateParsingConfig {\r\n  if (!isString(config._i)) {\r\n    return config;\r\n  }\r\n\r\n  const matched = aspNetJsonRegex.exec(config._i);\r\n\r\n  if (matched !== null) {\r\n    config._d = new Date(+matched[1]);\r\n\r\n    return config;\r\n  }\r\n\r\n  // todo: update logic processing\r\n  // isISO -> configFromISO\r\n  // isRFC -> configFromRFC\r\n\r\n  configFromISO(config);\r\n  if (config._isValid === false) {\r\n    delete config._isValid;\r\n  } else {\r\n    return config;\r\n  }\r\n\r\n  configFromRFC2822(config);\r\n  if (config._isValid === false) {\r\n    delete config._isValid;\r\n  } else {\r\n    return config;\r\n  }\r\n\r\n  // Final attempt, use Input Fallback\r\n  // hooks.createFromInputFallback(config);\r\n  return createInvalid(config);\r\n}\r\n\r\n// hooks.createFromInputFallback = deprecate(\r\n//     'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\r\n//     'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\r\n//     'discouraged and will be removed in an upcoming major release. Please refer to ' +\r\n//     'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\r\n//     function (config) {\r\n//         config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\r\n//     }\r\n// );\r\n"]}