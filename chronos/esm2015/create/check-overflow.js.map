{"version":3,"file":"check-overflow.js","sourceRoot":"","sources":["../../../../../src/chronos/create/check-overflow.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAClD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AACzG,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAG7C,MAAM,UAAU,aAAa,CAAC,MAAyB;IACrD,IAAI,QAAQ,CAAC;IACb,MAAM,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;IAEpB,IAAI,CAAC,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,EAAE;QAChD,sBAAsB;QACtB,QAAQ;YACN,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBACrC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBAC9D,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;wBACtH,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;4BACxC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gCACxC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;oCACxD,CAAC,CAAC,CAAC;QAEjB,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,kBAAkB,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,QAAQ,GAAG,IAAI,CAAC,EAAE;YACtF,QAAQ,GAAG,IAAI,CAAC;SACjB;QACD,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,cAAc,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE;YAC7D,QAAQ,GAAG,IAAI,CAAC;SACjB;QACD,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,gBAAgB,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE;YAC/D,QAAQ,GAAG,OAAO,CAAC;SACpB;QAED,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC7C;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { getParsingFlags } from './parsing-flags';\r\nimport { DATE, HOUR, MILLISECOND, MINUTE, MONTH, SECOND, WEEK, WEEKDAY, YEAR } from '../units/constants';\r\nimport { daysInMonth } from '../units/month';\r\nimport { DateParsingConfig } from './parsing.types';\r\n\r\nexport function checkOverflow(config: DateParsingConfig): DateParsingConfig {\r\n  let overflow;\r\n  const a = config._a;\r\n\r\n  if (a && getParsingFlags(config).overflow === -2) {\r\n    // todo: fix this sh*t\r\n    overflow =\r\n      a[MONTH] < 0 || a[MONTH] > 11 ? MONTH :\r\n        a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\r\n          a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\r\n            a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE :\r\n              a[SECOND] < 0 || a[SECOND] > 59 ? SECOND :\r\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\r\n                  -1;\r\n\r\n    if (getParsingFlags(config)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\r\n      overflow = DATE;\r\n    }\r\n    if (getParsingFlags(config)._overflowWeeks && overflow === -1) {\r\n      overflow = WEEK;\r\n    }\r\n    if (getParsingFlags(config)._overflowWeekday && overflow === -1) {\r\n      overflow = WEEKDAY;\r\n    }\r\n\r\n    getParsingFlags(config).overflow = overflow;\r\n  }\r\n\r\n  return config;\r\n}\r\n\r\n"]}