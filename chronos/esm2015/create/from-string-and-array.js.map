{"version":3,"file":"from-string-and-array.js","sourceRoot":"","sources":["../../../../../src/chronos/create/from-string-and-array.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAClD,OAAO,EAAE,yBAAyB,EAAE,MAAM,0BAA0B,CAAC;AAErE,+CAA+C;AAC/C,MAAM,UAAU,wBAAwB,CAAC,MAAyB;IAChE,IAAI,UAAU,CAAC;IACf,IAAI,UAAU,CAAC;IACf,IAAI,WAAW,CAAC;IAChB,IAAI,YAAY,CAAC;IAEjB,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QACxC,eAAe,CAAC,MAAM,CAAC,CAAC,aAAa,GAAG,IAAI,CAAC;QAE7C,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC;KAC9B;IAED,IAAI,CAAC,CAAC;IACN,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,YAAY,GAAG,CAAC,CAAC;QACjB,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QACvC,IAAI,MAAM,CAAC,OAAO,IAAI,IAAI,EAAE;YAC1B,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;SACrC;QACD,UAAU,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7B,yBAAyB,CAAC,UAAU,CAAC,CAAC;QAEtC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YACxB,SAAS;SACV;QAED,0EAA0E;QAC1E,YAAY,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC;QAE1D,YAAY;QACZ,YAAY,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,EAAE,CAAC;QAErE,eAAe,CAAC,UAAU,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC;QAEjD,IAAI,WAAW,IAAI,IAAI,IAAI,YAAY,GAAG,WAAW,EAAE;YACrD,WAAW,GAAG,YAAY,CAAC;YAC3B,UAAU,GAAG,UAAU,CAAC;SACzB;KACF;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,IAAI,UAAU,CAAC,CAAC;AACzD,CAAC","sourcesContent":["import { DateParsingConfig } from './parsing.types';\r\nimport { createInvalid, isValid } from './valid';\r\nimport { getParsingFlags } from './parsing-flags';\r\nimport { configFromStringAndFormat } from './from-string-and-format';\r\n\r\n// date from string and array of format strings\r\nexport function configFromStringAndArray(config: DateParsingConfig): DateParsingConfig {\r\n  let tempConfig;\r\n  let bestMoment;\r\n  let scoreToBeat;\r\n  let currentScore;\r\n\r\n  if (!config._f || config._f.length === 0) {\r\n    getParsingFlags(config).invalidFormat = true;\r\n\r\n    return createInvalid(config);\r\n  }\r\n\r\n  let i;\r\n  for (i = 0; i < config._f.length; i++) {\r\n    currentScore = 0;\r\n    tempConfig = Object.assign({}, config);\r\n    if (config._useUTC != null) {\r\n      tempConfig._useUTC = config._useUTC;\r\n    }\r\n    tempConfig._f = config._f[i];\r\n    configFromStringAndFormat(tempConfig);\r\n\r\n    if (!isValid(tempConfig)) {\r\n      continue;\r\n    }\r\n\r\n    // if there is any input that was not parsed add a penalty for that format\r\n    currentScore += getParsingFlags(tempConfig).charsLeftOver;\r\n\r\n    // or tokens\r\n    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\r\n\r\n    getParsingFlags(tempConfig).score = currentScore;\r\n\r\n    if (scoreToBeat == null || currentScore < scoreToBeat) {\r\n      scoreToBeat = currentScore;\r\n      bestMoment = tempConfig;\r\n    }\r\n  }\r\n\r\n  return Object.assign(config, bestMoment || tempConfig);\r\n}\r\n"]}