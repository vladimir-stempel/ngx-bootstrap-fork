{"version":3,"file":"create.js","sourceRoot":"","sources":["../../../../../src/chronos/duration/create.ts"],"names":[],"mappings":"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","sourcesContent":["// ASP.NET json date format regex\r\nimport { Duration, isDuration } from './constructor';\r\nimport { isDateValid, isNumber, isObject, isString, toInt } from '../utils/type-checks';\r\nimport { DATE, HOUR, MILLISECOND, MINUTE, SECOND } from '../units/constants';\r\nimport { parseDate } from '../create/local';\r\nimport { absRound } from '../utils/abs-round';\r\nimport { DateObject } from '../types';\r\nimport { DateParsingConfig } from '../create/parsing.types';\r\nimport { cloneWithOffset } from '../units/offset';\r\nimport { isAfter, isBefore } from '../utils/date-compare';\r\nimport { getFullYear, getMonth } from '../utils/date-getters';\r\nimport { add } from '../moment/add-subtract';\r\nimport { cloneDate } from '../create/clone';\r\n\r\nconst aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\r\n\r\n// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\r\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\r\n// and further modified to allow for strings containing both week and day\r\nconst isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\r\n\r\nexport type DurationInput = string | number | Duration | Partial<DateObject> | { from: Date; to: Date };\r\n\r\nexport function createDuration(input?: DurationInput, key?: string, config: DateParsingConfig = {}) {\r\n  const duration = convertDuration(input, key);\r\n  // matching against regexp is expensive, do it on demand\r\n\r\n  return new Duration(duration, config);\r\n}\r\n\r\nfunction convertDuration(input: any, key: string): Partial<DateObject> {\r\n  // checks for null or undefined\r\n  if (input == null) {\r\n    return {};\r\n  }\r\n\r\n  if (isDuration(input)) {\r\n    return {\r\n      milliseconds: input._milliseconds,\r\n      day: input._days,\r\n      month: input._months\r\n    };\r\n  }\r\n  if (isNumber(input)) {\r\n    // duration = {};\r\n    return key ? { [key]: input } : { milliseconds: input };\r\n  }\r\n\r\n  if (isString(input)) {\r\n    let match = aspNetRegex.exec(input);\r\n\r\n    if (match) {\r\n      const sign = (match[1] === '-') ? -1 : 1;\r\n\r\n      return {\r\n        year: 0,\r\n        day: toInt(match[DATE]) * sign,\r\n        hours: toInt(match[HOUR]) * sign,\r\n        minutes: toInt(match[MINUTE]) * sign,\r\n        seconds: toInt(match[SECOND]) * sign,\r\n        // the millisecond decimal point is included in the match\r\n        milliseconds: toInt(absRound(toInt(match[MILLISECOND]) * 1000)) * sign\r\n      };\r\n    }\r\n\r\n    match = isoRegex.exec(input);\r\n    if (match) {\r\n      const sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;\r\n\r\n      return {\r\n        year: parseIso(match[2], sign),\r\n        month: parseIso(match[3], sign),\r\n        week: parseIso(match[4], sign),\r\n        day: parseIso(match[5], sign),\r\n        hours: parseIso(match[6], sign),\r\n        minutes: parseIso(match[7], sign),\r\n        seconds: parseIso(match[8], sign)\r\n      };\r\n    }\r\n\r\n  }\r\n\r\n  if (isObject<{from: any; to: any}>(input) && ('from' in input || 'to' in input)) {\r\n    const diffRes = momentsDifference(parseDate(input.from), parseDate(input.to));\r\n\r\n    return {\r\n      milliseconds: diffRes.milliseconds,\r\n      month: diffRes.months\r\n    };\r\n  }\r\n\r\n  return input;\r\n}\r\n\r\n// createDuration.fn = Duration.prototype;\r\n// createDuration.invalid = invalid;\r\n\r\nfunction parseIso(inp: string, sign: number): number {\r\n  // We'd normally use ~~inp for this, but unfortunately it also\r\n  // converts floats to ints.\r\n  // inp may be undefined, so careful calling replace on it.\r\n  const res = inp && parseFloat(inp.replace(',', '.'));\r\n  // apply sign while we're at it\r\n\r\n  return (isNaN(res) ? 0 : res) * sign;\r\n}\r\n\r\nfunction positiveMomentsDifference(base: Date, other: Date): { milliseconds: number; months: number } {\r\n  const res = { milliseconds: 0, months: 0 };\r\n\r\n  res.months = getMonth(other) - getMonth(base) +\r\n    (getFullYear(other) - getFullYear(base)) * 12;\r\n  const _basePlus = add(cloneDate(base), res.months, 'month');\r\n  if (isAfter(_basePlus, other)) {\r\n    --res.months;\r\n  }\r\n\r\n  res.milliseconds = +other - +(add(cloneDate(base), res.months, 'month'));\r\n\r\n  return res;\r\n}\r\n\r\nfunction momentsDifference(base: Date, other: Date): { milliseconds: number; months: number } {\r\n  if (!(isDateValid(base) && isDateValid(other))) {\r\n    return { milliseconds: 0, months: 0 };\r\n  }\r\n\r\n  let res;\r\n  const _other = cloneWithOffset(other, base, {_offset: base.getTimezoneOffset()});\r\n  if (isBefore(base, _other)) {\r\n    res = positiveMomentsDifference(base, _other);\r\n  } else {\r\n    res = positiveMomentsDifference(_other, base);\r\n    res.milliseconds = -res.milliseconds;\r\n    res.months = -res.months;\r\n  }\r\n\r\n  return res;\r\n}\r\n"]}