{"version":3,"file":"valid.js","sourceRoot":"","sources":["../../../../../src/chronos/duration/valid.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAK7C,MAAM,QAAQ,GAAyB,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;AAClI,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAA+B,EAAE,KAAK,EAAE,EAAE;IAC9E,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;IAElB,OAAO,GAAG,CAAC;AACb,CAAC,EAAE,EAAE,CAAC,CAAC;AAEP,MAAM,UAAU,eAAe,CAAC,QAA6B;IAC3D,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3C,IAAI,YAAY;SACX,IAAI,CAAC,CAAC,GAAqB,EAAE,EAAE;QAC9B,OAAO,CAAC,GAAG,IAAI,YAAY,CAAC;eACvB,QAAQ,CAAC,GAAG,CAAC,KAAK,IAAI;eACtB,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,EAAE;QACN,OAAO,KAAK,CAAC;KACd;IACD,8BAA8B;IAC9B,qGAAqG;IACrG,oBAAoB;IACpB,MAAM;IACN,IAAI;IAEJ,IAAI,cAAc,GAAG,KAAK,CAAC;IAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACxC,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;YACzB,4CAA4C;YAC5C,IAAI,cAAc,EAAE;gBAClB,OAAO,KAAK,CAAC;aACd;YACD,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1D,cAAc,GAAG,IAAI,CAAC;aACvB;SACF;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,8BAA8B;AAC9B,0BAA0B;AAC1B,IAAI;AACJ,EAAE;AACF,8CAA8C;AAC9C,gCAAgC;AAChC,IAAI","sourcesContent":["import { toInt } from '../utils/type-checks';\r\nimport { createDuration } from './create';\r\nimport { Duration } from './constructor';\r\nimport { DateObject } from '../types';\r\n\r\nconst ordering: (keyof DateObject)[] = ['year', 'quarter', 'month', 'week', 'day', 'hours', 'minutes', 'seconds', 'milliseconds'];\r\nconst orderingHash = ordering.reduce((mem: { [key: string]: boolean }, order) => {\r\n  mem[order] = true;\r\n\r\n  return mem;\r\n}, {});\r\n\r\nexport function isDurationValid(duration: Partial<DateObject>): boolean {\r\n  const durationKeys = Object.keys(duration);\r\n  if (durationKeys\r\n      .some((key: keyof DateObject) => {\r\n        return (key in orderingHash)\r\n          && duration[key] === null\r\n          || isNaN(duration[key]);\r\n      })) {\r\n    return false;\r\n  }\r\n  // for (let key in duration) {\r\n  //   if (!(indexOf.call(ordering, key) !== -1 && (duration[key] == null || !isNaN(duration[key])))) {\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  let unitHasDecimal = false;\r\n  for (let i = 0; i < ordering.length; ++i) {\r\n    if (duration[ordering[i]]) {\r\n      // only allow non-integers for smallest unit\r\n      if (unitHasDecimal) {\r\n        return false;\r\n      }\r\n      if (duration[ordering[i]] !== toInt(duration[ordering[i]])) {\r\n        unitHasDecimal = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// export function isValid() {\r\n//   return this._isValid;\r\n// }\r\n//\r\n// export function createInvalid(): Duration {\r\n//   return createDuration(NaN);\r\n// }\r\n"]}