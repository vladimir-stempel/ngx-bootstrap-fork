{"version":3,"file":"format.js","sourceRoot":"","sources":["../../../../../src/chronos/format/format.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAGlD,MAAM,CAAC,MAAM,eAAe,GAExB,EAAE,CAAC;AACP,MAAM,CAAC,MAAM,oBAAoB,GAAuC,EAAE,CAAC;AAE3E,MAAM,CAAC,MAAM,gBAAgB,GAAG,sLAAsL,CAAC;AAEvN,gBAAgB;AAChB,sBAAsB;AACtB,iBAAiB;AACjB,6CAA6C;AAC7C,MAAM,UAAU,cAAc,CAAC,KAAa,EACb,MAAiC,EACjC,OAAe,EACf,QAAyB;IAEtD,IAAI,KAAK,EAAE;QACT,oBAAoB,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;KACxC;IAED,IAAI,MAAM,EAAE;QACV,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG;YAChC,OAAO,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACzE,CAAC,CAAC;KACH;IAED,IAAI,OAAO,EAAE;QACX,oBAAoB,CAAC,OAAO,CAAC,GAAG,UAAU,IAAU,EAAE,IAA0B;YAC9E,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,KAAK,CAAC,CAAC;QACrE,CAAC,CAAC;KACH;AACH,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,MAAc;IAG/C,MAAM,KAAK,GAAa,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACvD,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAE5B,MAAM,SAAS,GAAiC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;IAElE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,SAAS,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3C,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACtC;IAED,OAAO,UAAU,IAAU,EAAE,MAAc,EAAE,KAAc,EAAE,MAAM,GAAG,CAAC;QAErE,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/B,MAAM,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC,CAAE,SAAS,CAAC,CAAC,CAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC;gBACrF,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAClB;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,sBAAsB,CAAC,KAAa;IAC3C,IAAI,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;QAC3B,OAAO,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;KACtC;IAED,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAClC,CAAC","sourcesContent":["import { Locale } from '../locale/locale.class';\r\nimport { zeroFill } from '../utils/zero-fill';\r\nimport { isFunction } from '../utils/type-checks';\r\nimport { DateFormatterOptions, DateFormatterFn } from '../types';\r\n\r\nexport const formatFunctions: {\r\n  [key: string]: (date: Date, locale: Locale, isUTC?: boolean, offset?: number) => string;\r\n} = {};\r\nexport const formatTokenFunctions: { [key: string]: DateFormatterFn } = {};\r\n\r\nexport const formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\r\n\r\n// token:    'M'\r\n// padded:   ['MM', 2]\r\n// ordinal:  'Mo'\r\n// callback: function () { this.month() + 1 }\r\nexport function addFormatToken(token: string,\r\n                               padded: [string, number, boolean],\r\n                               ordinal: string,\r\n                               callback: DateFormatterFn): void {\r\n\r\n  if (token) {\r\n    formatTokenFunctions[token] = callback;\r\n  }\r\n\r\n  if (padded) {\r\n    formatTokenFunctions[padded[0]] = function (): string {\r\n      return zeroFill(callback.apply(null, arguments), padded[1], padded[2]);\r\n    };\r\n  }\r\n\r\n  if (ordinal) {\r\n    formatTokenFunctions[ordinal] = function (date: Date, opts: DateFormatterOptions): string {\r\n      return opts.locale.ordinal(callback.apply(null, arguments), token);\r\n    };\r\n  }\r\n}\r\n\r\nexport function makeFormatFunction(format: string):\r\n  (date: Date, locale: Locale, isUTC?: boolean, offset?: number) => string {\r\n\r\n  const array: string[] = format.match(formattingTokens);\r\n  const length = array.length;\r\n\r\n  const formatArr: string[] | DateFormatterFn[] = new Array(length);\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    formatArr[i] = formatTokenFunctions[array[i]]\r\n      ? formatTokenFunctions[array[i]]\r\n      : removeFormattingTokens(array[i]);\r\n  }\r\n\r\n  return function (date: Date, locale: Locale, isUTC: boolean, offset = 0): string {\r\n\r\n    let output = '';\r\n    for (let j = 0; j < length; j++) {\r\n      output += isFunction(formatArr[j])\r\n        ? (formatArr[j] as DateFormatterFn).call(null, date, {format, locale, isUTC, offset})\r\n        : formatArr[j];\r\n    }\r\n\r\n    return output;\r\n  };\r\n}\r\n\r\nfunction removeFormattingTokens(input: string): string {\r\n  if (input.match(/\\[[\\s\\S]/)) {\r\n    return input.replace(/^\\[|\\]$/g, '');\r\n  }\r\n\r\n  return input.replace(/\\\\/g, '');\r\n}\r\n"]}