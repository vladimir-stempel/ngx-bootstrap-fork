{"version":3,"file":"type-checks.js","sourceRoot":"","sources":["../../../../../src/chronos/utils/type-checks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,MAAM,UAAU,QAAQ,CAAC,GAAQ;IAC/B,OAAO,OAAO,GAAG,KAAK,QAAQ,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAU;IAC/B,OAAO,KAAK,YAAY,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,eAAe,CAAC;AAC5F,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,KAAU;IAClC,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC;AAC3C,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,IAAU;IACpC,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACxD,CAAC;AAED,wDAAwD;AACxD,MAAM,UAAU,UAAU,CAAC,EAAO;IAChC,OAAO,CACL,EAAE,YAAY,QAAQ;QACtB,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,mBAAmB,CAC3D,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,KAAW;IAClC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAAC;AAClG,CAAC;AAED,MAAM,UAAU,OAAO,CAAI,KAAW;IACpC,OAAO,CACL,KAAK,YAAY,KAAK;QACtB,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,gBAAgB,CAC3D,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,UAAU,CAAI,CAAI,CAAC,UAAU,EAAE,CAAS;IACtD,OAAO,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,QAAQ,CAAI,KAAU,CAAC,UAAU;IAC/C,+DAA+D;IAC/D,gBAAgB;IAChB,OAAO,CACL,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAC7E,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,GAAQ;IACpC,IAAI,MAAM,CAAC,mBAAmB,EAAE;QAC9B,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;KACvD;IACD,IAAI,CAAC,CAAC;IACN,KAAK,CAAC,IAAI,GAAG,EAAE;QACb,iDAAiD;QACjD,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;YACzB,OAAO,KAAK,CAAC;SACd;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAGD,MAAM,UAAU,WAAW,CAAC,KAAU;IACpC,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,KAAK,CAAI,mBAAwC;IAC/D,MAAM,aAAa,GAAG,CAAC,mBAAmB,CAAC;IAC3C,IAAI,KAAK,GAAG,CAAC,CAAC;IAEd,IAAI,aAAa,KAAK,CAAC,IAAI,QAAQ,CAAC,aAAa,CAAC,EAAE;QAClD,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;KACjC;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { absFloor } from '../utils';\r\n\r\nexport function isString(str: any): str is string {\r\n  return typeof str === 'string';\r\n}\r\n\r\nexport function isDate(value: any): value is Date {\r\n  return value instanceof Date || Object.prototype.toString.call(value) === '[object Date]';\r\n}\r\n\r\nexport function isBoolean(value: any): value is boolean {\r\n  return value === true || value === false;\r\n}\r\n\r\nexport function isDateValid(date: Date): boolean {\r\n  return date && date.getTime && !isNaN(date.getTime());\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport function isFunction(fn: any): fn is Function {\r\n  return (\r\n    fn instanceof Function ||\r\n    Object.prototype.toString.call(fn) === '[object Function]'\r\n  );\r\n}\r\n\r\nexport function isNumber(value?: any): value is number {\r\n  return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';\r\n}\r\n\r\nexport function isArray<T>(input?: any): input is T[] {\r\n  return (\r\n    input instanceof Array ||\r\n    Object.prototype.toString.call(input) === '[object Array]'\r\n  );\r\n}\r\n\r\nexport function hasOwnProp<T>(a: T /*object*/, b: string): b is Extract<keyof T, string> {\r\n  return Object.prototype.hasOwnProperty.call(a, b);\r\n}\r\n\r\nexport function isObject<T>(input: any /*object*/): input is T {\r\n  // IE8 will treat undefined and null as object if it wasn't for\r\n  // input != null\r\n  return (\r\n    input != null && Object.prototype.toString.call(input) === '[object Object]'\r\n  );\r\n}\r\n\r\nexport function isObjectEmpty(obj: any): boolean {\r\n  if (Object.getOwnPropertyNames) {\r\n    return (Object.getOwnPropertyNames(obj).length === 0);\r\n  }\r\n  let k;\r\n  for (k in obj) {\r\n    // eslint-disable-next-line no-prototype-builtins\r\n    if (obj.hasOwnProperty(k)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n\r\nexport function isUndefined(input: any): boolean {\r\n  return input === void 0;\r\n}\r\n\r\nexport function toInt<T>(argumentForCoercion: string | number | T): number {\r\n  const coercedNumber = +argumentForCoercion;\r\n  let value = 0;\r\n\r\n  if (coercedNumber !== 0 && isFinite(coercedNumber)) {\r\n    value = absFloor(coercedNumber);\r\n  }\r\n\r\n  return value;\r\n}\r\n"]}