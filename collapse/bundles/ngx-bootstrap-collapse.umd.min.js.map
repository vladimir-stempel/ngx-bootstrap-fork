{"version":3,"sources":["../../../../src/collapse/collapse-animations.ts","../../../../src/collapse/collapse.directive.ts","../../../../src/collapse/collapse.module.ts"],"names":["COLLAPSE_ANIMATION_TIMING","expandAnimation","style","height","visibility","animate","collapseAnimation","CollapseDirective","_el","_renderer","_builder","this","collapsed","EventEmitter","collapses","expanded","expands","isExpanded","collapseNewValue","isCollapsed","isCollapse","isCollapsing","isAnimated","_display","_stylesLoaded","_COLLAPSE_ACTION_NAME","_EXPAND_ACTION_NAME","_factoryCollapseAnimation","build","_factoryExpandAnimation","Object","defineProperty","prototype","value","show","hide","setStyle","nativeElement","_player","_isAnimationDone","toggle","ngAfterViewChecked","reset","_this","emit","animationRun","removeStyle","action","callback","addClass","factoryAnimation","destroy","create","play","onDone","i0","ɵɵdirectiveInject","ElementRef","Renderer2","i1","AnimationBuilder","selectors","hostVars","hostBindings","rf","ctx","Directive","selector","exportAs","host","[class.collapse]","Output","HostBinding","display","Input","collapse","CollapseModule","forRoot","ngModule","providers","declarations","exports","NgModule"],"mappings":"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","sourcesContent":["import {\r\n  animate,\r\n  style,\r\n  AnimationMetadata\r\n} from '@angular/animations';\r\n\r\nexport const COLLAPSE_ANIMATION_TIMING = '400ms cubic-bezier(0.4,0.0,0.2,1)';\r\n\r\nexport const expandAnimation: AnimationMetadata[] = [\r\n  style({ height: 0, visibility: 'hidden' }),\r\n  animate(\r\n    COLLAPSE_ANIMATION_TIMING,\r\n    style({ height: '*', visibility: 'visible' })\r\n  )\r\n];\r\n\r\nexport const collapseAnimation: AnimationMetadata[] = [\r\n  style({ height: '*', visibility: 'visible' }),\r\n  animate(\r\n    COLLAPSE_ANIMATION_TIMING,\r\n    style({ height: 0, visibility: 'hidden' })\r\n  )\r\n];\r\n","import {\r\n  AnimationBuilder,\r\n  AnimationFactory,\r\n  AnimationPlayer\r\n} from '@angular/animations';\r\n\r\nimport {\r\n  AfterViewChecked,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\nimport {\r\n  collapseAnimation,\r\n  expandAnimation\r\n} from './collapse-animations';\r\n\r\n@Directive({\r\n  selector: '[collapse]',\r\n  exportAs: 'bs-collapse',\r\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n  host: {\r\n    '[class.collapse]': 'true'\r\n  }\r\n})\r\nexport class CollapseDirective implements AfterViewChecked {\r\n  /** This event fires as soon as content collapses */\r\n  @Output() collapsed: EventEmitter<CollapseDirective> = new EventEmitter();\r\n  /** This event fires when collapsing is started */\r\n  @Output() collapses: EventEmitter<CollapseDirective> = new EventEmitter();\r\n  /** This event fires as soon as content becomes visible */\r\n  @Output() expanded: EventEmitter<CollapseDirective> = new EventEmitter();\r\n  /** This event fires when expansion is started */\r\n  @Output() expands: EventEmitter<CollapseDirective> = new EventEmitter();\r\n  // shown\r\n  @HostBinding('class.in')\r\n  @HostBinding('class.show')\r\n  @HostBinding('attr.aria-expanded')\r\n  isExpanded = true;\r\n  collapseNewValue = true;\r\n  // hidden\r\n  @HostBinding('attr.aria-hidden') isCollapsed = false;\r\n  // stale state\r\n  @HostBinding('class.collapse') isCollapse = true;\r\n  // animation state\r\n  @HostBinding('class.collapsing') isCollapsing = false;\r\n\r\n  @Input()\r\n  set display(value: string) {\r\n    if (!this.isAnimated) {\r\n      this._renderer.setStyle(this._el.nativeElement, 'display', value);\r\n\r\n      return;\r\n    }\r\n\r\n    this._display = value;\r\n\r\n    if (value === 'none') {\r\n      this.hide();\r\n\r\n      return;\r\n    }\r\n\r\n    this.show();\r\n  }\r\n  /** turn on/off animation */\r\n  @Input() isAnimated = false;\r\n  /** A flag indicating visibility of content (shown or hidden) */\r\n  @Input()\r\n  set collapse(value: boolean) {\r\n    this.collapseNewValue = value;\r\n    if (!this._player || this._isAnimationDone) {\r\n      this.isExpanded = value;\r\n      this.toggle();\r\n    }\r\n  }\r\n\r\n  get collapse(): boolean {\r\n    return this.isExpanded;\r\n  }\r\n\r\n  private _display = 'block';\r\n  private _factoryCollapseAnimation: AnimationFactory;\r\n  private _factoryExpandAnimation: AnimationFactory;\r\n  private _isAnimationDone: boolean;\r\n  private _player: AnimationPlayer;\r\n  private _stylesLoaded = false;\r\n\r\n  private _COLLAPSE_ACTION_NAME = 'collapse';\r\n  private _EXPAND_ACTION_NAME = 'expand';\r\n\r\n  constructor(\r\n    private _el: ElementRef,\r\n    private _renderer: Renderer2,\r\n    _builder: AnimationBuilder\r\n  ) {\r\n    this._factoryCollapseAnimation = _builder.build(collapseAnimation);\r\n    this._factoryExpandAnimation = _builder.build(expandAnimation);\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this._stylesLoaded = true;\r\n\r\n    if (!this._player || !this._isAnimationDone) {\r\n      return;\r\n    }\r\n\r\n    this._player.reset();\r\n    this._renderer.setStyle(this._el.nativeElement, 'height', '*');\r\n  }\r\n\r\n  /** allows to manually toggle content visibility */\r\n  toggle(): void {\r\n    if (this.isExpanded) {\r\n      this.hide();\r\n    } else {\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  /** allows to manually hide content */\r\n  hide(): void {\r\n    this.isCollapsing = true;\r\n    this.isExpanded = false;\r\n    this.isCollapsed = true;\r\n    this.isCollapsing = false;\r\n\r\n    this.collapses.emit(this);\r\n\r\n    this._isAnimationDone = false;\r\n\r\n    this.animationRun(this.isAnimated, this._COLLAPSE_ACTION_NAME)(() => {\r\n      this._isAnimationDone = true;\r\n      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\r\n        this.show();\r\n\r\n        return;\r\n      }\r\n      this.collapsed.emit(this);\r\n      this._renderer.setStyle(this._el.nativeElement, 'display', 'none');\r\n    });\r\n  }\r\n  /** allows to manually show collapsed content */\r\n  show(): void {\r\n    this._renderer.setStyle(this._el.nativeElement, 'display', this._display);\r\n\r\n    this.isCollapsing = true;\r\n    this.isExpanded = true;\r\n    this.isCollapsed = false;\r\n    this.isCollapsing = false;\r\n\r\n    this.expands.emit(this);\r\n\r\n    this._isAnimationDone = false;\r\n    this.animationRun(this.isAnimated, this._EXPAND_ACTION_NAME)(() => {\r\n      this._isAnimationDone = true;\r\n      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\r\n        this.hide();\r\n\r\n        return;\r\n      }\r\n      this.expanded.emit(this);\r\n      this._renderer.removeStyle(this._el.nativeElement, 'overflow');\r\n    });\r\n  }\r\n\r\n  animationRun(isAnimated: boolean, action: string) {\r\n    if (!isAnimated || !this._stylesLoaded) {\r\n      return (callback: () => void) => callback();\r\n    }\r\n\r\n    this._renderer.setStyle(this._el.nativeElement, 'overflow', 'hidden');\r\n    this._renderer.addClass(this._el.nativeElement, 'collapse');\r\n\r\n    const factoryAnimation = (action === this._EXPAND_ACTION_NAME)\r\n      ? this._factoryExpandAnimation\r\n      : this._factoryCollapseAnimation;\r\n\r\n    if (this._player) {\r\n      this._player.destroy();\r\n    }\r\n\r\n    this._player = factoryAnimation.create(this._el.nativeElement);\r\n    this._player.play();\r\n\r\n    return (callback: () => void) => this._player.onDone(callback);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CollapseDirective } from './collapse.directive';\r\n\r\n@NgModule({\r\n  declarations: [CollapseDirective],\r\n  exports: [CollapseDirective]\r\n})\r\nexport class CollapseModule {\r\n  static forRoot(): ModuleWithProviders<CollapseModule> {\r\n    return { ngModule: CollapseModule, providers: [] };\r\n  }\r\n}\r\n"]}